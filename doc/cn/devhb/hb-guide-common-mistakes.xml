<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/1.0 -->

<!-- This document was last synched to:
     cvs://gentoo/gentoo/xml/htdocs/doc/en/ebuild-mistakes.xml :: R1.4.
-->

<sections>
<section>
<title>常见的Ebuild编写错误</title>
<subsection>
<title>介绍</title>
<body>

<p>
这里有一个我从用户提交的ebuild里能看到的常见错误。请确保你提交的ebuild不要再犯这些错误。在提交任何ebuild之前，首先必须阅读<uri link="/doc/en/policy.xml">Gentoo开发方针</uri>和<uri link="/doc/en/gentoo-howto.xml">Gentoo Ebuild手册</uri>。还有，看看里面的一些ebuilds（比如至少一两个），确认你知道ebuild编写的风格。
</p>

<p>
还有，阅读一些使用eclass的ebuild和阅读<uri link="/doc/en/eclass-howto.xml">Eclass手册</uri>帮助理解它们是很有用的。最后，在提交你的ebuild之前仔细的阅读<uri link="/doc/en/ebuild-submit.xml">发布Ebuild指南</uri>。
</p>

</body>
</subsection>
<subsection>
<title>遗漏/错误/不全的文件头</title>
<body>

<p>
提交你的ebuild时，注意文件头必须和<path>/usr/portage/skel.ebuild</path>里的<e>完全</e>一样。特别重要的是，不要修改任何东西，确保<c>&#36;Header: &#36;</c>行是完整的。
</p>

<p>
前面三行<e>必须</e>看起来和下面一样：
</p>

<pre caption="正确的文件头">
# Copyright 1999-2004 Gentoo Foundation
# Distributed under the terms of the GNU General Public License v2
# &#36;Header: &#36;
</pre>

<p>
除非你在提交一个新加补丁或者改变版本号的ebuild，否则你不应该修改<c>&#36;Header: &#36;</c>行。但是无论如何，这一行必须在。当我们将检查ebuild，放入cvs时，将会修改文件头，带上正确的版本号和日期信息。因此，你没有必要手动修改它。
</p>

</body>
</subsection>
<subsection>
<title>遗漏IUSE</title>
<body>

<p>
目前为止最常遗漏的变量IUSE。你必须（根据<uri link="/doc/en/gentoo-howto.xml">Gentoo手册</uri>）包含这个变量，即使没有USE参数可用也如此。如果不支持任何USE参数，就只需要加上下面的：
</p>

<pre caption="空的IUSE">
IUSE=""
</pre>

</body>
</subsection>
<subsection>
<title>重新定义的P, PV, PN, PF</title>
<body>

<p>
你永远都不应该重新定义这些变量。使用的时候一直要使用MY_P、MY_PN、MY_PV、P0等。可以查看其他的ebuild如何做的，以获得更多信息。大部分的ebuild都使用bash的“参数扩展（Parameter Expansion）”。请查看bash的手册页面以理解“参数扩展”的工作原理。
</p>

<p>
另外，如果你发现有重新定义它的软件包，不用复制它，并提交一个这个ebuild的臭虫报告。
</p>

</body>
</subsection>
<subsection>
<title>在SRC_URI和S里包含版本号</title>
<body>

<p>
你应该不要试图吧版本号包含在SRC_URI和S里。使用时一直要使用${PV}或者${P}。这会使维护这个ebuild更加容易。如果在一个源码包里版本号不是固定的，那么就使用MY_P。dev-python/pyopenal的一个例子取得名为PyOpenAl的源码包，因此我们就这样定义它：
</p>

<pre caption="版本重定义的例子">
MY_P=${P/pyopenal/PyOpenAL}
SRC_URI="http://oomadness.tuxfamily.org/downloads/${MY_P}.tar.gz"
S=${WORKDIR}/${MY_P}
</pre>

</body>
</subsection>
<subsection>
<title>DEPEND有语法错误</title>
<body>

<p>
用户提交的DEPEND和RDEPEND一栏中有很多不同的错误。这里有一个给你编写依赖性时需要遵守的一些要点。
</p>

<ul>
  <li>
    <e>必须有CATEGORY.</e><br />
    比如说，使用<c>&gt;=x11-libs/gtk+-2</c>而不是<c>&gt;=gtk+-2</c>。
  </li>
  <li>
    <e>不要在&gt;=依赖性上使用星号（*）</e><br />
    比如何所，应该使用<c>&gt;=x11-libs/gtk+-2</c>而不是<c>&gt;=x11-libs/gtk+-2*</c>。
  </li>
  <li><e>仅限于GTK。对于GTK+1的程序要一直使用 =x11-libs/gtk+-1.2* 。</e></li>
  <li>
    <e>不要依赖于一个半发行的软件包。</e><br />
    因此不要依赖于gnome-base/gnome，而必须是特定的库如libgnome。
  </li>
  <li>
    <e>每行一个依赖性。</e><br />
    不要在一行放入太多的依赖性。否则很难阅读，也难以记住。
  </li>
</ul>

</body>
</subsection>
<subsection>
<title>DEPEND不全</title>
<body>

<p>
这是另一个很常见的错误。ebuild提交者提交了一个只是“刚能工作”而不去检查依赖性是否正确。这里有一些寻找正确依赖性的技巧。
</p>

<ul>
  <li>
    <e>阅读configure.in和configure.ac</e><br />
    在这里查看软件包。我们要找的就可以用pkg-config检查或者用AM_*函数检查特定的版本。
  </li>
  <li>
    <e>看看自带的.spec文件</e><br />
    依赖性的一个好的寻找方法是查看自带的.spec文件，以获得相关依赖性。但是，不要相信它们是绝对完整的依赖性列表。
  </li>
  <li>
    <e>查看程序／库的网站</e><br />
    查看该应用程序的网站，以获得它们建议需要的可能的依赖性。
  </li>
  <li>
    <e>阅读软件包的README和INSTALL</e><br />
    它们通常也包含了编译和安装软件包的有用信息。
  </li>
  <li>
    <e>记住非二进制的依赖性，如pkg-config，文档创建工具等</e><br />
    通常情况下，编译的过程需要如intltool、libtool、pkg-config、doxygen、scrollkeeper、gtk-doc等依赖性。确保你已经清楚的陈述了这些。
  </li>
</ul>

</body>
</subsection>
<subsection>
<title>LICENSE错误</title>
<body>

<p>
另一个用户常犯的错误是提交ebuild时提供了一个错误的版权。比如说，<c>GPL</c>不是一个正确的版权信息。你必须指定为<c>GPL-1</c>或者<c>GPL-2</c>。同样对<c>LGPL</c>也如此。确认你在<c>LICENSE</c>栏使用的版权信息是<path>/usr/portage/licenses</path>里已有的。给个小提示，可以查看源码包里的<c>COPYING</c>获得版权信息。如果一个软件包并没有指定是使用<c>GPL-1</c>或者<c>GPL-2</c>，很可能它是使用<c>GPL-2</c>。
</p>

<p>
如果你提交的软件包的版权信息是很独特，并在<path>/usr/portage/licenses</path>里没有的，那么你必须以一个不同的文件提交这个新的版权信息。
</p>

</body>
</subsection>
<subsection>
<title>KEYWORDS里未测试的ARCH</title>
<body>

<p>
除非这个ebuild在一个ARCH已经测试过，否则请不要添加其他的ARCH到KEYWORDS里。还有所有新的ebuild都应该标上~86或者其他它应该使用的架构上。确认你在改变版本号时，稳定的KEYWORDS都在前面标上<c>~</c>。
<c>~</c>.
</p>

</body>
</subsection>
<subsection>
<title>遗漏SLOT</title>
<body>

<p>
确认你已经在ebuild里设置了SLOT变量。如果你不准备使用它，也不要去掉它。填入：
</p>

<pre caption="默认的SLOT变量">
SLOT="0"
</pre>

</body>
</subsection>
<subsection>
<title>DESCRIPTION和HOMEPAGE错误</title>
<body>

<p>
请检查一下是否变量HOMEPAGE是准确的，是否在用户想了解更多此软件包时能引导用户到正确的页面。一篇优秀的概要将会用一句话将这个软件包的主要函数描述出来。
</p>

</body>
</subsection>
<subsection>
<title>完全错误的用空格代替TABS</title>
<body>

<p>
按格式编写好几行的ebuild并不有趣，因为提交者并没有按照准则使用TABS而不是许多空格。因此<e>请</e>使用tab键！
</p>

</body>
</subsection>
<subsection>
<title>留下很多空格</title>
<body>

<p>
我常常觉得这是一种犯罪。记住在你的ebuild上运行一下<c>repoman</c>，这样它会告诉你最后一行带的多余的空格或者是空的行。
</p>

</body>
</subsection>
<subsection>
<title>添加多余的S=${WORKDIR}/${P}</title>
<body>

<p>
如果<c>S=${WORKDIR}/${P}</c>，那么你不要把他添加到你的ebuild上。这个我们已经提过，你只需在不是<c>${WORKDIR}/${P}</c>的时候添加上它。
</p>

</body>
</subsection>
<subsection>
<title>遗漏文档</title>
<body>

<p>
如果你的软件包有文档，确认你使用<c>dodoc</c>并把它装在<path>/usr/share/doc/${PF}</path>。记住运行<c>dodoc</c>/<c>doins</c>时检查错误。
</p>

</body>
</subsection>
</section>

<section>
<title>常见的Ebuild提交错误</title>
<subsection>
<title>介绍</title>
<body>

<p>
请按照<uri link="/doc/en/index.xml">Gentoo文档页面</uri>里的<uri link="/doc/en/ebuild-submit.xml">发布Ebuild手册</uri>正确的提交ebuild。
</p>

</body>
</subsection>
<subsection>
<title>将ebuild打包</title>
<body>

<p>
请千万不要将附上的ebuild打包。附上补丁时也要单独出来，这样我们可以比较容易的检查它们。
</p>

</body>
</subsection>
<subsection>
<title>内部的ebuild</title>
<body>

<p>
不要剪切和粘贴一个ebuild里的内容到bugzilla评论栏。
</p>

</body>
</subsection>
<subsection>
<title>没有是哪个软件包的描述</title>
<body>

<p>
请让我们明白这个软件包是什么，如果有的话，填上这个应用程序的主页的地址。
</p>

</body>
</subsection>
<subsection>
<title>软件包更新但没有改变描述</title>
<body>

<p>
如果你提交一个软件更新，那么要确认解释了你对这个ebuild做的改变。比如说，如果一个软件包引进了新的特性／选项并且你要使用一个USE参数，将它们列表于你的bug中。不要让我们去找这些东西。
</p>

<p>
软件更新时提交一个diff文件比一个整的ebuild文件要明智很多。最好的创建diff的方法可能是：
</p>

<pre caption="创建一个diff">
$ <i>diff -u some-package-0.1.0.ebuild some-package-0.2.0.ebuild &gt; ~/some-package-0.2.0.diff</i>
</pre>

</body>
</subsection>
<subsection>
<title>为改变版本号提交没变的ebuild</title>
<body>

<p>
如果你要为Portage里的一个软件包提交一个新的版本，确定已有的ebuild仍然可以工作，并且新的ebuild里所做的改变是不兼容的（如添加文档）。如果这和前一版本没有必须的改变，那就不要附上这个ebuild了。只需要在bug报告中说出来，你将这个ebuild已经复制过去，并检验这个软件包仍然可以正常的工作和安装。
</p>

</body>
</subsection>
</section>
<section>
<title>评论和建议</title>
<subsection>
<body>

<p>
有关的评论、校正和建议请联系<mail link="liquidx@gentoo.org">Alastair Tse</mail>。
</p>

</body>
</subsection>
</section>
</sections>
