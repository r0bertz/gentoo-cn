<?xml version='1.0' encoding='UTF-8'?>
<?xml-stylesheet type="text/xsl" href="/xsl/guide.xsl" ?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/1.0 -->

<!-- $Header: /var/www/www.gentoo.org/raw_cvs/gentoo/xml/htdocs/doc/en/handbook/hb-working-features.xml,v 1.11 2004/03/01 05:43:41 swift Exp $ -->

<sections>
<section>
<title>DistCC</title>
<subsection>
<title>什么是DistCC？</title>
<body>

<p>
<c>distcc</c>是一个分布式编译的工具，可以在同一网络上几个不一定完全相同的机器来进行工作。<c>distcc</c>客户端向DistCC服务器（运行<c>distccd</c>）发送所有必须的信息，这样他们可以给客户端编译源代码的部分。网络编译的结果就是编译时间更短。
</p>

<p>
你可以在我们的<uri link="/doc/zh_cn/distcc.xml">Gentoo Distcc文档</uri>找到更多有关<c>distcc</c>的详细信息（以及怎样在Gentoo中使用的资料）。
</p>

</body>
</subsection>
<subsection>
<title>安装DistCC</title>
<body>

<p>
Distcc使用一个图形化监视器来监视你的机器用于编译的工作。如果你使用GNOME，那么将“gnome”放入你的<c>USE</c>设置中。但是，如果你不使用GNOME而仍让希望使用这个监视器，那么就把“gtk”放进你的<c>USE</c>设置。
</p>

<p>
因为distcc就像其他很多软件一样都在Gentoo的Portage中存在，安装非容容易：
</p>

<note>
从现在开始，因为你知道在你愿意的时候安装二进制包，我们在Gentoo安装手册的后面就都去掉选项<c>--usepkg</c>。
</note>

<pre caption="安装Distcc">
# <i>emerge distcc</i>
</pre>

</body>
</subsection>
<subsection>
<title>激活Portage的支持</title>
<body>

<p>
如果安装很简单，余下的部分也应该很容易了:-) 所以，让我们尽快激活Portage对<c>distcc</c>的支持。
</p>

<p>
首先，打开<path>/etc/make.conf</path>，编辑变量<c>FEATURES</c>使其包含<c>distcc</c>关键词。然后，编辑变量<c>MAKEOPTS</c>为<c>-jX</c>，其中<c>X</c>为运行<c>distccd</c>（包含当前主机）的CPU数目加上一：
</p>

<pre caption="/etc/make.conf中MAKEOPTS的可能设置">
<comment># 假设除开这台主机，你还有两个单CPU distccd主机</comment>
MAKEOPTS="-j4"
</pre>

<p>
现在，去掉<path>/etc/make.conf</path>里的<c>PORTAGE_TMPDIR</c>行，并在文件的最后添加下面一行：
</p>

<pre caption="添加额外的与distcc相关的变量到/etc/make.conf">
<comment># 不要忘了反注释掉变量PORTAGE_TMPDIR</comment>
DISTCC_DIR=${PORTAGE_TMPDIR}/portage/.distcc
</pre>

<p>
现在运行<c>distcc-config</c>，并输入已有的DistCC服务器。作为一个简单例子，我们假设已有的DistCC服务器是<c>192.168.1.102</c>（当前主机）、<c>192.168.1.103</c>和<c>192.168.1.104</c>（两个远端服务器）：
</p>

<pre caption="配置Distcc，使用已有的三个DistCC服务器">
# <i>distcc-config --set-hosts "192.168.1.102 192.168.1.103 192.168.1.104"</i>
</pre>

<p>
当然，也不要忘了运行<c>distccd</c>伺服器：
</p>

<pre caption="开始Distcc伺服器">
# <i>/etc/init.d/distccd start</i>
</pre>

<p>
恭喜恭喜，你的系统将可以使用分布式编译了！有关DistCC和Gentoo更多更深的信息，请阅读我们的<uri link="/doc/en/distcc.xml">Gentoo DistCC文档</uri>.
</p>

</body>
</subsection>
</section>
<section>
<title>ccache</title>
<subsection>
<title>什么是ccache？</title>
<body>

<p>
<c>ccache</c>是一种快速编译缓冲。当你编译一个软件时，它会缓冲即时的结果，因此当你重新编译相同的程序时，编译的时间将会大大减少。对于普通的编译来说，这个可以提高编译速度5到10倍。
</p>

<p>
如果你对<c>ccache</c>的内幕有兴趣，请访问<uri link="http://ccache.samba.org">ccache主页</uri>。
</p>

</body>
</subsection>
<subsection>
<title>安装ccache</title>
<body>

<p>
在Gentoo中安装<c>ccache</c>很轻松，只需要emerge一下就搞定了:-)
</p>

<pre caption="安装ccache">
# <i>emerge ccache</i>
</pre>

</body>
</subsection>
<subsection>
<title>激活Portage的支持</title>
<body>

<p>
首先编辑<path>/etc/make.conf</path>，并修改变量<c>FEATURES</c>使其包含<c>ccache</c>关键词：
</p>

<pre caption="在/etc/make.conf中编辑变量FEATURES">
FEATURES="ccache"
</pre>

<p>
然后，编辑（或者创建）变量<c>CCACHE_SIZE</c>（也在<path>/etc/make.conf</path>中），使其包含你要给<c>ccache</c>的磁盘空间的大小：
</p>

<pre caption="在/etc/make.conf中编辑变量CCACHE_SIZE">
CCACHE_SIZE="2G"
</pre>

<p>
现在，Portage将会在可以使用<c>ccache</c>的地方使用它来加快编译。如果你不确定<c>ccache</c>是否工作，你可以运行<c>ccache -s</c>来查看<c>ccache</c>统计数据：
</p>

<pre caption="查看ccache统计数据">
# <i>ccache -s</i>
</pre>

</body>
</subsection>
</section>
<section>
<title>二进制包</title>
<subsection>
<title>创建二进制软件包</title>
<body>

<p>
我们已经讨论了怎样使用预编译软件包，那么我们怎样创建自己的预编译软件包呢？
</p>

<p>
如果一个软件已经安装，你可以使用<c>quickpkg</c>命令，它会将已安装的文件打成一个包。这对于备份来说是很有意思的！
</p>

<pre caption="使用quickpkg">
# <i>quickpkg gnumeric</i>
</pre>

<p>
如果这个软件包还没有安装，你也可以使用<c>emerge</c>要求创建一个二进制包。<c>emerge</c>使用选项<c>--buildpkg</c>（简称<c>-b</c>）来做这个：
</p>

<pre caption="安装gnumeric并且创建二进制包">
# <i>emerge --buildpkg gnumeric</i>
</pre>

<p>
如果你要Portage默认做这个，你应该在<path>/etc/make.conf</path>中将<c>buildpkg</c>关键词包含在变量<c>FEATURES</c>中。
</p>

<pre caption="自动创建二进制包">
FEATURES="buildpkg"
</pre>

<p>
如果你不要安装软件，只是创建二进制软件包，你可以使用选项<c>--buildpkgonly</c>（简称<c>-B</c>）：
</p>

<pre caption="给gnumeric创建二进制包">
# <i>emerge --buildpkgonly gnumeric</i>
</pre>

</body>
</subsection>
</section>
<section>
<title>安全相关的特性</title>
<subsection>
<title>沙箱</title>
<body>

<p>
编译和安装软件时，Portage使用<e>沙箱（sandbox）</e>来保护你目前的系统。这意味着，只要软件还没有安装到你的系统上，这个软件包不会接触到任何沙箱以外的文件。这可以确保让Portage知道一个软件包修改和创建了什么文件。
</p>

<p>
当软件编译完成时，Portage会将软件在沙箱里进行“预安装”，以说明要放置什么文件，文件要放到哪。然后它将会将这些文件从沙箱复制到你的当前系统里。
</p>

</body>
</subsection>
<subsection>
<title>用户权限</title>
<body>

<p>
Portage也支持非超级用户（准确来说，是以组“portage”和用户“portage”编译软件包）。这在编译过程中提高了安全性。你也可以在使用用户权限时使用或者不使用沙箱。当然，并不是说用户权限和沙箱是最常见的方法。
</p>

</body>
</subsection>
<subsection>
<title>激活沙箱（sandbox）和/或用户权限（userpriv）</title>
<body>

<p>
Portage默认情况下会使用<c>sandbox</c>。如果你要使用<c>usepriv</c>，你应该将其添加到变量<c>FEATURES</c>中。注意到激活<c>userpriv</c>会失去<c>sandbox</c>支持，除非你也激活<c>usersandbox</c>：
</p>

<pre caption="激活userpriv和usersandbox">
FEATURES="userpriv usersandbox"
</pre>

<warn>
千万<e>不要</e>将<c>sandbox</c>从变量<c>FEATURES</c>中去掉！
</warn>

</body>
</subsection>
<subsection>
<title>严格检查</title>
<body>

<p>
Portage可以对危险的情况作出强烈的反应（如遗失或错误的Manifest文件）。添加关键词<c>strict</c>到变量<c>FEATURES</c>可以激活这个严格检查：
</p>

<pre caption="激活严格检查">
FEATURES="strict"
</pre>

</body>
</subsection>
<subsection>
<title>智能文件系统许可</title>
<body>

<p>
Portage可以去自动处理可能产生安全威胁的潜在的危险文件许可。它通过在前面的安装过程中去掉setuid文件的“group”和“other”对文件的可读以及去掉setgid文件的“other”对文件的可读。添加<c>sfperms</c>关键词到变量<c>FEATURES</c>可以激活这个智能文件许可：
</p>

<pre caption="激活智能文件许可">
FEATURES="sfperms"
</pre>

</body>
</subsection>
</section>
<section>
<title>其他的特性</title>
<subsection>
<title>Portage的帮助文件</title>
<body>

<p>
还有几个关键词你可以放入变量<c>FEATURES</c>中。它们中的大部分是面对开发者而对普通用户没什么多大作用。如果你想学习更多有关这些特性（一般说来就是Portage），不要忘了你还可以阅读我们提供的<path>make.conf</path>的手册。
</p>

<pre caption="更多Portage相关信息">
# <i>man make.conf</i>
</pre>

</body>
</subsection>
</section>
</sections>
