<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/1.0 -->

<!-- $Header: /var/www/www.gentoo.org/raw_cvs/gentoo/xml/htdocs/doc/en/handbook/hb-install-stage.xml,v 1.48 2004/07/16 09:25:09 neysx Exp $ -->

<sections>
<section>
<title>安装一个Stage包</title>
<subsection>
<title>正确的设置日期/时间</title>
<body>

<p>
在继续之前，你需要检查和更新一下你的系统日期/时间。一个配置错误的时钟可能在将来导致很奇怪的结果。
</p>

<p>
运行<c>date</c>确认一下当前时间：
</p>

<pre caption="确认日期/时间">
# <i>date</i>
Sun Apr 25 16:21:18 CEST 2004
</pre>

<p>
如果日期/时间显示错误，使用<c>date MMDDhhmmYYYY</c>语句（<b>M</b>是月份，<b>D</b>是日期，<b>m</b>是分钟，<b>Y</b>是年份）更新它。比如说，设定时间为2004年4月25日16时21分：
</p>

<pre caption="设定日期/时间">
# <i>date 042516212004</i>
</pre>

</body>
</subsection>
<subsection>
<title>做出你的选择</title>
<body>

<p>
下一步你需要做的是在你的系统上安装一个你所选择的<c>stage</c>包。你可以从因特网上下载一个需要的包，或者如果你从Gentoo的通用LiveCD启动的话就从LiveCD里复制过去一个。
</p>

<ul>
<li><uri link="#doc_chap2">默认：使用从因特网上下载的Stage</uri></li>
<li><uri link="#doc_chap3">替换办法：使用LiveCD里的一个Stage</uri></li>
</ul>

</body>
</subsection>
</section>
<section>
<title>默认：使用从因特网上下载的Stage</title>
<subsection>
<title>下载Stage包</title>
<body>

<p>
进入你将文件系统所挂载的Gentoo的挂载点（很可能是<path>/mnt/gentoo</path>）：
</p>

<pre caption="进入Gentoo挂载点">
# <i>cd /mnt/gentoo</i>
</pre>

<p>
根据你的安装介质不同，你可以用已有的几种工具去下载一个stage。如果你有<c>lynx</c>，这样你可以马上浏览网页<uri link="/main/en/mirrors.xml">Gentoo镜像列表</uri>选择一个离你最近的镜像。然后选择文件夹<path>releases/</path>，根据你的架构（如<path>x86</path>）和Gentoo版本（如<path>2004.1</path>）选择，只到进入<path>stages</path>文件夹。那里你将看到你的架构的所有已有的stage文件。选择一个，并输入<c>D</c>来下载。完成下载后，输入<c>Q</c>退出浏览器。
</p>

<note>
<uri link="http://hardened.gentoo.org">Gentoo Hardened</uri> stage包（用于x86架构上）是<path>2004.0</path>发行版的一部分。
</note>

<pre caption="使用lynx浏览镜像列表">
# <i>lynx http://www.gentoo.org/main/en/mirrors.xml</i>
</pre>

<p>
如果你没有<c>lynx</c>，那你应该使用<c>links2</c>来处理。<c>links2</c>并<c>lynx</c>更强大，但却有些小问题。其中的一个就是它不能使用我们前面声明的proxy变量。如果你许要设置一个代理服务器，使用<c>links2 -http-proxy proxy.server.com:8080</c>代替。然后，既然<c>links2</c>和<c>lynx</c>是相似的，你可以按照使用<c>lynx</c>一样的步骤完成这个过程。
</p>

<pre caption="使用links2浏览镜像列表">
<comment>(Without proxy)</comment>   # <i>links2 http://www.gentoo.org/main/en/mirrors.xml</i>
<comment>(With proxy)</comment>      # <i>links2 -http-proxy proxy.server.com:8080 http://www.gentoo.org/main/en/mirrors.xml</i>
</pre>

<p>
如果你要检查下载的stage包的完整性，你可以使用<c>md5sum</c>，然后将其输出和镜像提供的MD5码对比。
</p>

<pre caption="检查一个stage包的完整性">
# <i>md5sum -c stage1-x86-20040412.tar.bz2.md5</i>
stage1-x86-20040412.tar.bz2: OK
</pre>

</body>
</subsection>
<subsection>
<title>解开Stage包</title>
<body>

<p>
下载解开下载到你系统的stage包。我们使用GNU的<c>tar</c>命令来完成，这是最简单的方法：
</p>

<pre caption="解开stage">
# <i>tar -xvjpf stage?-*.tar.bz2</i>
</pre>

<note>
你可以忽略任何有关./proc的警告"No such file for directory"。还有，"Error exit delayed from previous errors"这样的信息也可以忽略。
</note>

<p>
确保你使用和我们一样的命令参数（<c>-xvjpf</c>）。<c>x</c>表示<e>解开（Extract）</e>，<c>v</c>表示<e>详细信息（Verbose）</e>（这个是可选的），<c>j</c>表示<e>用bzip2解压缩</e>，<c>p</c>表示<e>保留权限</e>还有<c>f</c>表示我们要解开一个文件，而不是一个标准输入。
</p>

<p>
stage安装完后，从<uri link="#installing_portage">安装Portage</uri>继续。
</p>

</body>
</subsection>
</section>
<section>
<title>替代办法：使用LiveCD里的一个stage</title>
<subsection>
<title>解开Stage包</title>
<body>

<p>
CD里的stage都放在<path>/mnt/cdrom/stages</path>文件夹里。使用<c>ls</c>查看里面存在的stage列表：
</p>

<pre caption="列出已有的stage">
# <i>ls /mnt/cdrom/stages</i>
</pre>

<p>
如果系统回应表示错误，你可能需要先把CD-ROM挂载上：
</p>

<pre caption="挂载CD-ROM">
# <i>ls /mnt/cdrom/stages</i>
ls: /mnt/cdrom/stages: No such file or directory
# <i>mount /dev/cdroms/cdrom0 /mnt/cdrom</i>
# <i>ls /mnt/cdrom/stages</i>
</pre>

<p>
然后进入你的Gentoo挂载点（一般情况下是<path>/mnt/gentoo</path>）：
</p>

<pre caption="进入文件夹/mnt/gentoo">
# <i>cd /mnt/gentoo</i>
</pre>

<p>
现在我们解开你选择的stage包。我们将使用GNU <c>tar</c>工具做这个。确认你使用了相同的命令参数（<c>-xvjpf</c>）！在下面的例子中，我们解开stage包<path>stage3-&lt;subarch&gt;-20040412.tar.bz2</path>。记住将包的名字换成你的stage的名字。
</p>

<pre caption="解开stage包">
# <i>tar -xvjpf /mnt/cdrom/stages/stage3-&lt;subarch&gt;-20040412.tar.bz2</i>
</pre>

<note>
你可以忽略任何有关./proc的警告"No such file for directory"。还有，"Error exit delayed from previous errors"这样的信息也可以忽略。
</note>

<p>
stage安装完后，从<uri link="#installing_portage">安装Portage</uri>继续。
</p>

</body>
</subsection>
</section>
<section id="installing_portage">
<title>安装Portage</title>
<subsection>
<title>有无网络？</title>
<body>

<p>
如果你没有一个可以使用的网络连接，你必须使用我们的LiveCD提供的一个portage快照。如果后面你要使用预编译的软件包和加快安装速度，你<e>必须</e>使用LiveCD提供的portage快照。其他的用户则可以等会使用<c>emerge</c>下载一个完全新的Portage树。
</p>

<p>
从下面一个正确的地方继续：
</p>

<ul>
  <li>
    <uri link="#installing_from_LiveCD">从LiveCD中安装一个Portage快照和源代码</uri>（用于无网络安装或者GRP安装）
  </li>
  <li>
    <uri link="#compile_options">配置编译选项</uri>（所有其他的安装方法）
  </li>
</ul>

</body>
</subsection>
<subsection id="installing_from_LiveCD">
<title>从LiveCD中安装一个Portage快照和源代码</title>
<body>

<p>
在通用LiveCD里有一个Portage的快照。你读到这些，我们可以假设你正在使用这种LiveCD。要安装这个快照，可以看看<path>/mnt/cdrom/snapshots</path>里有什么快照：
</p>

<pre caption="查看文件夹/mnt/cdrom/snapshots的内容">
# <i>ls /mnt/cdrom/snapshots</i>
</pre>

<p>
现在按照下面的方法解开这个快照。再一次提起，确认你使用了正确的<c>tar</c>的命令参数。还有，参数<c>-C</c>是大写的<c>C</c>，而不是<c>c</c>。在下面这个例子中，我们使用<path>portage-20040413.tar.bz2</path>作为快照的名字。确认你已经换成你的快照的名字。
</p>

<pre caption="解开一个Portage快照">
# <i>tar -xvjf /mnt/cdrom/snapshots/portage-20040413.tar.bz2 -C /mnt/gentoo/usr</i>
</pre>

<p>
你还需要从CD里复制所有的源代码：
</p>

<pre caption="复制源代码">
# <i>mkdir /mnt/gentoo/usr/portage/distfiles</i>
# <i>cp /mnt/cdrom/distfiles/* /mnt/gentoo/usr/portage/distfiles/</i>
</pre>

<p>
现在你的Portage快照已经安装了，从<uri link="#compile_options">配置编译参数</uri>继续。
</p>

</body>
</subsection>
</section>

<section id="compile_options">
<title>配置编译参数</title>
<subsection>
<title>介绍</title>
<body>

<p>
你可以设定一些可以影响Portage行为的变量来优化Gento。这些变量都可以作为环境变量设置（使用<c>export</c>），但是不能保持不变。为保存你的设定，Portage给你提供了一个给Portage的配置文件<path>/etc/make.conf</path>。这就是我们现在要编辑的文件。
</p>

<note>
所有可以使用的变量的带注释的列表可以在<path>/mnt/gentoo/etc/make.conf.example</path>里找到。你只需要设定里面提到的这些变量，就可以成功完成Gentoo的安装。
</note>

<p>
打开你最喜欢的编辑器（这个指南中我们使用<c>nano</c>），这样我们可以替换我们将要讨论的优化变量。
</p>

<pre caption="打开/etc/make.conf">
# <i>nano -w /mnt/gentoo/etc/make.conf</i>
</pre>

<p>
你很可能已经注意到了，文件<path>make.conf.example</path>的结构就同平常文家一样：注释行都以"#"开头，其他行使用<c>VARIABLE="content"</c>语法定义变量。我们将要讨论一下其中的一些。
</p>

</body>
</subsection>
<subsection>
<title>CHOST</title>
<body>

<warn>
虽然这个对非stage1用户很吸引人，但是他们<e>不</e>不应该改变<path>make.conf</path>里的<c>CHOST</c>设定。做这个会让系统变得不可用。再一次提醒：只有你在使用一个<e>stage1</e>安装时才能改变这个变量。
</warn>

<p>
变量<c>CHOST</c>定义了<c>gcc</c>编译软件时要使用的架构。可能有如下这些：
</p>

<table>
<tr>
  <th>架构</th>
  <th>子架构</th>
  <th>CHOST设置</th>
</tr>
<tr>
  <ti>x86</ti>
  <ti>i386</ti>
  <ti>i386-pc-linux-gnu</ti>
</tr>
<tr>
  <ti>x86</ti>
  <ti>i486</ti>
  <ti>i486-pc-linux-gnu</ti>
</tr>
<tr>
  <ti>x86</ti>
  <ti>i586</ti>
  <ti>i586-pc-linux-gnu</ti>
</tr>
<tr>
  <ti>x86</ti>
  <ti>i686和上面所有的（包括athlon）</ti>
  <ti>i686-pc-linux-gnu</ti>
</tr>
<tr>
  <ti>alpha</ti>
  <ti></ti>
  <ti>alpha-unknown-linux-gnu</ti>
</tr>
<tr>
  <ti>ppc</ti>
  <ti></ti>
  <ti>powerpc-unknown-linux-gnu</ti>
</tr>
<tr>
  <ti>sparc</ti>
  <ti></ti>
  <ti>sparc-unknown-linux-gnu</ti>
</tr>
<tr>
  <ti>hppa</ti>
  <ti>(generic)</ti>
  <ti>hppa-unknown-linux-gnu</ti>
</tr>
<tr>
  <ti>hppa</ti>
  <ti>pa7000</ti>
  <ti>hppa1.1-unknown-linux-gnu</ti>
</tr>
<tr>
  <ti>hppa</ti>
  <ti>pa8000 and above</ti>
  <ti>hppa2.0-unknown-linux-gnu</ti>
</tr>
<tr>
  <ti>mips</ti>
  <ti></ti>
  <ti>mips-unknown-linux-gnu</ti>
</tr>
<tr>
  <ti>amd64</ti>
  <ti></ti>
  <ti>x86_64-pc-linux-gnu</ti>
</tr>
</table>

</body>
</subsection>
<subsection>
<title>CFLAGS和CXXFLAGS</title>
<body>

<p>
变量<c>CFLAGS</c>和<c>CXXFLAGS</c>分别定义了<c>gcc</c>的C编译器和C++编译器的优化参数。虽然我们在这里进行了一般性的定义这些变量，如果你在编译每个软件时分别优化这些参数，你将获得最大的性能。这里的原因就是每个程序都是不一样的。
</p>

<p>
在<path>make.conf</path>里，你应该定义你认为是可以使你系统<e>一般情况下</e>最能有反应的优化参数。不要在这个变量山放一些测试性的设置；太多的优化也可能导致程序不正常（失败，或者更糟，不起作用）。
</p>

<p>
我们不会解释所有的这些优化选项。如果你想知道所有的，阅读<uri link="http://gcc.gnu.org/onlinedocs/">GNU在线手册</uri>或者<c>gcc</c>info页面（<c>info gcc</c>只能在一个可以工作的Linux系统起作用）。文件<path>make.conf.example</path>里也包含了不少的例子和信息；不要忘了也阅读它。
</p>

<p>
第一个设置就是参数<c>-march=</c>，这个指定了目标架构的名字。文件<path>make.conf.example</path>描述了可能的选项（以注释出现）。比如，对于x86的Athlon Xp架构来说：
</p>

<pre caption="GCC的march设定">
<comment># AMD64用户不要使用athlon-xp</comment>
-march=athlon-xp
</pre>

<p>
第二个设置是参数<c>-O</c>（是大写O，不是零），这个指定了<c>gcc</c>的分类优化选项。可选的分类有<c>s</c>（用于优化大小）、<c>0</c>（零，不优化）、<c>1</c>、<c>2</c>或者<c>3</c>以获得更多的速度优化参数（每类都包含前面的相同参数，并加上一些额外的）。比如说，对于分类2优化选项来说：
</p>

<pre caption="GCC的O设定">
-O2
</pre>

<p>
其他的常用优化参数有<c>-pipe</c>（使用管道而不是临时文件来在不同stage的完成之间联系）和<c>-fomit-frame-pointer</c>（这个不会保存注册函数时不需要的frame指针）。
</p>

<p>
你定义<c>CFLAGS</c>和<c>CXXFLAGS</c>时，你应该是将不同的优化参数组合在一起，就同下面这个例子一样：
</p>

<pre caption="定义变量CFLAGS和CXXFLAGS">
CFLAGS="-march=athlon-xp -pipe -O2"   <comment># AMD64用户不应该使用athlon-xp</comment>
CXXFLAGS="${CFLAGS}"                  <comment># 给两个变量使用相同的设置</comment>
</pre>

</body>
</subsection>
<subsection>
<title>MAKEOPTS</title>
<body>

<p>
你可以通过使用<c>MAKEOPTS</c>来定义安装一个软件时可以允许发生的并行编译数。建议是你系统的CPU数加上1。
</p>

<pre caption="给一个通用单CPU系统的MAKEOPTS">
MAKEOPTS="-j2"
</pre>

</body>
</subsection>
<subsection>
<title>准备，设置，继续！</title>
<body>

<p>
根据你的医院更新<path>/mnt/gentoo/etc/make.conf</path>并保存。你现在可以从<uri link="?part=1&amp;chap=6">安装Gentoo基本系统</uri>继续。
</p>

</body>
</subsection>
</section>
</sections>
