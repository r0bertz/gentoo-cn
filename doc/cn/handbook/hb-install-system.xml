<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/1.0 -->

<!-- $Header: /var/www/www.gentoo.org/raw_cvs/gentoo/xml/htdocs/doc/en/handbook/hb-install-system.xml,v 1.39 2004/07/16 09:42:37 neysx Exp $ -->

<sections>
<section>
<title>Chrooting</title>
<subsection>
<title>可选：选择镜像</title>
<body>

<p>
如果你是从一个Gentoo LiveCD启动的，你可以使用<c>mirrorselect</c>来更新<path>/etc/make.conf</path>，使得下载Portage和源代码可以使用更快的镜像（当然是在你有一个可以工作的网络环境的条件下）：
</p>

<pre caption="选择快速的镜像点">
# <i>mirrorselect -a -s4 -o | grep -ve '^Netselect' &gt;&gt; /mnt/gentoo/etc/make.conf</i>
</pre>

<p>
如果因为某些原因，<c>mirrorselect</c>失败了，不要惊慌。这一步完全是供选择的，默认的值也已经够了。
</p>

</body>
</subsection>
<subsection>
<title>复制DNS信息</title>
<body>

<p>
在我们进入新的环境之前还有一件事清要做，那就是复制<path>/etc/resolv.conf</path>里的DNS信息。你需要做这一步以确保进入新的环境后网络仍然可以工作。<path>/etc/resolve.conf</path>里包含了你的网络所需的域名解析服务器。
</p>

<pre caption="复制DNS信息">
<comment>(参数"-L"是必须的，确保不是复制一个符号链接过去)</comment>
# <i>cp -L /etc/resolv.conf /mnt/gentoo/etc/resolv.conf</i>
</pre>

</body>
</subsection>
<subsection>
<title>进入新的环境</title>
<body>

<p>
现在，所有的分区已经初始化过了，基本的环境也已经安装了，该到使用<e>chrooting</e>进入我们新安装的环境里了。这意味着我们从当前的安装环境（LiveCD或者其他的安装介质）转移到你的安装系统（也就是初始后的分区）。
</p>

<p>
这个chrooting过程三步可以完成。首先，我们使用<c>chroot</c>将根目录从<path>/</path>（在安装介质上的）转移到<path>/mnt/gentoo</path>（你的分区上）。然后我们将使用<c>env-update</c>来创建一个新的环境，主要是创建环境变量。最后我们使用<c>source</c>将这些变量载入内存中。
</p>

<pre caption = "Chrooting到一个新的环境">
# <i>chroot /mnt/gentoo /bin/bash</i>
# <i>env-update</i>
 * Caching service dependencies...
# <i>source /etc/profile</i>
</pre>

<p>
恭喜！你现在已经进入你自己的Gentoo Linux环境里了。当然远未结束，这也是为什么安装过程还有一些章节:-)
</p>

</body>
</subsection>
<subsection>
<title>可选：更新Portage</title>
<body>

<p>
如果在上一节中，你还没有安装一个Portage的快照，你必须从因特网上下载一个最近的Portage树。<c>emerge sync</c>就是做这个的。其他的用户应该跳过这一节从<uri link="#configure_USE">配置USE变量</uri>继续。
</p>

<pre caption="更新Portage">
# <i>emerge sync</i>
</pre>

<p>
Portage使用RSYNC协议来更新Portage树。如果上述命令由于你的防火墙设置的原因失败了，使用<c>emerge-webrsync</c>来通过一个普通的HTTP协议下载和安装一个portage快照。
</p>

<pre caption="使用emerge-webrsync更新portage">
# <i>emerge-webrsync</i>
</pre>

<p>
如果你收到一个新版的portage发行和你应该更新你的Portage的警告，你应该忽略这个。在你安装过程的后面将会更新你的Portage。
</p>

</body>
</subsection>
<subsection id="configure_USE">
<title>配置USE变量</title>
<body>

<p>
<c>USE</c>是Gentoo提供给其用户的一个非常有用的变量。一些程序可以带上或者不带上对某些选项的支持来编译。比如说，有些程序可以带上gtk的支持来编译，或者带上qt的支持。其他的可以带上或者不带上SSL的支持。一些程序甚至可以带上frambuffer的支持（svgalib）而不是X11的支持（X-server）来编译。
</p>

<p>
大部分的发行版编译他们的软件时尽量的能带上更多的支持，这增加了程序的大小和启动时间，更不要提一大堆依赖性的问题。而在Gentoo中，你可以定义一个软件包编译时带上什么选项。这就是<c>USE</c>所做的。
</p>

<p>
在<c>USE</c>变量中，你定义了映射在编译选项的关键词。比如说，<e>ssl</e>将会在支持它的程序里编译时带上这个支持。<e>-X</e>将会去掉X-服务器的支持（注意前面的小提示）。<e>gnome gtk -kde -qt</e>将会在编译软件时带上gnome（和gtk）的支持，而不是kde（和qt）的支持，使得你的系统完全集中在GNOME上。
</p>

<p>
默认的<c>USE</c>设置放置在<path>/etc/make.profile/make.defaults</path>里。你在<path>/etc/make.conf</path>的修改将会覆盖默认的设置。如果你添加某参数到<c>USE</c>设置上，这个参数就会添加到默认的参数列表中。如果你从<c>USE</c>去掉某个参数（在这个参数前添加一个负号），这个参数就会从参数列表中去掉（如果这个参数在默认参数列表中）。<e>不要</e>改动<path>/etc/make.profile</path>文件夹里的任何东西；每次更新Portage的时候它都会被重新覆盖。
</p>

<p>
关于<c>USE</c>的一个完整的描述可以在Gentoo手册的第二部分<uri link="?part=2&amp;chap=1">第一段：USE参数</uri>中找到。你的系统中所存在的USE参数的完整描述可以在<path>/usr/portage/profiles/use.desc</path>找到。
</p>

<pre caption="查看已有的USE参数">
# <i>less /usr/portage/profiles/use.desc</i>
</pre>

<p>
作为一个例子，我们给你看看一个支持DVD、ALSA和CD刻录的基于KDE的系统的<c>USE</c>设置：
</p>

<pre caption="打开/etc/make.conf">
# <i>nano -w /etc/make.conf</i>
</pre>

<pre caption="USE设置">
USE="-gtk -gnome qt kde dvd alsa cdr"
</pre>

</body>
</subsection>
<subsection>
<title>可选：使用分布式编译</title>
<body>

<p>
如果你有兴趣使用一系列的系统来帮助你编译你的系统，你可以参看我们的<uri link="/doc/en/distcc.xml">DistCC指南</uri>。通过使用<c>distcc</c>你可以使用几个系统的处理能力来帮助你的安装。
</p>

</body>
</subsection>
</section>
<section>
<title>Stage1，Stage2和Stage3之间的不同之处</title>
<body>

<p>
现在我们坐下来看看前面的步骤。我们前面要求过你从<e>stage1</e>、<e>stage2</e>或<e>stage3</e>作一个选择，并且警告你这个选择对以后的安装步骤是很重要的。就是这样的，现在就是你的选择决定以后步骤的第一个地方。
</p>

<ul>
<li>
  如果你选择了<e>stage1</e>，那么你必须跟着这个章节（从<uri link="#doc_chap3">从Stage1进行到Stage2</uri>开始）里的两个步骤来做。
</li>
<li>
  如果你选择了<e>stage2</e>，你只可以跳过第一步，并从第二步（<uri link="#doc_chap4">从Stage2进行到Stage3</uri>）马上继续。
</li>
<li>
  如果你选择了<e>stage3</e>（不管是否使用GRP），那么你可以跳过这两个步骤，从<uri link="?part=1&amp;chap=7">配置你的内核</uri>继续。
</li>
</ul>

</body>
</section>
<section>
<title>从Stage1进行到Stage2</title>
<subsection>
<title>Bootstrapping的介绍</title>
<body>

<p>
好，你决定从源码编译任何东西？好的，那么:-)
</p>

<p>
在这一步，你将会<e>bootstrap</e>你的Gentoo系统。这个将会花很长的时间2，但是结果将会是得到一个根据你特定机器和特定需求而从根本优化过的系统。
</p>

<p>
<e>Bootstrapping</e>意思是编译GNU C库、GNU编译器和几个其他的关键系统程序。
</p>

<p>
在开始bootstrap之前，我们列出两个你可能需要或者不需要的可选选项。如果你不想看这些，从<uri link="#doc_chap3_sect4">Bootstrapping系统</uri>继续。
</p>

</body>
</subsection>
<subsection>
<title>可选：减少编译时间</title>
<body>

<p>
如果你要加快bootstrapping这个过程，你可以暂时的去掉java支持。这意味着GNU编译器和GNU C库编译时不带上对java的支持（这会大大减少编译的时间）。虽然这意味着你将不会有GNU Java编译器（<c>gcj</c>），这并<e>不</e>表明你的系统不同使用java程序和其他java相关的东西。
</p>

<p>
在开始bootstrap的脚本之前定义<e>USE="-java"</e>来暂时去掉对java的支持。
</p>

<pre caption = "去掉对java的支持">
# <i>export USE="-java"</i>
</pre>

<p>
千万记住在bootstapping后重新设定这个变量：
</p>

<pre caption="重新设定USE">
# <i>unset USE</i>
</pre>

</body>
</subsection>
<subsection>
<title>可选：先下载源代码包</title>
<body>

<p>
如果之前你没有将所有的源代码复制过来，那么boostrap的脚本将会下载所有必须的文件。如果你一直有网络链接，就不用谈论此事了:-) 但是如果你要先下载源代码，然后bootstrap你的系统（比如你不要让你的因特网链接在编译的时候一直开着），使用bootstrap脚本时带上<e>-f</e>选项，这个将会取得（也就是字母<e>f</e>）所有的源代码。
</p>

<pre caption = "现在必须的源代码">
# <i>cd /usr/portage</i>
# <i>scripts/bootstrap.sh -f</i>
</pre>

</body>
</subsection>
<subsection>
<title>Bootstrap你的系统</title>
<body>

<p>
好了，拿起你的键盘，输入下面几个命令来开始bootstrap。然后去找点别的事情玩玩，因为这个步骤将会花掉很长的时间才能完成。
</p>

<pre caption = "Bootstrap你的系统">
# <i>cd /usr/portage</i>
# <i>scripts/bootstrap.sh</i>
</pre>

<p>
如果你以前已经在<path>/etc/make.conf</path>里改动过<c>CHOST</c>设置，你必须重新初始化一些变量，使<c>gcc</c>可以运行更快点：
</p>

<pre caption="重新初始化环境变量">
# <i>source /etc/profile</i>
</pre>

<p>
现在可以继续下一个步骤<uri link="#doc_chap4">从Stage2进行到Stage3</uri>了。
</p>

</body>
</subsection>
</section>
<section>
<title>从Stage2进行到Stage3</title>
<subsection>
<title>介绍</title>
<body>

<p>
你读这个的时候，你已经有了一个bootstrap过的系统（不管你是因为在先前bootstrap过，还是使用<e>stage2</e>）。然后该到编译所有系统软件的时候了。
</p>

<p>
<e>所有的</e>系统软件？不是，不是这样的。在这步里，你将会编译没有其他选择的系统软件包。一些系统软件包有几个选择（如系统日志工具），而对于Gentoo来说，重视的就是选择，我们不会强求你什么的。
</p>

</body>
</subsection>
<subsection>
<title>可选：查看要做的工作</title>
<body>

<p>
如果你想知道将会安装什么软件，执行<c>emerge --pretend system</c>。这个会列出所有将会编译的软件。因为这个列表很长，你应该使用一个pager如<c>less</c>或者<c>more</c>，以方便可以前后查看这个列表。
</p>

<pre caption = "查看'emerge system'将会做什么">
# <i>emerge --pretend system | less</i>
</pre>

</body>
</subsection>
<subsection>
<title>可选：下载源代码</title>
<body>

<p>
如果你在继续之前想让<c>emerge</c>下载所有的源代码（比如你不想在编译所有软件时保持你的因特网连接一直开着），你可以使用<c>emerge</c>的<e>--fetchonly</e>选项，这个可以下载所有的源代码。
</p>

<pre caption = "获得源代码">
# <i>emerge --fetchonly system</i>
</pre>

</body>
</subsection>
<subsection>
<title>编译系统</title>
<body>

<p>
执行<c>emerge system</c>开始编译系统。然后去做点别的事情，因为这个步骤也需要花掉很长的时间来完成。
</p>

<pre caption = "编译系统">
# <i>emerge system</i>
</pre>

<p>
现在你可以安全的忽略有关更新配置文件的警告（运行<c>etc-update</c>）。你的Gentoo系统完全安装和启动后，一定要读读在<uri link="?part=2&amp;chap=4#doc_chap1">保护配置文件</uri>上的文档。
</p>

<p>
这个过程完成后，从<uri link="?part=1&amp;chap=7">配置内核</uri>继续。
</p>

</body>
</subsection>
</section>

</sections>
