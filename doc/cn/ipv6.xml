<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="/xsl/guide.xsl" ?>
<!-- $Header: /var/www/www.gentoo.org/raw_cvs/gentoo/xml/htdocs/doc/en/ipv6.xml,v 1.14 2004/05/20 20:46:27 cam Exp $ -->
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<guide link="/doc/zh_cn/ipv6.xml">

<title>Gentoo IPv6 路由指南</title>
<author title="Developer">
  <mail link="latexer@gentoo.org">Peter Johanson</mail>
</author>
<author title="Editor">
  <mail link="peesh@gentoo.org">Jorge Paulo</mail>
</author>
<author title="Editor, Reviewer">
  <mail link="swift@gentoo.org">Sven Vermeulen</mail>
</author>
<author title="Editor">
  <mail link="cam@gentoo.org">Camille Huot</mail>
</author>
<author title="Editor">
  <mail link="okun@hack.fi">Pasi Valminen</mail>
</author>
<author title="Translator">
  <mail link="kuyeboy@hotmail.com">Xuqing Kuang</mail>
</author>

<abstract>
本教程将指导您在 Gentoo 系统中配置 IPv6, 本文同时包含了隧道提供商们以及隧道
的配置方法，一些基本的 DNS 配置以及对客户端进行配置通过 IPv6 进行因特网连接。
</abstract>

<license/>

<version>1.1.1</version>
<date>2004年5月20日</date>

<chapter>
<title>准备工作</title>
<section>
<title>内核基本配置</title>
<body>

<p>
Gentoo 中任何版本的 2.4 或者 2.6 内核都能够非常轻易的配置好 IPv6 连接。从 2.4.22 
以及 2.6 Linux 内核里已经开始整合了新的 USAGI IPv6 栈。注意：如果你在你的 USE 
变量中配置了 <e>usagi</e>，那么在旧的内核里，<b>alpha-sources-2.4.21</b> 
和 <b>gentoo-sources-2.4.20</b> 中将会打上了 USAGI 补丁。
</p>

<pre caption="安装内核">
<comment>（2.6 内核）</comment>
# <i>emerge gentoo-dev-sources</i>
<comment>（或者 2.4 内核）</comment>
# <i>emerge gentoo-sources</i>
</pre>

<p>
下面我们开始进入内核源码目录并开始配置内核。
</p>

<pre caption="配置 Linux 内核">
# <i>cd /usr/src/linux</i>
# <i>make menuconfig</i>
</pre>

<note>
<path>/usr/src/linux</path> 是个符号链接，它指向了你将要编译的内核源码。
</note>

<note>
请确定你的内核配置中启用了 <path>Prompt for development and/or incomplete code/drivers</path> 
</note>

<pre caption="'make menuconfig' 选项">
Device Drivers ---&gt;
Networking support ---&gt;
Networking options ---&gt;
   &lt;*&gt; The IPv6 protocol (EXPERIMENTAL)
   
<comment>（IPv6 选项在其它应用程序中使用广泛，但不需要配置)</comment>

<comment>（下面的选项只在你需要通过 ptrtd 进行 6to4 转换时选中）</comment>
[*] Network device support
   &lt;*&gt; Universal TUN/TAP device driver support
</pre>

</body>
</section>

<section>
<title>测试 IPv6 支持</title>
<body>

<p>
启用了上述选项之后，重新编译你的内核，然后重新启动到具有 IPv6 支持的新内核中。
</p>

<p>
如果还没有安装 <b>iproute2</b>，我们希望你现在就安装好它。iproute2 是一个网络配置包，
包含了 <c>ip</c> ，以及众所周知的 <c>ifconfig</c>, <c>route</c>, <c>iptunnel</c>
等带有 IPv6 支持的新命令。
</p>

<pre caption="安装 iproute2">
# <i>emerge sys-apps/iproute2</i>
</pre>

<warn>
如果你使用了多个隧道设备，使用 ifconfig 将会让人非常头疼。你只有删除隧道，
这意味着最后被创建的必须第一个被删除。这是对你的警告！
</warn>

<p>
如果 IPv6 已经开始工作了，回环（loop）设备将会显示出一个 IPv6 地址。
</p>

<pre caption="检查回环设备">
# <i>ip -6 addr show lo</i>
1: lo: &lt;LOOPBACK,UP&gt; mtu 16436
    inet6 ::1/128 scope host 
       valid_lft forever preferred_lft forever
    <comment>（以上显示出了当前网络工作情况）</comment>
</pre>

<p>
想要进一步了解，请将 <e>ipv6</e> 添加到你 <path>make.conf</path> 中的 
USE 变量列表里，这样一来在以后 emrege 的软件中将自动添加 IPv6 支持。
</p>

</body>
</section>
</chapter>

<chapter>
<title>隧道配置</title>
<section>
<title>基本设置</title>
<body>

<p>
大多数网络提供商都尚未提供完全的 IPv6 连接。要越过这个限制，可以通过网络
上许多的“隧道提供商”提供的免费 IPv6 隧道。可以使你的 IPv6 连接穿行于 IPv4
网络上。
</p>

<table>
<tr><th>提供商</th><th>分布地区</th></tr>
<tr>
  <ti><uri link="http://tunnelbroker.net/">Hurricane Electric</uri></ti>
  <ti>美国/加拿大</ti>
</tr>
<tr>
  <ti><uri link="http://www.freenet6.net/">Freenet6</uri></ti>
  <ti>美国</ti>
</tr>
<tr>
  <ti><uri link="http://www.sixxs.net/">Sixxs</uri></ti>
  <ti>欧洲</ti>
</tr>
<tr>
  <ti><uri link="http://tunnel-broker.singnet.com.sg/">Singnet</uri></ti>
  <ti>新加坡</ti>
</tr>
<tr>
  <ti><uri link="http://broker.aarnet.net.au/">Aarnet</uri></ti>
  <ti>澳大利亚/南太平洋</ti>
</tr>
</table>

<p>
下面是南美非常流行的两个隧道提供商所提供隧道的配置方法，飓风电子
（Hurricane Electric － 适用于来自 sixxs.net 的静态隧道）以及 Freenet6。
</p>

</body>
</section>

<section>
<title>飓风电子</title>
<body>

<p>
飓风电子（以下简称为 HE）提供了免费的 IPv6 隧道并分配了一个 /64 位块的地址
。它同样支持 DNS 反向解析。要从 HE 得到一个免费隧道只需要在 
<uri>http://www.tunnelbroker.net/</uri> 填写一份表格即可。
</p>

<note>
注册过程中包含了类似于你的地址以及电话号码等私人信息。
</note>

<warn>
HE 提供的隧道 24 小时开放。这项服务如果收费将会招来不良影响。
</warn>

<p>
当你被分配了一个合法的 64 位地址后，你可以配置你的 Gentoo 系统。HE 提供了
一份基于 ifconfig 和 iproute 工具的范例配置。下面两个例子将指导您进行配置：
</p>

<table>
<tr><ti>本地 IPv4 地址 (eth0)</ti><ti>68.36.91.195</ti></tr>
<tr><ti>HE IPv4 地址</ti><ti>64.71.128.82</ti></tr>
<tr><ti>本地 IPv6 隧道地址</ti><ti>2001:470:1F00:FFFF::189</ti></tr>
<tr><ti>IPv6 块</ti><ti>2001:470:1F00:296::/64</ti></tr>
</table>

<p>
使用 iproute2 包以及 <c>ip</c> 命令，你只需按以下操作：
</p>

<pre caption="配置一个 IPv6 隧道">
<comment>（建立一个连通于本地（eth0）IPv4 到 HE 的远程 IPv4 地址）</comment>
# <i>ip tunnel add sixbone mode sit remote 65.71.128.82 local 68.36.91.195 ttl 64 dev eth0</i>
<comment>（从 MTU 中挤出隧道头）</comment>
# <i>ip link set sixbone mtu 1280</i>
<comment>（启动隧道）</comment>
# <i>ip link set sixbone up</i>
<comment>（连接 IPv6 地址到它）</comment>
# <i>ip addr add 2001:470:1F00:FFFF::189 dev sixbone</i>
<comment>（路由所有的全局非广播 IPv6 地址到我们的 'sixbone' 隧道设备上）</comment>
# <i>ip route add 2000::/3 dev sixbone</i>
</pre>

</body>
</section>

<section>
<title>Freenet6</title>
<body>

<p>
<uri link="http://www.freenet6.net/">Freenet6</uri> 是另一个免费隧道提供商。
注册只需要一个用户名和一个可用的电子邮件。
他们为客户机/服务器准备了一个称为 <c>tspc</c> 的隧道管理器。该客户端
软件在 Portage 中有。可以这样安装它：
</p>

<pre caption="安装 Freenet6 客户端">
# <i>emerge freenet6</i>
</pre>

<p>
现在你需要编辑你的 <path>/etc/freenet6/tspc.conf</path> 来配置你的 freenet6 。
你只需要编辑配置文件中的 <e>userid</e> 以及 <e>passwd</e> 对应你的 freenet6 帐号。
</p>

<pre caption="tspc.conf 范例">
tsp_version=1.0.1
tsp_dir=/etc/freenet6
auth_method=any
client_v4=auto
<i>userid=anonymous</i>
<i>passwd=foobar</i>
template=gentoo
server=tsps1.freenet6.net
retry_delay=0
if_tunnel=sit3
</pre>

</body>
</section>

<section>
<title>测试连接</title>
<body>

<p>
现在你的隧道已经配置完成了，你可以测试连接。最早的方法是通过 <c>ping6</c> 来
 ping 一个 IPv6 主机。
</p>

<pre caption="测试连接">
# <i>emerge iputils</i>
# <i>ping6 www.kame.net</i>
PING www.kame.net(orange.kame.net) 56 data bytes
64 bytes from orange.kame.net: icmp_seq=1 ttl=52 time=290 ms
64 bytes from orange.kame.net: icmp_seq=2 ttl=52 time=277 ms
64 bytes from orange.kame.net: icmp_seq=3 ttl=52 time=280 ms
64 bytes from orange.kame.net: icmp_seq=4 ttl=52 time=279 ms
64 bytes from orange.kame.net: icmp_seq=5 ttl=52 time=277 ms

--- www.kame.net ping statistics ---
5 packets transmitted, 5 received, 0% packet loss, time 4038ms
rtt min/avg/max/mdev = 277.040/281.041/290.046/4.699 ms
</pre>

<p>
下一步我们将为网络启动脚本里添加更好的 IPv6 支持。如果你希望知道当前的工作
进度或者需要帮助，欢迎来信给 
<mail link="latexer@gentoo.org">latexer@gentoo.org</mail>。

</p>

</body>
</section>

</chapter>
<chapter>

<title>应用程序中的 IPv6 支持</title>

<section>
<title>重新 emerge 包</title>
<body>

<p>
除非你已经加入 <e>USE="ipv6"</e> 到你的 <path>/etc/make.conf</path>，
否则你最好重新编译你的应用软件以使它们支持 IPv6。要获得你安装的哪些软件
中尚未使用 <e>ipv6</e> USE 变量的列表，可以运行下面内容：
</p>

<pre caption="判断是否需要重新 emerge">
# <i>emerge -epv world | grep ipv6 | sed "s:^.*\] ::; s:-[0-9]\+.*::" | cut -d' ' -f1</i>
</pre>

<p>
要重新 emerge 所需软件，只需简单运行：
</p>

<pre caption="重新 emerge 那些需要重新编译的软件">
# <i>emerge -epv world | grep ipv6 | sed "s:^.*\] ::; s:-[0-9]\+.*::" | \</i>
&gt; <i>cut -d' ' -f1 > packages</i>
</pre>

<p>
下一步，编辑 <path>packages</path> 文件并删除你不想立即重新编译的软件，然后运行：
</p>

<pre>
# <i>emerge `cat packages`</i>
</pre>

<note>
一些包能够自动检查 IPv6 支持因此不需要 ipv6 USE 标记。因此对于这些软件，如果你的
内核没有编译进 IPv6 支持，它们将不会支持 IPv6。
</note>

</body>
</section>

<section>
<title>特殊 IPv6 软件</title>
<body>

<p>
这里还有一些关于 IPv6 的特殊软件。它们大部分都位于
 <path>/usr/portage/net-misc</path>。
</p>

<table>
<tr><th>包</th><th>描述</th></tr>
<tr>
  <ti>net-misc/ipv6calc</ti>
  <ti>转换 IPv6 地址为缩略形式</ti>
</tr>
<tr>
  <ti>net-misc/nc6</ti>
  <ti>支持 IPv6 和 IPv4 的 netcat 版本</ti>
</tr>
<tr>
  <ti>dev-perl/Socket6</ti>
  <ti>
    定义了 IPv6 相关变量及结构的 C socket.h 
  </ti>
</tr>
</table>

</body>
</section>
</chapter>

<chapter>
<title>DNS 配置</title>
<section>
<title>IPv6 和 DNS</title>
<body>

<p>
IPv4 中的 DNS 使用了一个 A 记录，而 IPv6 中的 DNS 使用了 AAAA 记录。
（这是因为 IPv4 使用的是 32 位地址空间，而 IPv6 使用了 128 位的地址空间）。

为了进行反向解析，INT 标准不被推荐使用，但它依然被广泛支持着。ARPA 是最后的
标准。这里将对 ARPA 格式进行介绍。
</p>

</body>
</section>

<section>
<title>BIND 配置</title>
<body>

<p>
目前主流的 BIND 版本中都已经包含了非常完美的 IPv6 支持。

本段内容假设读者已经具有了 BIND 的基本配置知识。我们假设您并没有将 bind 运行于
chroot 环境中。如果你已经这么做了，只需要将 chroot 前缀加入下一节中涉及的大多
数路径前面即可。
</p>

<p>
首先你需要在 <path>/etc/bind/named.conf</path> 添加正向和反向的 DNS 域名解析。
</p>

<pre caption="named.conf entries">
<comment>(我们使 bind 去监听 IPv6 的地址。</comment>
<comment>使用 'any' 是在 bind-9.3 中达到这个目的的最好办法）</comment>
options {
    [...]
    listen-on-v6 { any; }
    [...]
};
<comment>（这将为 'ipv6-rules.com' 域提供正向解析：）</comment>
zone "ipv6-rules.com" IN {
    type master;
    file "pri/ipv6-rules.com";
};
<comment>（这种反向 DNS 解析被称为“bitwise”。它可以通过添加 IPv6 前缀完成，</comment>
<comment>将这些数字反向排列并且并且在每个数字之间插入一个点）</comment>
zone "6.9.2.0.0.0.f.1.0.7.4.0.1.0.0.2.ip6.arpa" {
        type master;
        file "pri/rev-ipv6-rules.com.arpa";
};
</pre>

<p>
现在我们开始创建那些域文件并将我们的主机信息添加进去：
</p>

<pre caption="pri/ipv6-rules.com">
$TTL    2h
@       IN      SOA     ipv6-rules.com. webmaster.ipv6-rules.com.  (
                                2003052501 ; 序列号
                                28800      ; 刷新时间
                                14400      ; 重试时间
                                3600000    ; 超时时间
                                86400 )    ; 最短时间
           NS      ns1.ipv6-rules.com

        IN      AAAA    2001:470:1f00:296::1 ; ipv6-rules.com 的地址
host1   IN      AAAA    2001:470:1f00:296::2 ; host1.ipv6-rules.com 的地址
host2   IN      AAAA    2001:470:1f00:296::3:3 ; for host2.ipv6-rules.com 的地址
</pre>

<pre caption="pri/rev-ipv6-rules.com.arpa">
$TTL 3d ; Default TTL (bind 8 需要它，而 bind 9 可以忽略它)
@       IN SOA ipv6-rules.com. webmaster.ipv6-rules.com. (
                        2003052501      ; 序列号 (YYYYMMdd)
                        24h             ; 刷新时间
                        30m             ; 重试时间
                        2d              ; 超时时间
                        3d )            ; 默认 TTL
        IN      NS     ns1.ipv6-rules.com.
; IPv6 PTR 信息
$ORIGIN 6.9.2.0.0.0.f.1.0.7.4.0.1.0.0.2.ip6.arpa.

1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0 IN      PTR     ipv6-rules.com.
2.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0 IN      PTR     host1.ipv6-rules.com.
3.0.0.0.3.0.0.0.0.0.0.0.0.0.0.0 IN      PTR     host2.ipv6-rules.com.
</pre>

</body>
</section>

<section>
<title>DJBDNS 配置</title>
<body>

<p>
目前在 <uri link="http://www.fefe.de/dns/">http://www.fefe.de/dns/</uri> 上
有许多 DJBDNS 的第三方补丁允许你进行 IPv6 解析。DJBDNS 及其补丁可以通过在
USE 变量中定义 <e>ipv6</e> 安装。
</p>

<warn>
目前不是所有的记录类型都被这些补丁支持。如，NS 和 MX 补丁就不被支持。
</warn>

<pre caption="安装 djbdns">
# <i>emerge djbdns</i>
</pre>

<p>
djbdns 安装完成之后，可以通过运行 <c>tinydns-setup</c> 来进行配置，配置过程
中需要你回答一些诸如绑定哪个地址，将 tinydns 安装到哪里类似的问题。
</p>

<pre caption="配置 tinydns">
# <i>tinydns-setup</i>
</pre>

<p>
假设我们将 <c>tinydns</c> 安装到 <path>/var/tinydns</path>，我们可以编辑
<path>/var/tinydns/root/data</path>。该文件包含了所有 tinydns 处理 IPv6 DNS 委托
的相关数据。
</p>

<pre caption="数据文件范例">
<codenote>*.ipv6-rules.com 将由 192.168.0.1 进行处理</codenote>
.ipv6-rules.com:192.168.0.1:a:259200
<codenote>为 2001:470:1f00:296::/64 做好反向 DNS 解析</codenote>
.6.9.2.0.0.0.f.1.0.7.4.0.1.0.0.2.ip6.arpa:192.168.0.1:a
<codenote>为 host1 和 host2 主机指定 IP 地址</codenote>
6host1.ipv6-rules.com:200104701f0002960000000000000001:86400
6host2.ipv6-rules.com:200104701f0002960000000000000002:86400
<codenote>指向 www 到 host1</codenote>
3www.ipv6-rules.com:200104701f0002960000000000000002:86400
</pre>

<p>
以 <c>6</c> 开头的行同时创建了一个 AAAA 和一个 PTR 记录。
而以<c>3</c>开头的行只创建了  AAAA 记录。编辑 <path>data</path>文件，
你可以使用 <c>add-host6</c> 和 <c>add-alias6</c> 脚本来添加新的内容。
对 <path>data</path> 修改完成后，你只需要在 <path>/var/tinydns/root</path>
中运行 <c>make</c> 命令。这会创建 <path>/var/tinydns/root/data.cfb</path>，
tinydns 将使用它的源信息作为 DNS 请求。
</p>

</body>
</section>
</chapter>

<chapter>
<title>IPv6 路由</title>
<section>
<title>配置路由</title>
<body>

<p>
如果我们希望将我们的系统做成路由器以使其它的客户机通过 IPv6 连接到外部网络
我们还需要对其进一步的配置。我们需要启用 IPv6 包转发。我们只需要一到俩步便
可以完成它。
</p>

<pre caption="启用包转发">
# <i>echo 1 > /proc/sys/net/ipv6/conf/all/forwarding</i>
或者
# <i>sysctl -w net.ipv6.conf.all.forwarding=1</i>
</pre>

<warn>
radvd 启动脚本开启（或者关闭）包转发，请仔细进行下面的操作。
</warn>

<p>
要在启动时便启动包转发，你需要编辑 <path>/etc/sysctl.conf</path> 并加入以下内容：
</p>

<pre caption="加入 sysctl.conf">
net.ipv6.conf.default.forwarding=1
</pre>

<p>
数据已经开始在机器与我们的提供商的隧道之间进行传送了。
</p>

<p>
将 IPv6 地址分配给客户机，IPv6 规范允许同时分配无界和有界 IP。
无界分配使通过一个成为路由器广播的进程实现，并且允许客户机
仅需要简单地启动网卡便可以获得一个 IP 地址以及一个默认路由。
它被成为”无界“使因为没有 IP 记录链接到这些 IP 地址并且这些
主机自身便链接到它们。有界地址分配使通过 DHCPv6 进行。它”有界“
是因为服务器需要保持这些客户机中谁请求了 IP 地址并得到他们的信息。
</p>

</body>
</section>

<section>
<title>无界（Stateless）配置</title>
<body>

<p>
无界配置可以通过路由广播服务(Router Advertisement Daemon)或者 radvd
很简单地完成。
</p>

<pre caption="配置 radvd">
# <i>emerge radvd</i>
</pre>

<p>
radvd emerge 完成之后，我们需要去创建 <path>/etc/radvd/radvd.conf</path> ，
其中包含了哪个 IP 段链接到从哪里来地 IP。这里有一个链接到了我们的隧道提供商
 <path>radvd.conf</path> 的范例文件。
</p>

<pre caption="radvd.conf 范例">
interface eth1
{
        <codenote>发送广播消息到其它主机</codenote>
        AdvSendAdvert on;
        <codenote>Fragmentation is bad(tm)</codenote>
        AdvLinkMTU 1280;
        MaxRtrAdvInterval 300;
        <codenote>IPv6 子网前缀我们想链接到 PoP</codenote>
        prefix 2001:470:1F00:296::/64
        {
                AdvOnLink on;
                AdvAutonomous on;
        };
};
</pre>

<warn>
请务必确认好第一行的网卡界面正确以保证你的广播路由发送到你的局域网而不是
你的网络提供商（ISP）！
</warn>

<p>
进一步的配置信息请参考  <c>man radvd.conf</c>。我们现在启动 radvd 并将其设置
为开机后自动启动。
</p>

<pre caption="启动 radvd">
# <i>/etc/init.d/radvd start</i>
# <i>rc-update add radvd default</i>
</pre>

</body>
</section>

<section>
<title>有界（Statusful）配置</title>
<body>

<p>
如果你希望使用有界地址分配，你需要安装并配置 dhcpv6。
</p>

<pre caption="安装 dhcpv6">
# <i>emerge dhcpv6</i>
</pre>

<p>
下面我们必须编辑 <path>/etc/dhcp6s.conf</path> 来配置 DHCPv6 服务。
</p>

<pre caption="dhcp6s.conf 范例">
prefer-life-time 10000;
valid-life-time 20000;
renew-time 5000;
rebind-time 8000;
interface eth1 {
    link AAA {
        allow unicast;
        send unicast;
        allow rapid-commit;
        send server-preference 5;
        renew-time 1000;
        rebind-time 2400;
        prefer-life-time 2000;
        valid-life-time 3000;
        pool{
            range 2001:470:1f00:296::10 to 2001:470:1f00:296::110/64;
            prefix 2001:470:1f00:296::/64;
        };
    };
};
</pre>

<p>
我们现在可以启用 dhcp6s，并将它配置为开机自启动。
</p>

<pre caption="启用 dhcp6s">
# <i>/etc/init.d/dhcp6s start</i>
# <i>rc-update add dhcp6s default</i>
</pre>

</body>
</section>
</chapter>

<chapter>
<title>IPv6 客户端</title>
<section>
<title>使用 radvd</title>
<body>

<p>
现在路由器后面的客户机应该已经可以通过 IPv6 连接上网了。如果使用 radvd，
只需要配置将网卡启动就可以了。（这应该已经完成在你的 net.ethX 启动脚本中了）。
</p>

<pre caption="通过 IPv6 进行连接">
# <i>ip link set eth0 up</i>
# <i>ip addr show eth0</i>
1: eth0: &lt;BROADCAST,MULTICAST,UP&gt; mtu 1400 qdisc pfifo_fast qlen 1000
    link/ether 00:01:03:2f:27:89 brd ff:ff:ff:ff:ff:ff
    inet6 2001:470:1f00:296:209:6bff:fe06:b7b4/128 scope global
       valid_lft forever preferred_lft forever
    inet6 fe80::209:6bff:fe06:b7b4/64 scope link
       valid_lft forever preferred_lft forever
    inet6 ff02::1/128 scope global
       valid_lft forever preferred_lft forever
</pre>

</body>
</section>

<section>
<title>使用 DHCPv6</title>
<body>

<p>
如果你的路由器被设置为使用 DHCPv6，你的客户机同样需要安装 dhcpv6 包。
完成之后，你需要编辑配置客户机的 <path>/etc/dhcp6c.conf</path>。
</p>

<pre caption="dhcp6c.conf 范例">
interface eth0 {
        send rapid-commit;
        request prefix-delegation;
        request domain-name-servers;
        request temp-address;
        iaid 11111;
        renew-time 11000;
        rebind-time 21000;
};
</pre>

</body>
</section>
</chapter>

<chapter>
<title>使用 6to4 转换</title>
<section>
<title>基本原理</title>
<body>

<p>
如果你希望通过你的 Ipv6 连接与 IPv4 主机对话时可以使用 6to4 转换。
因此你可以使用一个完全的 IPv6 网络，并通过一台主机与外部的 IPv4/IPv6
世界进行连接
</p>

</body>
</section>

<section>
<title>DNS 配置</title>
<body>

<p>
要使一个 6to4 转换工作，需要一个 DNS 代理，<c>totd</c>，需要将其配置成
对你发送 AAAA 记录而对网站只发送 A 记录。这些 AAAA 记录将指向实际的
 IPv6 地址。但这些将被 6to4 代理进行路由。
</p>

<p>
到目前为止 <c>totd</c> 仍然被 <c>~x86</c> 所禁用（masked）仅作为测试，
你可以将 unmask 它添加到你的 <path>/etc/portage/package.keywords</path> 以
解禁（unmask）它（具体内容可以查看“man portage”）。
</p>

<pre caption="将 package.keywords 中的 totd 解禁">
net-misc/totd ~x86
</pre>

<p>
简单地运行一下 emerge:
</p>

<pre caption="安装 totd">
# <i>emerge totd</i>
</pre>

<p>
下一步，我们需要配置 <path>/etc/totd.conf</path> 中的一些基本信息。
</p>

<pre caption="/etc/totd.conf 范例">
<comment>（指向一个域名服务器）</comment>
forwarder 192.168.0.2 port 53
<comment>（将 prefix 放到假 AAAA 记录的前面）</comment>
prefix 3ffe:abcd:1234:9876::
<comment>（指向 totd 的端口）</comment>
port 5005
<comment>（指向 pid 文件）</comment>
pidfile /var/run/totd.pid
<comment>（激活 6to4 转换）</comment>
stf
</pre>

<note>
<c>totd</c> 必须设置为 53 以外的端口如果本机上同时运行着一个域名服务器。
</note>

</body>
</section>

<section>
<title>6to4 代理</title>
<body>

<p>
<c>ptrtd</c> 被用于 6to4 代理，现在启用内部的 IPv6 主机到外部 IPv4 网络的连接。
</p>

<pre caption="安装 ptrtd">
# <i>emerge ptrtd</i>
</pre>

<p>
我们现在开始配置 <c>ptrtd</c>，告诉它使用哪个假前缀（我们需要配置它以使用
 <c>totd</c>）以创建代理进行连接。
编辑 <path>/etc/conf.d/ptrtd</path> 并且设置 <c>IPV6_PREFIX</c>。它应该
与 <c>totd</c> 配置为相同的前缀。
</p>

<pre caption="/etc/ptrtd.conf 范例">
IPV6_PREFIX="3ffe:abcd:1234:9876::"
</pre>

<p>
你现在可以启动 totd 了，并配置它开机时自动启动
</p>

<pre caption="启动 totd">
# <i>/etc/init.d/totd start</i>
# <i>rc-update add totd default</i>
</pre>

</body>
</section>

<section>
<title>客户端配置和测试</title>
<body>

<p>
我们的系统现在已经配置成可以通过 IPv6 网络同时连接 IPv4 和 IPv6 主机了。
假设客户机从 radvd 接受到一个 IP 地址，我们需要添加关于它的 DNS 解析内容
并为这些”假冒地址“添加一个默认路由。
首先，在 <path>/etc/resolv.conf</path> 起始处添加你运行着 <c>totd</c> 的主机。
</p>

<pre caption="/etc/resolv.conf 范例">
nameserver 2001:470:1f00:296::1 <comment>(The server running totd)</comment>
</pre>

<p>
为了测试域名解析的结果，需要一个  IPv4 站点的 AAAA 记录。
</p>

<pre caption="测试域名解析">
# <i>dig aaaa google.com</i>
;; ANSWER SECTION:
google.com.             300     IN      AAAA     3ffe:abcd:1234:9876::d8ef:3364
google.com.             300     IN      AAAA     3ffe:abcd:1234:9876::d8ef:3564
</pre>

<p>
我们现在添加一个面向所有地址的，带有我们所选择的假前缀的默认路由。
</p>

<pre caption="添加默认路由">
<comment>（假设你的 IPv6 网卡为 eth0）</comment>
# <i>ip route add 3ffe:abcd:1234:9876::/64 via 2001:470:1f00:296::1 dev eth0</i>
</pre>

<p>
最后，使用 <c>ping6</c> 来 ping google.com 后会得到一个伪装后的 IPv6 地址.
</p>

<pre caption="测试 6to4">
# <i>ping6 -c 2 google.com</i>
PING 3ffe:abcd:1234:9876::d8ef:3364(3ffe:abcd:1234:9876::d8ef:3364) 56 data bytes
64 bytes from 3ffe:abcd:1234:9876::d8ef:3364: icmp_seq=1 ttl=54 time=0.106 ms
64 bytes from 3ffe:abcd:1234:9876::d8ef:3364: icmp_seq=2 ttl=54 time=0.090 ms

--- 3ffe:abcd:1234:9876::d8ef:3364 ping statistics ---
2 packets transmitted, 2 received, 0% packet loss, time 1000ms
rtt min/avg/max/mdev = 0.090/0.098/0.106/0.008 ms
</pre>

<note>
该运行着 <c>ptrtd</c> 的路由器已经发送回了反馈，这已经告诉我们它开始工作了。
</note>

</body>
</section>
</chapter>

<chapter>
<title>其它资源</title>
<section>
<body>

<p>
网上还有很多很好的在线 IPv6 资源值得参考。
</p>

<table>
<tr><th>网站</th><th>资源</th></tr>
<tr>
  <ti><uri link="http://www.ipv6.org/">www.ipv6.org</uri></ti>
  <ti>标准 IPv6 信息</ti>
</tr>
<tr>
  <ti><uri link="http://www.linux-ipv6.org/">www.linux-ipv6.org/</uri></ti>
  <ti>USAGI 项目</ti>
</tr>
<tr>
  <ti><uri link="http://www.deepspace6.net/">www.deepspace6.net</uri></ti>
  <ti>Linux/IPv6 站点</ti>
</tr>
<tr>
  <ti><uri link="http://www.hs247.com/">www.hs247.com</uri></ti>
  <ti>IPv6 的一切内容</ti>
</tr>
<tr>
  <ti><uri link="http://www.ipv6-net.org/">www.ipv6-net.org</uri></ti>
  <ti>德国 IPv6 专题站</ti>
</tr>
<tr>
  <ti><uri link="http://www.kame.net/">www.kame.net</uri></ti>
  <ti>*BSD implementation</ti>
</tr>
</table>

<p>
在 IRC 上，你可以连接 <uri link="http://www.freenode.net/">Freenode</uri> 
上的 <c>#gentoo-ipv6</c> 或者 <c>#ipv6</c> 频道。
如果你已经启用 IPv6可以连接 <b>irc.ipv6.freenode.net</b>。
</p>

</body>
</section>
</chapter>
</guide>
