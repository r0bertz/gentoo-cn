<?xml version='1.0' encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="/xsl/guide.xsl" ?>
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">
<!-- $Header: /var/www/www.gentoo.org/raw_cvs/gentoo/xml/htdocs/doc/en/2.6-koutput-user.xml,v 1.5 2004/04/11 10:52:16 cam Exp $ -->

<guide link="/doc/en/2.6-koutput-user.xml">

<title>2.6系统内核以及"koutput"</title>
<author title="Developer">
  <mail link="latexer@gentoo.org">Peter Johanson</mail>
</author>
<author title="Editor">
  <mail link="antifa@gentoo.org">Ken Nowack</mail>
</author>
<author title="Editor">
  <mail link="bennyc@gentoo.org">Benny Chuang</mail>
</author>
<author title="Translator">
  <mail link="dragonnapalm@163.com">dragonnapalm</mail>
</author>

<abstract>
本指南介绍了如何使用Gentoo全新的 "koutput"方式来管理2.6版本系统内核以及内核模块。
</abstract>

<license/>

<version>1.1</version>
<date>March 26, 2004</date>

<chapter>
<title>概述</title>
<section>
<body>

<p>
相对于以前的版本，2.6系统内核提供了许多新特性用来增强或改善内核编译基础环境――也就是
"kbuild系统" 。这些新增的特性可以允许2.6内核的用户将所有内核编译过程中创建的文件输出到
任意的一个独立目录。相比以前的老版本，这种方式有如下的优点：
</p>

<ul>
  <li>
    所有的用户都可以使用相同的源代码来编译内核，并将编译好的内核文件输出到该用户所在的home目录中的任意位置。
  </li>
  <li>
    用户可以为多个目标体系结构编译不同的内核，并且这些体系结构所对应的编译好的文件不会丢失。
  </li>
  <li>
    在<path>/usr</path>已被加载为只读的情况下，用户仍然可以进行内核的编译或者重新配置等
    相关工作。
  </li>
  <li>
    外部模块可以在无需访问<path>/usr/src/linux</path>的情况下进行编译。
  </li>
</ul>

<p>
上面所叙述的最后一点非常重要，因为在对2.6源代码树进行外部模块编译的时候，portage需要有
对当前文件系统中某一个目录的临时访问权限。如果此时你<b>不</b>选择koutput的话，大多数
内核模块的编译将会由于这个限制而失败。要在emerge内核模块的过程中允许portage对<path>/usr/src/linux</path>
进行写操作，你可以使用config-kernel来实现：
</p>

<note>
并不是所有的config-kernel特性都会在本指南中讨论到，你可以通过<b>man config-kernel</b>
来查看其它的的相关信息。
</note>

<pre caption="允许对/usr/src/linux目录的写操作">
# <i>config-kernel --allow-writable yes</i>
</pre>

<p>
如果你想更改你的决定，你可以再次使用config-kernel来实现这个目标。
</p>

<pre caption="禁止对/usr/src/linux的写操作">
# <i>config-kernel --allow-writable no</i>
</pre>

</body>
</section>
</chapter>
<chapter>
<title>优点</title>
<section>
<body>

<p>
也许有时你会对自己说：“我不能忍受了！”的确，当你处理内核模块ebuild问题（比如nvidia-kernel 或者 hostap-driver）
的时候，有些事情是你无法避免的。这些ebuild在编译过程中需要使用内核编译系统并且需要更新
<path>/usr/src/linux</path>中的一些文件，但是，由于sandbox的妨碍，这项工作最终会失败。
</p>

<note>
在软件包的安装过程中，Gentoo的<b>sandbox</b>会阻止portage对当前文件系统的写操作，直到
emerge的最后一步。
</note>

<p>
你可以通过某些步骤来解决这个问题。简单地说，内核在编译时必须将所有的文件输出到一个不同的目录中，
然后外部内核模块的编译<b>也</b>需要做同样的工作，只不过这些输出文件会放在临时编译路径的某些
子目录下面。通过将模块编译文件输出到一个允许的目录中，那些不舒服的sandbox错误信息就可以避免。
</p>

</body>
</section>
</chapter>
<chapter>
<title>打开 koutput</title>
<section>
<body>

<p>
2.6内核会根据两个环境变量来决定文件的输出位置，即：<c>KBUILD_OUTPUT</c>和<c>O</c>。
<c>KBUILD_OUTPUT</c>应该根据当时的情况来进行设置。如果你对<c>O</c>变量赋值，你可以用<c>O</c>
来取代<c>KBUILD_OUTPUT</c>变量。例如：
</p>

<pre caption="手动设置输出">
# <i>cd /usr/src/linux></i>
# <i>export KBUILD_OUTPUT="/var/tmp/kernel-output/2.6.4"</i>
# <i>mkdir /var/tmp/kernel-output/2.6.4</i>
<comment>设置输出位置，同时确保该目录存在</comment>
# <i>make menuconfig</i>
<comment>编译好的.config文件将被放在 /var/tmp/kernel-output/2.6.4 下面</comment>
# <i>make O=/home/joe/kernels/2.6.4 menuconfig</i>
<comment>现在编译好的.config文件放在了 /home/joe/kernels/2.6.4 下面</comment>
</pre>

<p>
Gentoo的<b>config-kernel</b>工具可以帮助你自动完成这项工作某些部分。如果你的系统内核
是通过portage进行安装的，你可以使用使用config-kernel和一个语法后缀来自定义编译文件的
输出位置。
</p>

<pre caption="为config-kernel准备编译环境">
# <i>config-kernel --output-dir /home/joe/kernels</i>
</pre>

<p>
上面的命令将把所有编译好的文件输出到<path>/home/joe/kernels/KV</path>（<b>KV</b>
应该为内核版本）。如果你想把这些文件输出到Gentoo的默认存放路径<path>/var/tmp/kernel-output/</path>中，
请做以下的步骤：
</p>

<pre caption="为config-kernel准备编译环境">
# <i>config-kernel --output-dir default</i>
</pre>

<p>
对于那些已经安装了2.6系统内核的用户来说，他们可以通过config-kernel来使用这种全新的编译方式。
请注意，你的所有曾已经编译好的文件将被删除，因此你需要在这个过程中运行<c>make mrproper</c>
命令。
</p>

<pre caption="转换当前内核">
# <i>config-kernel --make-koutput /usr/src/linux-2.6.3</i>
</pre>

<p>
上面的命令会将<path>/usr/src/linux-2.6.3</path>下面的内核文件进行编译并输出到一个不同的目录中。
如果你事先已经通过<c>--output-dir /some/path</c>命令设置好了输出路径，那么这个命令后缀
将会起到它应有的作用。否则，Gentoo将使用它默认的<path>/var/tmp/kernel-output/KV</path>路径。
</p>

</body>
</section>
</chapter>
<chapter>
<title>改变和影响</title>
<section>
<body>

<p>
在你设置好了这个与原先不同的内核编译文件输出路径之后，当你进行内核的配置或安装时，你不会感到
系统中起了什么明显的变化，但是你应当注意系统中某些关键文件的位置的改变，其中最主要的两个
就是.config文件以及内核编译完成后生成的bzImage文件。下面的表格为你说明了这些关键文件的原始位置
和它们的新位置。我们假定系统使用的是2.6.4内核，输出路径为Gentoo默认的<path>/var/tmp/kernel-output/2.6.4</path>
目录。
</p>

<table>
<tr>
  <th>文件以前的位置</th>
  <th>文件新的位置</th>
</tr>
<tr>
  <ti>/usr/src/linux/.config</ti>
  <ti>/var/tmp/kernel-output/2.6.4/.config</ti>
</tr>
<tr>
  <ti>/usr/src/linux/arch/i386/boot/bzImage</ti>
  <ti>/var/tmp/kernel-output/2.6.4/arch/i386/boot/bzImage</ti>
</tr>
</table>

<p>
这个变化是很重要的，当你更新内核源代码需要将内核配置文件复制到恰当的位置的时候，或者
当你将新的bzImage文件复制到<path>/boot</path>中的时候，这个变化都会对这些工作产生一定的影响。
特别是当你复制.config文件时，请记住把它从原始内核的输出路径中复制到新内核的输出路径中。
我们通过下面的例子（把vanilla-sources-2.6.4更新到vanilla-sources-2.6.5）来说明如何通过
koutput来升级你的系统内核。
</p>

<note>
在这里我们假定输出后缀指向的是<path>/var/tmp/kernel-output</path>路径，同时假定
我们已经安装了内核源代码。
</note>

<pre caption="使用koutput更新内核">
# <i>cp /var/tmp/kernel-output/2.6.4/.config /var/tmp/kernel-output/2.6.5/</i>
<comment>将.config文件复制到新内核的输出路径中</comment>
# <i>config-kernel --set-symlink 2.6.5</i>
# <i>cd /usr/src/linux</i>
<comment>进入新的源代码树中</comment>
# <i>make oldconfig</i>
# <i>make &amp;&amp; make modules_install</i>
<comment>编译新的内核和内核模块</comment>
# <i>mount /boot</i>
# <i>cp /var/tmp/kernel-output/2.6.5/arch/i386/boot/bzImage /boot/</i>
# <i>umount /boot</i>
<comment>安装新的内核image文件</comment>
</pre>

<p>
使用文中的新方法进行编译工作并不意味着彻底的改变，你依旧可以像以前那样emerge任何你想要的
内核模块组件。在编写这篇文章的时候，某些内核模块正在向这种新的编译方式进行转变，某些则还在处于
测试过程中。如果稳定版本的内核模块编译失败，你可以尝试一下<b>~arch</b>版本：
</p>

<pre>
# <i>ACCEPT_KEYWORDS='~x86' emerge foo</i>
<comment>上面的命令用来安装foo软件包的测试版本</comment>
</pre>

<p>
如果仍然失败，请通过<uri
link="http://bugs.gentoo.org">http://bugs.gentoo.org</uri>向我们汇报Bug，我们会尽快更新
内核模块ebuild。
</p>

</body>
</section>
</chapter>
</guide>
