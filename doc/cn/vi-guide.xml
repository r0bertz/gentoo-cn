<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="/xsl/guide.xsl" ?>
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<guide link="/doc/en/vi-guide.xml">
<title>学习 vi —— “学习清单”式</title>
<author title="Author">
  <mail link="drobbins@gentoo.org">Daniel Robbins</mail>
</author>
<author title="Author">
  <mail link="stocke2@gentoo.org">Eric Stockbridge</mail>
</author>
<author title="Editor">
  <mail link="bennyc@gentoo.org">Benny Chuang</mail>
</author>
<author title="翻译">
  <mail link="wolf0403@yahoo.com.cn">完美废人</mail>
</author>

<abstract>
这篇指南会使用一个构建“知识清单”的方式，逐步加速教会你如何使用 vi。这是给新人准备的第一份 vi 指南。
</abstract>

<version>1.1.4</version>
<date>2004年05月18日</date>

<chapter>
<title>起点</title>
<section>
<title>介绍</title>
<body>

<p>这篇指南要向你介绍 vi ——一个强大的可视化编辑器——的使用方法。通过一种特殊的循序渐进的<e>知识清单</e>模式，这篇指南让你在短时间内迅速成为 vi 
高手。在这篇指南里面，你将学到如何浏览、编辑文字、使用“插入”模式、复制粘贴以及使用一些重要的 vi 插件（譬如：可视化插件）和多窗口编辑。
</p>

<p>如果你不知道，或者对 vi 感到不爽，那么赶快利用这篇指南，让这个 Linux/UNIX 平台最流行、最强大的可视化浏览器为你的工作加油提速吧！
</p>

</body>
</section>
<section>
<title>关于这篇指南</title>
<body>

<p>学习 vi 的最大难点在于——vi 的繁多的指令。为了有效利用 vi，你需要记住其中不少的一些。这可能需要不少时间；而偏偏这篇指南的目的之一就是在于利用尽可能少的时间。所以，从一开始，我们将面对一个挑战——怎么能让你在短期内记住大量的命令。
</p>

<p>
为了在这篇指南的过程中解决这个难题，我们会逐渐一点一点积累起一张关于 vi 的知识清单。这张清单会包含所有重要的 vi 命令。当你完成了这份指南，当你忘记某个 
vi 
命令的时候，你可以很轻松得从这份清单中查找特定的命令。逐渐地，随着你记住这些命令，你会越来越少依赖这份清单。通过使用“知识清单”技术，你可以前所未有的速度学会使用 
vi ！
</p>

</body>
</section>
<section>
<title>学习过程</title>
<body>

<p>在这份指南中，我会使用一些帮助你学习的办法。首先，如同你所期待的，我会介绍一条命令是如何工作的。然后，我会请你在 vi 
中练习使用这条命令，之后把这条命令记录在知识清单中，以备日后参考。一一执行这些步骤对于你快速学习 vi 有莫大的帮助。试验并且记录这些命令会帮助你记住它们。
</p>

</body>
</section>
<section>
<title>vim 简介</title>
<body>

<p>
Vi 有很多不同版本，而我要向你介绍的是一个叫做 <c>vim</c> 的版本。vim 非常流行；它有相当多的扩展模块使得 vi 更棒（当我展示一个 vim 
独有的命令的时候，我会特别指出）。如果你需要安装 vim，你可以从 <uri link="www.vim.org>www.vim.org"/> 下载它。除了一个增强版本的命令行 vi，vim 
还有一个叫做 <c>gvim</c> 的、漂亮的、基于 GTK+ 的 GUI 版本。下面是一张我系统中 gvim 的截图。
</p>

<figure link="http://www.ibiblio.org/web-gentoo/images/vishot.png"
short="screenshot" caption="VIM 屏幕截图"/>

<p>
如果你是一个 vim 新手，试着在你的系统上运行 gvim。从 GUI 使用可以让新手觉得轻松一点。
</p>

</body>
</section>
</chapter>

<chapter>
<title>第一步</title>
<section>
<title>打开一个文件</title>
<body>

<p>
在使用 vi 编辑文件之前，你需要知道如何使用 vi 浏览一个文件。vi 有很多移动命令，而我们会接触它们中的不少。在指南的这部分中，找一个无关紧要的文本文件，然后用 vi 打开它：
</p>

<pre caption="用 vi 打开文件">
$ <i>vi myfile.txt</i>
</pre>

<p>
如果你安装了 vim，输入 <c>vim myfile.txt</c>。如果你决定使用 gvim，输入 <c>gvim myfile.txt</c>。<path>myfile.txt</path> 是你系统中的一个文件名。
</p>

</body>
</section>
<section>
<title>在 vi 中</title>
<body>

<p>
启动 vi 之后，你应该看到文件的一部分显示在你的显示屏上。恭喜——你进入了 vi！不像其它很多编辑器，当 vi 启动的时候会进入一个特别的<e>命令模式</e>。
这意味着如果你键盘上的 <c>l</c>，vi 不会在当前光标位置输入一个 <c>l</c>，而会将光标向右移动一位。在命令模式，从键盘输入的字符会作为命令传递给 vi，而不是向文件中插入文字。移动命令是所有命令中最基本的一类，让我们来看一看。
</p>

</body>
</section>
</chapter>

<chapter>
<title>来回移动</title>
<section>
<title>在 vi 中移动，第一部分</title>
<body>

<p>
在命令模式中，你可以用 <c>h</c>、<c>j</c>、<c>k</c> 和
<c>l</c> 键将光标分别向左、下、上和右侧移动。如果你使用的是一个现代版本的 vi，你也可以用方向键达到相同的目的。<c>h</c>、<c>j</c>、<c>k</c>
和 <c>l</c> 键很有用：当你习惯了它们的时候，你可以不必将你的手从键盘基本键位移开就可以在文件中移动。试着使用 <c>h</c>,<c>j</c>,<c>k</c> 和
<c>l</c> 键（以及方向键）在文件中移动光标。试着用 <c>h</c> 移动到行首。
注意 vi 不允许你用 <c>h</c> 键从行首自动退回到上一行。相似的，你不能用 <c>l</c> 从行末自动转到下一行。
</p>

</body>
</section>
<section>
<title>在 vi 中移动，第二部分</title>
<body>

<p>
vi 为跳至行首、尾提供了特殊的快捷键。你可以按<c>0</c>（零）跳到行首，<c>$</c> 跳到行末。试试看。因为 vi 有这么多的移动命令，
我们可以把它作为一个好的“分页”程序（就像 more 或者 less 命令）。把 vi 作为一个分页程序也可以帮助你飞快地学习这些移动命令。
</p>

<p>
你也可以用 <c>&lt;CTR&gt;F</c> 和 <c>&lt;CTR&gt;B</c> 一次向前或者向后移动一整页。新的一些版本（譬如 vim）也支持用 <c>PGUP</c> 和 <c>PGDOWN</c> 键达到同样的目的。
</p>

</body>
</section>
<section>
<title>按单词移动，第一部分</title>
<body>

<p>
vi 也允许你按照单词长度来左右移动。要移动到下一个单词的<e>第一个</e>字母，按 <c>w</c> 键。到下一个单词的<e>最后一个</e>字母，按 <c>e</c> 键。移动到<e>前一个</e>单词的第一个字母，按 <c>b</c> 键。试试。
</p>

</body>
</section>
<section>
<title>按单词移动，第二部分</title>
<body>

<p>
试过这些移动命令之后，你可能注意到，vi 把 <c>foo-bar-oni</c> 之类的单词作为五个单独的单词！vi 默认以空格<e>或者</e>标点符号作为单词分界，
所以 <c>foo-bar-oni</c> 被分解成五个单词：<c>foo</c>、<c>-</c>、<c>bar</c>、<c>-</c> 和 <c>oni</c>.。
</p>

<p>
有的时候这是你所期望的，有时候不是。幸运的是，vi 能够理解“长单词”的概念。vi <e>仅仅以空格或换行</e>作为长单词的分界。这意味着虽然 <c>foo-bar-oni</c> 会被当作五个 vi 单词，它也可以作为一个长单词处理。
</p>

</body>
</section>
<section>
<title>按单词移动，第三部分</title>
<body>

<p>
你可以使用<e>大写</e>的单词移动命令在长单词之间跳跃移动。<c>W</c> 跳到下一个长单词的第一个字母，<c>E</c> 跳到最后一个字母，<c>B</c> 移动到前一个单词的第一个字母。试试看，和普通单词范围的移动进行比较，直到你明白它们的区别。
</p>

</body>
</section>
<section>
<title>更大范围的移动</title>
<body>

<p>
在我们把所学过的东西归纳到清单里面之前还有几个命令要看看。你可以用 <c>(</c> 和 <c>)</c> 移动到前后两句的开始。此外，用 <c>{</c> 或 <c>}</c> 可以跳到当前或者下一个段落的开头。试试它们。
</p>

</body>
</section>
</chapter>

<chapter>
<title>退出</title>
<section>
<body>

<p>
我们已经说了基本的移动命令，但是还有一些命令是你需要知道的。输入 <c>:q</c> 可以退出 vi。如果这样不能退出，可能是因为你修改过这个文件。要让 vi 退出而不保存修改，输入 <c>:q!</c>。这样你应该退出到了命令提示符。
</p>

<p>
在 vi 中，以 <c>:</c> 开头的命令被称为 <e>ex 模式</e> 的命令。这是因为 vi 内置了一个叫做 <e>ex</e> 的非可视化的编辑器。我们可以像使用 sed 一样地使用 ex 进行按行编辑文本。不仅如此，它也可以用来退出 vi，就像我们刚刚看见的。当你在命令模式按下 <c>Q</c> 键，就可以进入 ex 模式。这时，你会看见一个提示符 :；如果你按下回车键，整个屏幕会向上滚动。要回到熟悉的 vi 模式，只要输入 vi 然后回车就可以了。
</p>

</body>
</section>
</chapter>

<chapter>
<title>知识清单</title>
<section>
<title>清单的开头</title>
<body>

<p>
我们已经提到了很多命令；现在到了把它们加入清单的时候了。你可以用一张 A4 或者 US 信纸来制作这份清单，因为我们会在里面写很多内容！这是一份我的清单，里面包含了上面提到的所有命令。尽可能参考我的格式，这样我们可以把所有东西都集中在一张纸上。
</p>

<figure
link="http://www.ibiblio.org/web-gentoo/images/vicheat-first.png"
short="First part of the cheat sheet" caption="知识清单"/>

</body>
</section>
<section>
<title>繁复的 vi (Miscellaneous vi)</title>
<body>

<p>
让我们继续我们快速的命令行学习过程。在命令模式你可以用 <c>G</c> 跳至特定行。要跳到文件的第一行，输入 <c>1G</c>。注意 <c>G</c> 是大写字母。
</p>

<p>
如果你要搜索某个特定字符串模式在文件中的位置，输入 <c>/&lt;regexp&gt;</c> 然后<c>回车</c>。用你要搜索的模式替换 &lt;regexp&gt;。如果你不会使用正则表达式，不用烦恼——直接输入 <c>/foo</c> 会移动到下一个 <e>foo</e> 出现的地方。唯一需要注意的是，如果你需要寻找字面上的 <c>^</c>、<c>.</c>、<c>$</c> 或者 <c>\</c>，你需要在它们之前加上一个反斜线（<c>\</c>）。譬如，<c>/foo\.gif</c> 会寻找“foo.gif”的下一个出现位置。
</p>

<p>
要继续向下寻找，按 <c>n</c>。要继续向上寻找，输入 <c>N</c>。还是一样，用你自己的 vi 编辑器试验这些命令。你也可以用 <c>//</c> 来重复上一次的搜索。
</p>

</body>
</section>
</chapter>

<chapter>
<title>保存和编辑</title>
<section>
<title>“保存”和“另存为...”</title>
<body>

<p>
我们提到过，你可以用 <e>ex</e> 命令 <c>:q</c> 退出 vi。如果你要保存你做的改变，输入 <c>:w</c>。如果你要保存你的更改后的文本到另外一个文件，输入 <c>:w filename.txt</c> 会把文本保存为 <e>filename.txt</e>。如果你想保存后退出，输入 <c>:x</c> 或者 <c>:wq</c>。 
</p>

<p>
在 vim （以及其它一些高级的编辑器，例如 elvis）<c>:w</c>，你可以同时打开几个缓存。要在一个新窗口中打开文件，输入 <c>:sp filename.txt</c>。
<path>filename.txt</path> 会在一个分割开的新窗口中打开以供编辑。要在窗口之间切换，输入 <c>&lt;CTR&gt;w&lt;CTR&gt;w</c>（按两次 control-w）。<c>:q</c>、<c>:q!</c>、<c>:w</c> 和 <c>:x</c> 中的任一个都只作用于当前活动的窗口。 
</p>

</body>
</section>
<section>
<title>简单的编辑</title>
<body>

<p>
现在是我们学习一些简单编辑命令的时候了。我们将要提到的命令被称为<e>简单</e>是因为这些命令只需要你呆在命令模式。更复杂的编辑命令会让你自动进入插入模式——一个允许你从键盘输入文本的模式。我们会在一会儿提到这些内容。
</p>

<p>
现在，试着移过一些字符然后反复按 x 键。你会看见 <c>x</c> 会删除当前光标位置的字符。现在移动到你打开的文件的一个段落中间的某处然后点 <c>J</c>（大写）。你会发现 <c>J</c> 命令让 vi 把下一行接在这一行的结尾。现在，把光标移过一段文字然后点 <c>r</c>，再输入一个新的字母，你会看见原来的内容被替换了。最后，移动到文件的任一位置然后输入 <c>dd</c>。你会发现 <c>dd</c> 会删除当前一行文字。
</p>

</body>
</section>
<section>
<title>替换和删除</title>
<body>

<p>
你可以点 <c>.</c> 来重复任何一个编辑命令。如果你试试，你会看见 <c>dd...</c> 会删除四行文字，而 <c>J......</c> 会连接四行（译者注：搞不懂ing，哪位大侠解释一下为什么不是六行）。和往常一样，vi 提供了非常顺手的快捷方式。
</p>

<p>
要删除文本，你可以用 <c>d</c> 命令结合任何的移动命令。例如，<c>dw</c> 会删除从当前光标位置到下一个单词开始处的内容；<c>d)</c> 会删除到下一个句子结束的地方；<c>d}</c> 会删除这个段落的剩余内容。试着用 <c>d</c> 命令和其它编辑命令直到你熟悉了它们。
</p>

</body>
</section>
<section>
<title>撤销！</title>
<body>

<p>
我们正在试验删除命令，而这正是一个学习撤销改变的好时候。按 <c>u</c> 键，传统的 vi 会仅仅允许你撤销最后一次操作。然而，新版本的 vi 譬如 vim 允许你用重复的 <c>u</c> 命令撤销你对文件作出的更改。把 <c>d</c> 和 <c>u</c> 命令一起试试。
</p>

</body>
</section>
<section>
<title>升级你的知识清单</title>
<body>

<p>
到了更新你的知识清单的时候了！添加上我们刚刚说过的那些命令，你的知识清单应该看起来是这个样子：
</p>

<figure
link="http://www.ibiblio.org/web-gentoo/images/vicheat-edit.png"
short="Cheat sheet" caption="加入了编辑命令的知识清单"/>

</body>
</section>
</chapter>

<chapter>
<title>插入模式</title>
<section>
<body>

<p>
到目前为止，我们知道了如何在 vi 中移动光标，进行读写文件，还有一些基本的编辑操作。但是，我还没有向你们展示如何输入自由格式文本！这是我故意的，因为 vi 的插入模式在开始的时候会显得有些复杂。不过，一旦你熟悉了插入模式，它的复杂度（以及可用性）会成为非常有用的东西。
</p>

<p>
在 vi 的<e>插入模式</e>，你将可以直接将文字输入到屏幕，就像其它很多可视化编辑器一样。当你完成了你输入的内容，可以用 Esc 键退回到<e>命令模式</e>。<c>i</c> 或 <c>a</c> 可以让你进入插入模式。如果按 <c>i</c>，你的文本会<e>插入</e>在当前字符之前；而 <c>a</c> 会让你的文本<e>追加</e>在当前字符之后。记住，完成输入之后，用 <c>&lt;ESC&gt;</c> 键回到命令模式。
</p>

</body>
</section>
<section>
<title>插入模式的优点</title>
<body>

<p>
去试试 <c>a</c> 和 <c>i</c> 命令。按其中任意一个，输入一些文字，然后按退出键回到命令模式。按 <c>a</c> 或 <c>i</c> 之后试着按<c>&lt;回车&gt;</c>看看会发生什么。试着用方向键和 <c>&lt;DEL&gt;</c> 键感觉一下插入模式怎么工作。利用方向键和 <c>&lt;DEL&gt;</c> 键，你可以不必退出到命令模式而完成相当多的编辑工作。
</p>

</body>
</section>
<section>
<title>插入选项</title>
<body>

<p>
这里有其它一些方便的进入插入模式的方法。按 <c>A</c>（大写）从当前一行的末尾开始插入内容而不管你当前的位置。相似的，<c>I</c>（大写）让你在当前行的开始插入。按 <c>o</c> 会在当前一行的下方新建一个空行以供插入，而 <c>O</c> 会在上方建立新行。要用新的空白行替代当前整行文字，输入 <c>cc</c>。要替代从当前位置到当前行的结束，输入 <c>c$</c>。要替换从当前位置到行的开始，输入 <c>c0</c>。
</p>

<p>
除了上述提到的功能，上面的所有命令都会让你进入 vi 的插入模式。输入完成之后，按 <c>&lt;ESC&gt;</c> 键回到命令模式。
</p>

</body>
</section>
<section>
<title>改变文本</title>
<body>

<p>
我们在前面尝试过 <c>c</c> 修改命令，例如 <c>cc</c>、<c>c0</c> 和 <c>c$</c>。<c>cc</c> 是修改命令的一个特殊形式，类似 <c>dd</c>。<c>c0</c> 和 <c>c$</c> 命令是组合使用修改命令和移动命令的示例。从这个角度来看，<c>c</c> 和 <c>d</c> 的工作方式相似，除了一点：它让你停留在插入模式。这样，你可以输入用来替代删除部分的文本。试着把一些移动命令和 <c>c</c> 结合起来在你的文件中试试看（例如：<c>cW</c>、<c>ce</c>、<c>c(</c> ）。
</p>

</body>
</section>
</chapter>

<chapter>
<title>复合命令</title>
<section>
<body>

<p>
当你开始使用复合（“combo”）命令（像是 <c>d{</c> 和 <c>cw</c> 之类）的时候，vi 才<e>真正</e>显示它的强大。不仅是这些命令，我们还可以用一个数字与移动命令组合，例如 <c>3w</c> 会让 vi 向右侧跳过三个单词。类似的还有 <c>12b</c>、<c>4j</c> 等，都是数字和移动命令形成的组合命令。
</p>

<p>
vi，除了支持（数字）（移动命令）组合之外，还允许 <c>d</c> 和 <c>c</c> 与一个数字或者移动命令组合。<c>d3w</c> 会删除下面三个单词，<c>d2j</c> 会删除当前和下面两行，等等。试试这些 <c>c</c> 和 <c>d</c> 的组合命令，看看 vi 能让你的文本编辑变得如何简单轻松。当这些命令变得顺手的时候，你将可以以一种难以置信的速度编辑文件。
</p>

</body>
</section>
<section>
<title>更新知识清单</title>
<body>

<p>
又到了更新知识清单的时间。它现在差不多看起来应该是这个样子：
</p>

<figure
link="http://www.ibiblio.org/web-gentoo/images/vicheat-compound.png"
short="Cheat Sheet" caption="加入了复合命令的知识清单"/>

</body>
</section>
<section>
<title>提高生产力的特色</title>
<body>

<p>
到目前为止，我们已经学会了移动光标、保存和退出、进行简单的编辑和删除操作，以及使用插入模式。利用知识清单上面的内容，你几乎可以用 vi 完成所有的任务。
</p>

<p>
不过，vi 还有许多更强大的命令。在这个章节中，你将学会如何<e>剪切</e>、<e>复制</e>和<e>粘贴</e>，<e>搜索</e>和<e>替换</e>，以及使用<e>自动缩进</e>等特点。这些命令让 vi 变得更有趣而有用。
</p>

</body>
</section>
<section>
<title>可视化模式</title>
<body>

<p>
使用剪贴的最方便的办法是使用<e>可视化模式</e>，一个加入现代版本 vi（譬如 vim 和 elvis）的特殊模式。你可以把可视化模式想象成“高亮文本”模式。当文本被反白，我们可以复制或者删除它，然后粘贴。如果你在使用 gvim，你可以轻松地按住鼠标左键拖动来达到反白一段文字的效果：
</p>

<figure
link="http://www.ibiblio.org/web-gentoo/images/vihighlight.png"
short="Highlighted text" caption="VIM 和反白的文本"/>

<p>
除此之外，你也可以通过按 <c>v</c> （如果你通过控制台调用 vi，这可能是你唯一的选择）。然后，用移动命令（尤其是方向键）控制光标，你可以反白一段文字。反白之后，我们就可以复制或者剪切这段文字了。
</p>

<p>
如果要复制这段文字，按 <c>y</c>（表示“yank”，猛拉）。要剪切，点 <c>d</c>。你会就此回到命令模式。现在，移动到你想要粘贴刚刚复制/剪切的内容的地方，然后按 <c>P</c> 在光标后插入内容，或者 <c>p</c> 将内容插入在光标之前。瞧，剪贴复制，就是这么轻松！在进入下面一小节内容之前，多试试剪切复制粘贴操作。
</p>

</body>
</section>
<section>
<title>替换文本</title>
<body>

<p>
我们用 <e>ex</e> 模式进行文本替换。如果你要替换当前行出现的第一个匹配模式，输入 <c>:s/&lt;regexp&gt;/&lt;replacement&gt;/</c> 然后按回车。
这里 &lt;regexp&gt; 是你要匹配的模式，而 &lt;replacement&gt; 是你用来替换的字符串。要替换当前行的所有匹配处，输入 <c>:s/&lt;regexp&gt;/&lt;replacement&gt;/g</c> 
然后回车。要替换文件中所有匹配位置（这通常是你需要的），输入 <c>:%s/&lt;regexp&gt;/&lt;replacement&gt;/g</c>。如果你希望在全局替换过程中，
vi 在每次替换之前进行提示，输入 <c>:%s/&lt;regexp&gt;/&lt;replacement&gt;/gc</c> （c 表示 confirm 确认）然后回车。
</p>

</body>
</section>
<section>
<title>缩排</title>
<body>

<p>
vi 支持自动缩排；当你编辑程序源码的时候可能需要这个功能。多数现代版本的 vi（例如 vim）会在你打开一个源码文件（例如 .c 文件）
自动启用自动缩排功能。当自动缩排启动之后，你可以用 <c>&lt;CTR&gt;d</c>（control-d）向左移动一个缩排级别，或者 <c>&lt;CTR&gt;t</c>
（control-t）向右移动一个缩排级别。如果自动缩排模式没有自动启用，你可以用 <e>ex</e> 模式命令 <c>:set</c> autoindent 来启动它。
你还可以用 <c>:set tabstop</c> 命令告诉 vi 你习惯的 tab 宽度；<c>:set tabstop=4</c> 是一个相当流行的设置。
</p>

</body>
</section>
<section>
<title>我们的最终版知识清单</title>
<body>

<p>
Well，我们完成了我们的 vi 指南！加入了所有的高级编辑功能之后，这份清单应该看着像这个样子：
</p>

<figure
link="http://www.ibiblio.org/web-gentoo/images/vicheat-final.png"
short="Cheat Sheet" caption="最终版知识清单"/>

<p>
把这份清单放在手边，然后开始用 vi 编辑文档、写 email。当你需要的时候参考这份清单；你会发现在这一周之内，你会记住几乎所有这些命令，而 vi 给你带来的快感会让你翱翔天际！
</p>

<p>
如果你像把 vi 作为你的默认编辑器，修改你的 <path>/etc/rc.conf</path>
</p>

<pre caption="设置 vi 成默认编辑器">
<comment>（设置 EDITOR 为你选择的编辑器。）</comment>
#EDITOR="/bin/nano"
EDITOR="/usr/bin/vim"
#EDITOR="/usr/bin/emacs"
</pre>

</body>
</section>
<section>
<title>参考资料</title>
<body>

<p>
这里有一些你可能认为有助于继续学习 vi 的资料：
</p>

<ul>
  <li>
    <uri link="http://www.thomer.com/thomer/vi/vi.html">vi 主页</uri>，关于 vi 的一切的好地方
  </li>
  <li>
    <uri link="http://www.vim.org/">vim 主页</uri>是你寻找 vim 相关信息的地方
  </li>
  <li>
    如果你在找一本好的过时的书，<uri
    link="http://www.oreilly.com/catalog/vi6/">《Learning the vi Editor, 6th Edition》</uri>会是一个不错的选择，覆盖了不少 vi 和 vi 克隆的信息。
  </li>
</ul>

</body>
</section>
<section>
<title>关于这份文档</title>
<body>

<p>
这份文档的最初版本作为 Westtech Information Services 的所有，最初发表在 IBM developerWorks。这一份是更新过的文档，包含了很多 Gentoo Linux 文档团队的改进。
</p>

</body>
</section>
</chapter>
</guide>
