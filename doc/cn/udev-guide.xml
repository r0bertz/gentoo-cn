<?xml version='1.0' encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="/xsl/guide.xsl" ?>
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<!-- $Header: /var/www/www.gentoo.org/raw_cvs/gentoo/xml/htdocs/doc/tw/udev-guide.xml,v 1.1 2004/07/17 08:58:52 bennyc Exp $ -->

<guide link="/doc/zh_cn/udev-guide.xml">
<title>Gentoo udev 指南</title>

<author title="Author">
  <mail link="swift@gentoo.org">Sven Vermeulen</mail>
</author>
<author title="Contributor">
  <mail link="g.guidi@sns.it">Gregorio Guidi</mail>
</author>
<author title="Translator">
  <mail link="ccpz@gentoo.org.tw">ccpz</mail>
</author>
<author title="Reviewer">
  <mail link="bennyc@gentoo.org">Benny Chuang</mail>
</author>

<!-- rev 1.13 by ccpz -->

<abstract>
这份文件说明什么是 udev 还有您如何使用 udev 来达成您的需求。
</abstract>

<license/>

<version>0.9</version>
<date>2004年5月27日</date>

<chapter>
<title>什么是 udev?</title>
<section>
<title>/dev 目录</title>
<body>

<p>
当 Linux 使用者谈到他们系统上的硬体时，对周围那些认为 Linux 是一种病毒或是一种
咖啡的牌子的人，'斜线 dev 斜线 某个东西'的用法他们一定会投给您一个奇怪的眼光。
但是对於那些幸运的使用者(包括您)，使用 <path>/dev/hda1</path> 就是一种快速的表
达方法，而不用说第一个 IDE 插槽上主硬碟的第一个分割区，不是吗？
</p>

<p>
我们都知道什么是装置档。一些人更了解为什么我们在 <path>/dev</path> 中输入 
<c>ls -l</c> 仔细查看时那些装置档会有特别的数字。但是我们一直认为 
<path>/dev/hda</path> 代表第一个 IDE 插槽上主硬碟是理所当然的。您或许并不知道，
但这只是设计上一个瑕疵。
</p>

<p>
考虑一下可热插拔的装置，例如说 USB，IEEE1394，可抽换的 PCI，...什么是第一个装置
？他会维持多久？当第一个装置消失后其他的装置要如何命名？这会不会影响进行中的传
输工作？如果说因为您妈妈决定插上 inkjet 使它变成第一台印表机，而让您的列印工作
从爆新的雷射印表机变成快坏的矩阵印表机在列印，这会很有趣吗？
</p>

<p>
进入 <e>udev</e>。udev 计画的目标有趣而且迫切需要：
</p>

<ul>
  <li>在 userspace 中执行</li>
  <li>动态建立/移除装置档</li>
  <li>提供固定的名称</li>
  <li>提供 user-space API</li>
</ul>

<p>
为了提供这些功能，udev 以三个分割的子计画发展：
<e>namedev</e>，<e>libsysfs</e>，还有不用说就是<e>udev</e>。
</p>

</body>
</section>
<section>
<title>namedev</title>
<body>

<p>
Namedev 允许您从 udev 之外自行定义装置的名称。这让您输入多个段落来设定有弹性的
命名规则以及方案。这个装置命名子系统提供 udev 可以使用的标准介面。
</p>

<p>
目前 namedev 只有提供一个命名方案，由 LANANA 提供。目前这被大部分的 Linux 系统
使用，因此适合大多数的 Linux 使用者。
</p>

<p>
Namedev 使用下面五个步骤来决定指定装置的名称。如果债这些步骤的其中一个找到了这
个装置的名称，就会使用它。这五个步骤是：
are:
</p>

<ul>
  <li>标签或序号</li>
  <li>汇流排装置编号</li>
  <li>汇流排拓朴</li>
  <li>静态指定名称</li>
  <li>核心提供的名称</li>
</ul>

<p>
<e>标签或序号</e> 这一步检查装置是否有唯一的识别记号。例如说 USB 装置有唯一的 
USB 序号。SCSI 有唯一的 UUID。如果 namedev 找到与这种唯一编号相对应的设定档，他
将或使用设定档提供的名称。
</p>

<p>
<e>汇流排装置编号</e> 这一步会检查汇流排装置编号，对於不可热抽换的环境，这一步
足以辨识装置。例如说 PCI 汇流排编号在系统的使用期限内很少变更。同样的，如果 
namedev 找到相对应的设定档，设定档中的名称就会被使用。
</p>

<p>
类似的，<e>汇流排拓朴</e> 相对来说也是够稳定而可以辨识设备，只要使用者不抽换设
备。当装置的位置满足使用者提供的设定，就会使用指定的名称。
</p>

<p>
第四个步骤，<e>静态指定名称</e>，是一个简单的字串取代。当核心提供的名称(预设名
称)符合指定的取代字串，就会使用取代后的名称。
</p>

<p>
最后一步(<e>核心提供的名称</e>)一定会找到符合的：由核心提供的预设名称。在大部份
的情况下这足以在目前的 Linux 系统中找到对应的名称。
</p>

</body>
</section>
<section>
<title>libsysfs</title>
<body>

<p>
udev 使用虚拟的 sysfs 档案系统和核心沟通。libsysfs 计画提供通用的 API 以一般方
式取得 sysfs 提供的资讯。这让查询任何硬体时不用先知道他们是哪种硬体。
</p>

</body>
</section>
<section>
<title>udev</title>
<body>

<p>
每当核心注意到硬体结构有更新时，他会呼叫 <path>/sbin/hotplug</path> 这个程式。
Hotplug 会执行连结到 <path>/etc/hotplug.d/default</path> 目录下的程式。在哪里面
您也会找到 udev 程式的连结。Hotplug 送出核心提供的资讯给 udev 程式，以便执行必
要的动作修改 <path>/dev</path> 结构(建立或删除装置档)。
</p>

</body>
</section>
</chapter>

<chapter>
<title>在 Gentoo 使用 udev</title>
<section>
<title>需求</title>
<body>

<p>
udev 需要与 2.6 核心共同使用(例如 <c>development-sources</c> 或 
<c>gentoo-dev-sources</c>)。如果您已经用这类核心，您只要确定您的 
<c>sys-apps/baselayout</c> 是最新的。这就是所有您需要的。
</p>

<pre caption="安装 udev">
# <i>emerge udev</i>
</pre>

<p>
udev 会安装 <c>hotplug-base</c>，因为这是他的相依套件其中之一。如果您想要用 
hotplug 当您插入 USB 或 IEEE1394 装置时执行特定的工作，您也要安装完整的 hotplug
 指令搞。
</p>

<pre caption="自由选择:安装 hotplug">
# <i>emerge hotplug</i>
</pre>

<p>
在核心的设定方面，如果您使用 <c>genkernel</c> 的预设设定，那相关设定都设定好了
。否则确定您有启动下列选项：
</p>

<pre caption="需要的核心设定">
General setup ---&gt;
  [*] Support for hot-pluggable devices

File systems ---&gt;
  Pseudo filesystems ---&gt;
    [*] /proc file system support
    [*] Virtual memory file system support (former shm fs)
</pre>

<p>
如果您想的话，也可以启动 <c>/dev file system support (OBSOLETE)</c>。
</p>

</body>
</section>
<section>
<title>设定</title>
<body>

<p>
如果您像要在 Gentoo 使用调整过的 udev 让您的生活更加快乐，那您读到这就可以了。
您已经把该设定的都设好了。 Gentoo init scripts 不会执行 devfsd 服务，而且当您开
机时会关闭 devfs。
</p>

<p>
但如果您是顽固的家伙，想要执行只使用 udev，未经调整过的系统，就如同 udev 发展过
程中所做的事(包括一些困难，像是因为 udev 不支援而遗失的装置)，那就读下去吧 :)
</p>

<warn>
如果有什么地方出错的话<e>不要</e>抱怨。您将会移除许多 Gentoo 开发员的努力工作修
改 init scripts，让 udev 和 Gentoo 完美配合。
</warn>

<p>
我们会停止装置档节点的储存规则：编辑 <path>/etc/conf.d/rc</path> 中的 
<c>RC_DEVICE_TARBALL</c> 变数，把他设成 <c>no</c>：
<c>no</c>:
</p>

<pre caption="/etc/conf.d/rc">
RC_DEVICE_TARBALL="no"
</pre>

<p>
如果您的核心包含 devfs 支援，您可以在开机管理员选单设定中停止他：在核心参数中加
入 <c>devfs=nomount</c>。如果您想要用 devfs 并且停止 udev，在核心参数中加入 
<c>gentoo=noudev</c>。
</p>

</body>
</section>
</chapter>

<chapter>
<title>已知问题</title>
<section>
<title>开机时遗失装置节点档</title>
<body>

<p>
如果您因为一个找不到 <path>/dev/null</path> 的错误而不能开机，或者是遗失 
initial console，这是因为您缺少一些需要在 udev 挂载及处理 <path>/dev</path> 
<e>之前</e>就要存在的档案。在使用旧的媒体安装的 Gentoo 机器上很常见。
</p>

<p>
如果您是用 <c>sys-apps/baselayout-1.8.12</c> 或之后的版本，因为开机程序会继续完
成开机，所以这讯息不那么严重了。然而，如果想要移除这个恼人的警告讯息，您应该依
以下的方法来建立遗失的装置节点。
</p>

<p>
要查看哪些装置在 <path>/dev</path> 挂载前就存在了，执行底下的指令：
</p>

<pre caption="列出开机时存在的装置节点">
# <i>mkdir test</i>
# <i>mount --bind / test</i>
# <i>cd test/dev</i>
# <i>ls</i>
</pre>

<p>
要成功开机所需要的装置是 <path>/dev/null</path> 和 <path>/dev/console</path>，
如果他们没有在前面的测试中显示，您需要手动建立他们，在 <path>test/dev/</path> 
目录中输入下列指令：
</p>

<pre caption="建立必要的装置节点">
# <i>mknod -m 660 console c 5 1</i>
# <i>mknod -m 660 null c 1 3</i>
</pre>

<p>
完成后，不要忘了卸载 <path>test/</path> 目录。
</p>

<pre caption="卸载 test/ 目录">
# <i>cd ../..</i>
# <i>umount test</i>
# <i>rmdir test</i>
</pre>

</body>
</section>
<section>
<title>udev 和 nvidia</title>
<body>

<p>
如果您使用 nVidia 提供的驱动程式，但是 X server 没办法在只使用 udev 的系统启动
，确定您有：
</p>

<ul>
  <li>
    <c>nvidia</c> 模组有列在
    <path>/etc/modules.autoload.d/kernel-2.6</path>
  </li>
  <li>
    <c>nvidia-kernel</c> 的版本大於或等於
    <c>media-video/nvidia-kernel-1.0.5336-r2</c>
  </li>
  <li>
    baselayout 的版本大於或等於
    <c>sys-apps/baselayout-1.8.12</c>
  </li>
</ul>

</body>
</section>
<section>
<title>其他问题</title>
<body>

<p>
如果当 <path>/etc/modules.autoload.d/kernel-2.6</path> 里面的模组载入时，装置节
点并没有建立，但是当您用 modprobe 手动载入时他又有出现，您应该是是升级到 
<c>sys-apps/baselayout-1.8.12</c> 或之后的版本。
</p>

<p>
framebuffer 装置(<path>/dev/fb/*</path>)的支援包含在核心 2.6.6-rc2 之后的版本。
</p>

<p>
2.6.4 之前的核心您需要加入 <path>/dev/pts</path> 档案系统的支援。
</p>

<pre caption="启动 /dev/pts 档案系统">
File systems ---&gt;
  Pseudo filesystems ---&gt;
    [*] /dev/pts file system for Unix98 PTYs
</pre>

</body>
</section>
</chapter>

<chapter>
<title>资源 &amp; 感谢</title>
<section>
<body>

<p>
在 Linux Symposium (Ottawa, Ontario Canada - 2003) 中由 
Greg Kroah-Hartman (IBM Corporation) 发表的 udev 演讲提供了关於 udev 程式完整的
了解。
</p>

<p>
<uri link="http://webpages.charter.net/decibelshelp/LinuxHelp_UDEVPrimer.html">Decibel's 
UDEV Primer</uri> 是一份关於 udev 和 Gentoo 的深度文件。
</p>

<p>
由 Gentoo 开发员 Daniel Drake 写的
<uri link="http://www.reactivated.net/udevrules.php">撰写 udev 规则</uri>是一个
学习如何自订 udev 的杰出文章。
</p>

</body>
</section>
</chapter>

</guide>
