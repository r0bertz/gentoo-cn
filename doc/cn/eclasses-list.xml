<?xml version='1.0' encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="/xsl/guide.xsl" ?>
<!-- $Header: /var/www/www.gentoo.org/raw_cvs/gentoo/xml/htdocs/doc/en/eclasses-list.xml,v 1.4 2004/02/19 14:47:28 swift Exp $ -->
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<guide link = "/doc/zh_cn/eclasses-list.xml">
<title>Gentoo Eclass 列表</title>
<author title="Author">
<mail link="zhware@gentoo.org">Stoyan Zhekov</mail>
</author>
<author title="Translator">
<mail link="joanphan@gmail.com">Hans Joanphan</mail>
</author>

<abstract>
这个手册描述了Gentoo Portage里已有的eclass
</abstract>

<version>1.1</version>
<date>26 October, 2002</date>

<chapter>
<title>aspell-dict.eclass</title>
<section>
<body>
<p>
aspell-dict eclass是设计用来编写aspell支持的新的字典库（来自<uri>http://www.gnu.org/</uri>）的ebuild更加方便。
</p>
</body>
</section>
</chapter>

<chapter>
<title>autotools.eclass</title>
<section>
<body>
<p>
autotools eclass使得需要最新autoconf/automake的程序可以编译。
</p>
<note>
  这个eclass是用来连接autoconf-2.13、autoconf-2.5x和automake-1.4x、automake-1.5x的不兼容问题的。绝大部分的软件包需要autoconf-2.13和automake-1.4x，但是因为不兼容不能在这些软件的最新版中使用，因此如果我们有一个需要最新版本的automake和autoconf的软件包，它就会出现问题。
</note>
<p>
一个有注解的例子：
</p>
<pre>
   # Copyright 1999-2002 Gentoo Technologies, Inc.
   # Distributed under the terms of the GNU General Public License, v2 or later
   # Maintainer:  John Doe &lt;john@foo.com&gt;
   # $Header: /var/www/www.gentoo.org/raw_cvs/gentoo/xml/htdocs/doc/en/eclasses-list.xml,v 1.4 2004/02/19 14:47:28 swift Exp $
#
   # 如果从这里设定不同的版本，*必须*在引用inherit.eclass之前做完
   #ACONFVER=2.52f
   #AMAKEVER=1.5b
#
   # 引用 inherit.eclass 和继承 AutoTools
   . /usr/portage/eclass/inherit.eclass 
   inherit autotools 
#
   # 这是最标准的方法
   S=${WORKDIR}/${P}
   DESCRIPTION="My Application"
#
   # 这里你*需要*设定$SRC_URI为一个网络源码地址，以包含automake和autoconf软件包
   SRC_URI="${SRC_URI}
            http://download.foo.com/files/${P}.tar.gz"
#
   HOMEPAGE="http://www.foo.com/"
#
   # 这里你*需要*设定$DEPEND为包含automake和autoconf依赖性
   DEPEND="${DEPEND}
           foo-libs/libfoo"
#
   src_compile() {
#
       # 这里将automake和autoconf安装在一个临时文件夹里和设定环境。千万不要忘了！
       install_autotools
#
       # 这里就同平常一样
       ./configure --host=${CHOST} \
                   --prefix=/usr || die
       emake || die
   }
#
   src_install() {
#
       # 这仍然是通常要做的标准方法
       make DESTDIR=${D} install || die
       dodoc AUTHORS COPYING ChangeLog INSTALL NEWS README TODO
   }
</pre>
</body>
</section>
</chapter>

<chapter>
<title>base.eclass</title>
<section>
<body>
<p>
base eclass定义一些默认的函数和变量。几乎所有其他的都得从这里继承。
</p>
</body>
</section>
</chapter>

<chapter>
<title>commonbox.eclass</title>
<section>
<body>
<p>
commonbox eclass设计用来让如blackbox、fluxbox和commonbox这样的窗口管理器安装更加简单。这些窗口管理器的通常事务将在commonbox-utils依赖性中安装，默认风格也将是commonbox风格。他们现在都共享使用<path>/usr/share/commonbox</path>文件夹。
</p>
</body>
</section>
</chapter>

<chapter>
<title>cvs.eclass</title>
<section>
<body>
<p>
这个eclass提供通用的cvs获取函数。
</p>
</body>
</section>
</chapter>

<chapter>
<title>debug.eclass</title>
<section>
<body>
<p>
一个通用的DEBUG eclass，方便加入debug的信息和从<c>CFLAGS</c>除去“不好的”参数。
</p>
</body>
</section>
</chapter>

<chapter>
<title>distutils.eclass</title>
<section>
<body>
<p>
distutils eclass设计用来方便基于distutils的python模块的安装以及它与Gentoo系统的结合。
</p>
</body>
</section>
</chapter>

<chapter>
<title>ebook.eclass</title>
<section>
<body>
<p>
ebook eclass定义安装ebooks的一些默认函数和变量。
</p>
</body>
</section>
</chapter>

<chapter>
<title>elisp.eclass</title>
<section>
<body>
<p>
这个eclass给emacs相关软件包设定了site-lisp文件夹。
</p>
</body>
</section>
</chapter>

<chapter>
<title>eutils.eclass</title>
<section>
<body>
<p>
这个eclass是用作一般的目的函数，让绝大部分ebuild可以执行自己。
</p>
</body>
</section>
</chapter>

<chapter>
<title>flag-o-matic.eclass</title>
<section>
<body>
</body>
</section>
</chapter>

<chapter>
<title>games.eclass</title>
<section>
<body>
<p>
这是让安装游戏更加标准的ebuild，在一个app-games的ebuild里，你最好有一个为什么不用games.eclass原因。
</p>
</body>
</section>
</chapter>

<chapter>
<title>gcc.eclass</title>
<section>
<body>
<p>
这个eclass包含了（应该包含）获得gcc普通信息的函数。
</p>
</body>
</section>
</chapter>

<chapter>
<title>gnome.org.eclass</title>
<section>
<body>
<p>
Gnome ECLASS。主要是<c>SRC_URI</c>设置。
</p>
</body>
</section>
</chapter>

<chapter>
<title>gnome2.eclass</title>
<section>
<body>
</body>
</section>
</chapter>

<chapter>
<title>gnuconfig.eclass</title>
<section>
<body>
<p>
这个eclass用来升级config.guess和config.sub。如果configure因为弄错你系统（<c>CHOST</c>）的名字，这个将会很有用。
</p>
</body>
</section>
</chapter>

<chapter>
<title>gtk-engines.eclass</title>
<section>
<body>
<p>
gtk-engines eclass将会被所有的gtk-engines-* ebuilds继承。
</p>
</body>
</section>
</chapter>

<chapter>
<title>inherit.eclass</title>
<section>
<body>
<note>
这个文件是必须的，如果没有它，使用就的继承方法的旧的安装的软件包将会不能卸载。但是，它并不需要包含任何代码在其中:-)
</note>
</body>
</section>
</chapter>

<chapter>
<title>java.eclass</title>
<section>
<body>
</body>
</section>
</chapter>

<chapter>
<title>kde-base.eclass</title>
<section>
<body>
<p>
这个是给标准的依赖于kde的程序（也就是跟着<c>configure/make/make install</c>的过程和有标准的配置选项的程序）使用的ebuild。
</p>
</body>
</section>
</chapter>

<chapter>
<title>kde-dist.eclass</title>
<section>
<body>
<p>
这个是给依赖于>=2.2.1 kde base的软件包的kde-dist eclass。不要用在kdelibs上:-)
</p>
<warn>
不要用在kdevelop、koffice等上，因为它们使用不同的版本策略。
</warn>
</body>
</section>
</chapter>

<chapter>
<title>kde-functions.eclass</title>
<section>
<body>
<p>
这里包含了除开修改变量和函数的所有东西（如<c>$P</c>，<c>src_compile()</c>等）
</p>
</body>
</section>
</chapter>

<chapter>
<title>kde-i18n.eclass</title>
<section>
<body>
</body>
</section>
</chapter>

<chapter>
<title>kde-patch.eclass</title>
<section>
<body>
<p>
这个给软件包应用上特定日期的自制的补丁。
</p>
</body>
</section>
</chapter>

<chapter>
<title>kde-pre.eclass</title>
<section>
<body>
<p>
这个是给KDE预发行版（alpha、beta等）使用的，这中发行版在portage里的ebuild的名字上有一个_（下划线），但是在他们的源代码档案和源代码文件夹里没有。在设定<c>SRC_URI</c>和<c>WORKDIR</c>后再继承这个eclass。
</p>
</body>
</section>
</chapter>

<chapter>
<title>kde-source.eclass</title>
<section>
<body>
<p>
这是给kde-base的cvs ebuilds使用的。阅读设置相关的注释。它使用<c>$S</c>并设定了<c>$SRC_URI</c>，因此尽量在后面继承它（当然在其他任何eclass之后）。查看<uri>http://www.gentoo.org/~danarmak/kde-cvs.html</uri>！所有的实际上的功能只是在<c>cvs.eclass</c>里；只是再添加了几个普通的kde特定的选项。
</p>
</body>
</section>
</chapter>

<chapter>
<title>kde.eclass</title>
<section>
<body>
<p>
kde eclass为所有的kde-* eclass所继承。但很少有ebuilds直接从这里继承。
</p>
</body>
</section>
</chapter>

<chapter>
<title>kde.org.eclass</title>
<section>
<body>
<p>
包含<uri>ftp://ftp.kde.org/</uri>软件包的位置和它们的镜像
</p>
</body>
</section>
</chapter>

<chapter>
<title>kernel.eclass</title>
<section>
<body>
<p>
这个eclass包含了用于所有基于lostlogic的内核ebuild的函数。
</p>
</body>
</section>
</chapter>

<chapter>
<title>kmod.eclass</title>
<section>
<body>
<p>
base eclass定义了一些默认函数和变量。几乎所有其他的都从这里继承。
</p>
</body>
</section>
</chapter>

<chapter>
<title>koffice-i18n.eclass</title>
<section>
<body>
</body>
</section>
</chapter>

<chapter>
<title>latex-package.eclass</title>
<section>
<body>

<p>
这个eclass设计以方便使用和实行。大量的LaTeX软件包将只需要定义<c>SRC_URI</c>（有些时候还有<c>$S</c>）就可以成功安装。如果需要安装字体，还必须定义变量<c>SUPPLIER</c>。
</p>

<p>
但是，那些有子文件夹的软件包必须对每个子文件夹单独进行。比如说，一个软件包包含文件夹<path>DIR1</path>和<path>DIR2</path>必须在每个文件夹里都调用<c>latex-package_src_compile()</c>和<c>latex-package_src_install()</c>，就同下面一样：
</p>

<pre>
src_compile() {
   cd ${S}
   cd DIR1
   latex-package_src_compile
   cd ..
   cd DIR2
   latex-package_src_compile
}

src_install() {
   cd ${S}
   cd DIR1
   latex-package_src_install
   cd ..
   cd DIR2
   latex-package_src_install
}
</pre>

<p>
这个eclass会自动在每次安装或者卸载后刷新TeX的缓冲区（<c>ls-lR</c>），也会从源码里自带的TeX文件里创建最终的文档。注意我们将TeX的布局标准通过在<path>/usr/share/doc/${PN}</path>里使用文档来分开。
</p>

<p>
对于基本安装的例子，你可以查看<c>app-text/latex-aastex</c>和<c>app-text/latex-leaflet</c>。
</p>

<note>
CTAN提供"directory grab"函数每次创建文件时都出现不同的MD5码。由于这个原因，如果你是从CTAN获得源代码，你必须要么单独的获得每个文件，要么找一个别的镜像的档案中找到他们（如iBiblio）。
</note>
</body>
</section>
</chapter>

<chapter>
<title>libtool.eclass</title>
<section>
<body>
<p>
这个eclass给库工具的软件包随同发行的<c>ltmain.sh</c>提供relink和portage补丁。
</p>
</body>
</section>
</chapter>

<chapter>
<title>makeedit.eclass</title>
<section>
<body>
<p>
makeedit eclass将会在编译时去掉<c>-Wreturn-type</c>和<c>-Wall</c>，这个会减小对RAM的要求。
</p>
</body>
</section>
</chapter>

<chapter>
<title>mount-boot.eclass</title>
<section>
<body>
</body>
</section>
</chapter>

<chapter>
<title>nsplugins.eclass</title>
<section>
<body>
<p>
就是一些给netscape/mozilla的插件共享提供一些可以重用的函数。
</p>
</body>
</section>
</chapter>

<chapter>
<title>perl-module.eclass</title>
<section>
<body>
<p>
perl-module eclass设计用来方便perl模块的安装以及它们和Gentoo Linux系统的结合。
</p>
</body>
</section>
</chapter>

<chapter>
<title>perl-post.eclass</title>
<section>
<body>
<p>
perl-post eclass设计用来在perl和／或perl模块安装或卸载时对<path>${installarchdir}/perllocal.pod</path>文件完全的更新。
or removed.
</p>
</body>
</section>
</chapter>

<chapter>
<title>vim.eclass</title>
<section>
<body>
<p>
从vim的ebuild中获得。src_compile和install应该在某些方面集成一下。
</p>
</body>
</section>
</chapter>

<chapter>
<title>virtualx.eclass</title>
<section>
<body>
<p>
这个eclass可以给需要一个X的工作环境编译的软件包使用。
</p>
</body>
</section>
</chapter>

</guide>
