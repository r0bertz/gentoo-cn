<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->
<!-- $Header$ -->
<!-- English CVS version: 1.22 -->
<sections>

<abstract>
Linux内核是每个发行版的核心。本章节将解释如何配置您自己的内核。
</abstract>

<version>6.0</version>
<date>2008-03-22</date>

<section>
<title>时区</title>
<body>

<p>
您首先需要选择您自己的时区，这样可以让系统知道它的位置在哪里。您可以在<path>/usr/share/zoneinfo</path>中找到您所在的时区，然后把它复制到<path>/etc/localtime</path>。请不要使用<path>/usr/share/zoneinfo/Etc/GMT*</path>下的时区，因为它们“名不副实”。例如，<path>GMT-8</path>事实上是GMT+8区。
</p>

<pre caption="设置时区信息">
# <i>ls /usr/share/zoneinfo</i>
<comment>（假设您要用GMT）</comment>
# <i>cp /usr/share/zoneinfo/GMT /etc/localtime</i>
</pre>

</body>
</section>
<section>
<title>安装源码</title>
<subsection>
<title>选择内核</title>
<body>

<p>
Linux内核是所有发行版的核心。它位于用户程序和系统硬件之间。Gentoo提供给我们几个可选的内核源码。完整的清单参见<uri link="/doc/en/gentoo-kernel.xml">Gentoo内核指南</uri>。
</p>

<p>
对于<keyval id="arch"/>架构的系统来说，我们有<c>gentoo-sources</c>（包含增加了额外功能的补丁）。
</p>

<p>
选择你的内核源代码并使用<c>emerge</c>来安装。
</p>

<pre caption="安装内核源码">
# <i>emerge gentoo-sources</i>
</pre>

<p>
当您查看<path>/usr/src</path>时，您将会看到一个叫做<path>linux</path>的符号链接指向您安装的内核源码。在我们这个例子中，安装的源码指向<c>gentoo-sources-<keyval id="kernel-version"/></c>。您的版本可能有所不同，所以请你记住这一点。
</p>

<pre caption="查看内核源码符号链接">
# <i>ls -l /usr/src/linux</i>
lrwxrwxrwx    1 root   root    12 Oct 13 11:04 /usr/src/linux -&gt; linux-<keyval id="kernel-version"/>
</pre>

<p>
现在，我们开始配置和编译您的内核。您可以用<c>genkernel</c>来做这件事。这将会建立一个和安装光盘所用的内核类似的通用内核。不过我们将首先说明如何手动配置一个内核，因为这是优化您系统环境的最佳方法。
</p>

<p>
如果您希望手动配置您的内核，点击<uri link="#manual">默认：手动配置</uri>。如果您希望使用<c>genkernel</c>，您可以阅读<uri link="#genkernel">备选：使用genkernel</uri>。
</p>

</body>
</subsection>
</section>
<section id="manual">
<title>默认：手动配置</title>
<subsection>
<title>介绍</title>
<body>

<p>
手动配置内核经常被Linux使用者认为是最困难的步骤。事实并非如此——但是当您手动配置几次内核之后，您就不会再觉得它有多么难了。:)
</p>

<p>
然而，一件事情<e>是</e>真的：在手动配置内核之前，您必须了解您的系统。您可以安装pciutils（<c>emerge pciutils</c>），用其中的<c>lspci</c>来了解您需要的大部分信息。您现在可以在chroot的环境中运行<c>lspci</c>。您可以忽略任何<e>pcilib</e>的警告。（类似于pcilib: cannot open/sys/bus/pci/devices）。此外，您也可以在非chroot的环境执行<c>lspci</c>。结果相同。您还可以运行<c>lsmod</c>来查看安装光盘使用了哪些内核模块。（这也是个不错的提示，它可以教你该选择哪些模块）。
</p>

<p>
现在进入到您的内核目录并且执行<c>make menuconfig</c>。这将会启动一个基于ncureses的配置菜单。
</p>

<pre caption="开始menuconfig">
# <i>cd /usr/src/linux</i>
# <i>make menuconfig</i>
</pre>

<p>
您将会看到一些配置条目。首先我们将会列出一些您必须启用的选项（否则Gentoo将不能正常运行或者根本不能运行）。
</p>

</body>
</subsection>
<subsection>
<title>必须启用的选项</title>
<body>

<p>
确保启动您的系统所必需的驱动（比如SCSI控制器……）被编译<e>进</e>内核而不是作为模块加入的。否则您的系统将完全不能启动。
</p>

</body>
<body test="func:keyval('arch')='AMD64'">

<p>
然后我们将精确的选择处理器类型。x86_64内核维护者强烈推荐用户打开MCE功能，这样他们能够得到任何硬件问题的通知。在x86_64中，这些错误并不是如同其他架构那样写入<c>dmesg</c>，而是写入<path>/dev/mcelog</path>。这需要安装<c>app-admin/mcelog</c>。如果你想运行32位程序，请一定选中IA32 Emulation。默认情况下，Gentoo将会安装一个multilib系统（可以同时执行32位和64位程序），所以很大可能你会需要这个选项。
</p>

<pre caption="选择处理器类型和特性">
Processor type and features  --->
   [ ] Intel MCE Features
   [ ] AMD MCE Features
  Processor family (AMD-Opteron/Athlon64)  --->
    ( ) AMD-Opteron/Athlon64
    ( ) Intel EM64T
    ( ) Generic-x86-64
Executable file formats / Emulations  --->
   [*] IA32 Emulation
</pre>

</body>
<body test="func:keyval('arch')='x86'">

<p>
现在选择正确的处理器类型：
</p>

<pre caption="选择正确的处理器类别">
Processor type and features ---&gt;
  <comment>(Change according to your system)</comment>
  (<i>Athlon/Duron/K7</i>) Processor family
</pre>

</body>
<body>

<p>
现在进入<c>File Systems</c>并且选择您使用的文件系统。请<e>不要</e>把它们编译成模块，否则您的Gentoo系统将不能挂载您的分区。同时您也要启用<c>Virtual memory</c>和<c>/proc file system</c>的支持。
</p>

</body>
<body test="func:keyval('arch')='x86'">

<pre caption="选择需要的文件系统">
File systems ---&gt;
  Pseudo Filesystems ---&gt;
    [*] /proc file system support
    [*] Virtual memory file system support (former shm fs)

<comment>#-#-#-#-#  choice  #-#-#-#-#
（依照你系统的需要启用下面所列出的一个或是多个选项）</comment>
  &lt;*&gt; Reiserfs support
  &lt;*&gt; Ext3 journalling file system support
  &lt;*&gt; JFS filesystem support
  &lt;*&gt; Second extended fs support
  &lt;*&gt; XFS filesystem support
</pre>

</body>
<body test="func:keyval('arch')='AMD64'">

<pre caption="选择需要的文件系统">
File systems ---&gt;
  Pseudo Filesystems ---&gt;
    [*] /proc file system support
    [*] Virtual memory file system support (former shm fs)

<comment>#-#-#-#-#  choice  #-#-#-#-#
（依照你系统的需要启用下面所列出的一个或是多个选项）</comment>
  &lt;*&gt; Reiserfs support
  &lt;*&gt; Ext3 journalling file system support
  &lt;*&gt; JFS filesystem support
  &lt;*&gt; Second extended fs support
  &lt;*&gt; XFS filesystem support
</pre>

</body>
<body>

<p>
不要忘记给您的硬盘打开DMA：
</p>

<pre caption="打开DMA">
Device Drivers ---&gt;
  ATA/ATAPI/MFM/RLL support ---&gt;
    [*] Generic PCI bus-master DMA support
</pre>

<p>
如果您在使用PPPoE接入Interne或者您在使用拨号的调制解调器，您需要下面的选项：
</p>

<pre caption="选择PPPoE驱动" test="func:keyval('arch')='AMD64'">
Device Drivers ---&gt;
  Networking Support ---&gt;
    &lt;*&gt; PPP (point-to-point protocol) support
    &lt;*&gt;   PPP support for async serial ports
    &lt;*&gt;   PPP support for sync tty ports
</pre>

<pre caption="选择PPPoE驱动" test="func:keyval('arch')='x86'">
Device Drivers ---&gt;
  Networking support ---&gt;
    &lt;*&gt; PPP (point-to-point protocol) support
    &lt;*&gt;   PPP support for async serial ports
    &lt;*&gt;   PPP support for sync tty ports
</pre>

<p>
两个压缩选项不会造成什么错误，不过它们不是必需的。<c>PPP over Ethernet</c>选项也不是必需的，只在使用<c>ppp</c>并被配置成使用核心PPPoE时才会用到它。
</p>

<p>
如果您需要它，请不要忘记在内核中包含对您的网卡的支持。
</p>

<p test="func:keyval('arch')='x86'">
如果您拥有支持HyperThreading（tm）的Intel CPU，或者您有多个CPU，您需要
激活"Symmetric multi-processing support"：
</p>

<p test="func:keyval('arch')='AMD64'">
如果您有多个CPU或者一个多核心（e.g. AMD64 X2）系统，您应该激活
"Symmetric multi-processing support"：
</p>

<pre caption="启用SMP支持">
Processor type and features  ---&gt;
  [*] Symmetric multi-processing support
</pre>

<note>
在多核心系统中，处理器的数目相当于核心的数目。
</note>

<p>
如果您使用USB输入装置（比如键盘或者鼠标）那么不要忘记支持它们：
</p>

<pre caption="启用USB接口的输入设备支持">
Device Drivers ---&gt;
  USB Support ---&gt;
    &lt;*&gt;   USB Human Interface Device (full HID) support
</pre>

</body>
<body test="func:keyval('arch')='x86'">

<p>
如果你想要对你的笔记本的PCMCIA支持，也不要忘了在系统中允许PCMCIA card bridge。
</p>

<pre caption="启用PCMCIA支持">
Bus options (PCI, PCMCIA, EISA, MCA, ISA)  ---&gt;
  PCCARD (PCMCIA/CardBus) support  ---&gt;
    &lt;*&gt; PCCard (PCMCIA/CardBus) support
<comment>（如果您需要使用老式的PCMCIA卡，选择16位。大多数人需要。）</comment>
    &lt;*&gt;   16-bit PCMCIA support
    [*]   32-bit CardBus support
<comment>（选择相关的bridges）</comment>
    --- PC-card bridges
    &lt;*&gt; CardBus yenta-compatible bridge support (NEW)
    &lt;*&gt; Cirrus PD6729 compatible bridge support (NEW)
    &lt;*&gt; i82092 compatible bridge support (NEW)
    &lt;*&gt; i82365 compatible bridge support (NEW)
    &lt;*&gt; Databook TCIC host bridge support (NEW)
</pre>

<p>
当您完成了内核配置之后，请点击<uri link="#compiling">编译与安装</uri>.
</p>

</body>
</subsection>
<subsection id="compiling">
<title>编译与安装</title>
<body>

<p>
既然现在您的内核已经配置成功了，那么就是时候编译并且安装它了。退出配置界面并且开启编译进程：
</p>

<pre caption="编译内核">
# <i>make &amp;&amp; make modules_install</i>
</pre>

<p>
当内核编译完成后，复制内核镜像到<path>/boot</path>。您可以给内核任意命名，然后记住它。因为在您配置您的系统引导程序的时候您需要用到它。记得用您内核的名字和版本来替代<c><keyval id="kernel-name"/></c>。
</p>

<pre caption="安装内核">
# <i>cp arch/<keyval id="arch-sub"/>/boot/bzImage /boot/<keyval id="kernel-name"/></i>
</pre>

<p>
现在请从<uri link="#kernel_modules">内核模块</uri>一节继续安装。
</p>

</body>
</subsection>
</section>
<section id="genkernel">
<title>备选：使用genkernel</title>
<body>

<p>
如果您在阅读这部分，那么您选择了使用<c>genkernel</c>脚本来配置您自己的内核。
</p>

<p>
现在您的内核源码树已经安装了，是时候用<c>genkernel</c>脚本自动编译您的内核了。<c>genkernel</c>是使用类似安装光盘中的内核配置来配置内核的。这表明当您用<c>genkernel</c>建立内核时，您的系统在启动时候将会如同安装光盘那样识别您所有的硬件。因为genkernel不需要手动配置内核，所以它对于那些不想自己编译特定内核的用户来说是一个理想的解决方案。
</p>

<p>
现在让我们来看看如何使用genkernel吧。首先，安装genkernel：
</p>

<pre caption="安装genkernel">
# <i>emerge genkernel</i>
</pre>

</body>
<body test="func:keyval('arch')='x86'">

<p>
然后，复制安装光盘上的内核配置文件到genkernel搜索配置文件的默认位置：
</p>

<pre caption="复制安装光盘的配置文件">
# <i>zcat /proc/config.gz &gt; /usr/share/genkernel/x86/kernel-config-2.6</i>
</pre>

</body>
<body>

<p>
现在执行<c>genkernel all</c>编译您的内核源码。请注意，<c>genkernel</c>编译出的内核支持几乎所有硬件，编译需要一段很长的时间。
</p>

<p>
另外需要注意的是，如果您的启动分区没有使用ext2或者ext3文件系统，您必须使用<c>genkernel --menuconfig all</c>来手动配置您的内核，把您所使用的文件系统编译进内核。（<e>不能</e>编译为模块！）。EVMS2和LVM2的用户很可能也需要加上<c>--evms2</c>和<c>--lvm2</c>参数。
</p>

<pre caption="运行genkernel">
# <i>genkernel all</i>
</pre>

<p>
一旦<c>genkernel</c>运行完成，一个包括全部模块和initrd的内核将被建立。在后面配置引导程序时我们将会用到这个内核和initrd。请记下内核和initrd的名字，因为您将在配置引导程序的时候用到他们。initrd将会在启动真正的系统前自动识别硬件（如同安装光盘一样）。
</p>

<pre caption="查看内核和initrd的名字">
# <i>ls /boot/kernel* /boot/initramfs*</i>
</pre>

</body>
</section>
<section id="kernel_modules">
<title>内核模块</title>
<subsection>
<include href="hb-install-kernelmodules.xml"/>
</subsection>
</section>
</sections>
