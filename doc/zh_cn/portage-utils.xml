<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<!-- $Header$ -->
<!-- English CVS version: 1.5 -->

<guide link="/doc/zh_cn/portage-utils.xml" lang="zh_cn">

<title>Portage-utils</title>

<author title="作者">
  <mail link="rane@gentoo.org">Łukasz Damentko</mail>
</author>
<author title="编辑">
  <mail link="nightmorph@gentoo.org">Joshua Saddler</mail>
</author>
<author title="编辑">
  <mail link="vanquirius@gentoo.org">Marcelo Góes</mail>
</author>
<author title="译者">
  <mail link="jjj3112000@126.com">Zezhou Jiang</mail>
</author>

<abstract>
这个指南涵盖了一些普通的portage-utils用法，portage-utils是一套用C写的快速Portage帮助程序。
</abstract>

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->
<license/>

<version>1.3</version>
<date>2007-05-23</date>

<chapter>
<title>介绍</title>
<section>
<body>

<p>
<c>portage-utils</c>是一套使用C写的非常快速的程序集，对于<c>gentoolkit</c>来说，它是意在提供一个快速但选择有限的副本。请记住<c>portage-utils</c>不是打算代替<c>gentoolkit</c>。虽然它的组件比同等的<c>gentoolkit</c>的组件更有效率，而且也许在需要重复地调用Portage时更适于用于脚本，但是<c>portage-utils</c>不提供同样的函数。它重来不考虑eclass，并且不提供像<c>revdep-rebuild</c>和<c>glsa-check</c>之类的工具。
</p>

<p>
你可以在<uri link="/doc/en/gentoolkit.xml">Gentoolkit</uri>指南里找到更多有关<c>gentoolkit</c>的信息。
</p>

<p>
你可以键入<c>man q</c> or <c>q --help</c>来得到<c>portage-utils</c>里的所有程序的列表。请阅读提到的所有的软件的man页，因为这个指南只是对这些最有用的函数进行一个简要的介绍，并且不包括每一个程序的所有信息。
</p>

<p>
使用<c>portage-utils</c>的第一步是安装包文件：
</p>

<pre caption="安装portage-utils">
# <i>emerge portage-utils</i>
</pre>

</body>
</section>
</chapter>

<chapter>
<title>使用</title>
<section>
<title>如何找到一个文件属于的包</title>
<body>

<p>
用<c>qfile</c>找一个文件属于的包：
</p>

<pre caption="找到一个文件属于的包">
$ <i>qfile /etc/fonts/fonts.conf</i>
media-libs/fontconfig (/etc/fonts/fonts.conf)
$ <i>qfile /usr/share/keymaps/atari/atari-uk-falcon.map.gz</i>
sys-apps/kbd (/usr/share/keymaps/atari/atari-uk-falcon.map.gz)
</pre>

</body>
</section>
<section>
<title>验证包的完整性</title>
<body>

<p>
如果你想要检查被某些包安装的文件的MD5或者是mtimes，你可以使用<c>qcheck</c>应用程序：
</p>

<pre caption="检查包的完整性">
$ <i>qcheck portage-utils</i>
Checking app-portage/portage-utils-0.1.13 ...
  * 36 out of 36 files are good
</pre>

<p>
当然，所有的安装后改变的文件都会在这里被报告。如果某个程序报告你必须在安装完后手动编辑配置文件，那其实没有什么可担心的。
</p>

</body>
</section>
<section>
<title>列出依赖于某些包的包文件</title>
<body>

<p>
当然那里也有能让你列出某些包依赖的所有的包。这你可以使用<c>qdepends</c>来达到。使用<c>-a</c>选项来显示某个包所有的DEPEND，RDEPEND和PDEPEND信息。
</p>

<pre caption="列出依赖于某些包的包文件">
$ <i>qdepends -a pygtk</i>
 * DEPEND
dev-python/pygtk-2.8.2: &gt;=dev-lang/python-2.3 &gt;=x11-libs/gtk+-2.8.0
&gt;=dev-libs/glib-2.8.0 &gt;=x11-libs/pango-1.10.0 &gt;=dev-libs/atk-1.8.0
&gt;=gnome-base/libglade-2.5.0 &gt;=dev-python/pycairo-0.9.0 dev-python/numeric
virtual/opengl dev-python/pyopengl &gt;=x11-libs/gtkglarea-1.99
&gt;=dev-util/pkgconfig-0.9 sys-devel/patch
 * RDEPEND
dev-python/pygtk-2.8.2: &gt;=dev-lang/python-2.3 &gt;=x11-libs/gtk+-2.8.0
&gt;=dev-libs/glib-2.8.0 &gt;=x11-libs/pango-1.10.0 &gt;=dev-libs/atk-1.8.0
&gt;=gnome-base/libglade-2.5.0 &gt;=dev-python/pycairo-0.9.0 dev-python/numeric
virtual/opengl dev-python/pyopengl &gt;=x11-libs/gtkglarea-1.99
 * PDEPEND
</pre>

</body>
</section>
<section>
<title>列出属于一个ebuild文件的文件</title>
<body>

<p>
<c>qlist</c>给你属于一个ebuild的所有文件的列表
</p>

<pre caption="列出属于一个ebuild文件的文件">
$ <i>qlist vim</i>
/usr/bin/gvim
/usr/bin/gvimdiff
/usr/bin/evim
/usr/bin/eview
/usr/bin/gview
/usr/bin/rgvim
[...]
</pre>

</body>
</section>
<section>
<title>搜索使用某些USE标记的包</title>
<body>

<p>
使用<c>quse</c>来做这事，它必须使用root用户来运行。当第一次建立/更新ebuild缓存时可能需要一些时间。
</p>

<pre caption="寻找带有“firefox”USE标记的包">
# <i>quse firefox</i>
app-office/openoffice/openoffice-2.0.2_rc1.ebuild binfilter curl eds firefox gnome gtk java kde ldap xml2
dev-haskell/gtk2hs/gtk2hs-0.9.10.ebuild doc glade gnome firefox
dev-java/swt/swt-3.1-r1.ebuild accessibility cairo firefox gnome
[...]
</pre>

</body>
</section>
<section>
<title>找到包的大小</title>
<body>

<p>
使用<c>qsize</c>程序来做这件事是想要多简单就有多简单：
</p>

<pre caption="找到包的大小">
$ <i>qsize vim</i>
app-editors/gvim-6.4: 10 files, 7 non-files, 2327.516 KB
app-editors/vim-6.4: 6 files, 2 non-files, 2058.14 KB
app-editors/vim-core-6.4: 1024 files, 68 non-files, 10950.984 KB
[...]
</pre>

</body>
</section>
<section>
<title>搜索Portage树</title>
<body>

<p>
<c>portage-utils</c>的最强大的工具之一是<c>qsearch</c>。这个工具允许你比默认的<c>emerge -s</c>更快地搜索Portage树。
</p>

<p>
这里是一些关于它的用法的示例：
</p>

<pre caption="使用qsearch来搜索软件包树">
<comment>（我忘记了我最喜欢的字体的包的名字）</comment>
$ <i>qsearch terminus</i>
media-fonts/terminus-font A clean fixed font for the console and X11

<comment>（我想谢谢制作了它们的那个家伙。他的主页是什么？）</comment>
$ <i>qsearch -H terminus</i>
media-fonts/terminus-font http://www.is-vn.bg/hamster/jimmy-en.html

<comment>（我现在要一个聊天客户端）</comment>
$ <i>qsearch -S "jabber client"</i>
app-emacs/emacs-jabber A Jabber client for Emacs.
net-im/gajim Jabber client written in PyGTK
net-im/gnome-jabber Gnome Jabber Client
net-im/gossip Lightweight Jabber client for GNOME
net-im/imcom Python commandline Jabber Client
net-im/psi QT 3.x Jabber Client, with Licq-like interface
net-im/tkabber Featureful Jabber client for tcl/tk.
x11-themes/psi-themes Iconsets for Psi, a QT 3.x Jabber Client
</pre>

</body>
</section>
<section>
<title>从emerge的log文件里提取信息</title>
<body>

<p>
那里也有一个允许你从你的<path>emerge.log</path>文件里提取有用信息的工具。它叫做<c>qlop</c>，并且当你想要评估包的编译时间或者和你的朋友比较谁的电脑比较快时它会很有用。它也能让你现在正在编译什么和要多长时间，这当你在命令行下并打算检查它时很方便。
</p>

<pre caption="用qlop阅读emerge的log文件">
<comment>（我现在开始编译安装perl，并且我想要一个它一般要安装多长的预测）</comment>
$ <i>qlop -tH perl</i>
perl: 7 minutes, 52 seconds for 4 merges
<comment>（现在让我们看看正在编译安装什么）</comment>
$ <i>qlop -c</i>
* perl-5.8.8-r23
    started: Mon May 21 12:41:11 2007
    elapsed: 19 seconds
</pre>

</body>
</section>
</chapter>
</guide>
