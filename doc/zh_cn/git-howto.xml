<?xml version='1.0' encoding="UTF-8"?>
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<guide link="/doc/zh_cn/git-howto.xml" lang="zh_cn">
<title>基于git的Gentoo中文文档开发流程</title>

<author title="作者">
  <mail link="xudong.guan@gmail.com">管旭东</mail>
</author>

<author title="编辑">
  <mail link="r0bertz@gentoo.org">张乐</mail>
</author>

<author title="贡献者">
  <mail link="crquan@gmail.com">程任全</mail>
</author>

<author title="贡献者">
  <mail link="fengguang.wu@gmail.com">吴峰光</mail>
</author>

<author title="贡献者">
  <mail link="jjj3112007@gmail.com">江泽洲</mail>
</author>

<author title="贡献者">
  <mail link="night2008@gmail.com">苏永恒</mail>
</author>

<author title="贡献者">
  <mail link="jingcheng01@gmail.com">井诚</mail>
</author>

<abstract>
本文介绍了如何使用git来进行gentoo中文文档翻译工作的开发。本文的读者不需要有任何git基础。读完本文后，读者应该可以将自己的翻译或对现有工作的修改以补丁的形式发布到gentoo-china邮件列表上，供维护人员评阅和采纳。
</abstract>

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->
<license/>

<version>1.0</version>
<date>2007-07-14</date>

<chapter>
<title>准备工作</title>
<section>
<title>安装git</title>
<body>

<note>
请加上curl和tk USE标记。前者可以让你获取http协议的仓库，后者可以让你使用<c>gitk</c>工具。
</note>

<pre caption="安装git">
$ <i>euse -E curl tk</i>
$ <i>emerge -av dev-util/git</i>
</pre>

</body>
</section>
<section>
<title>默认：安装和配置msmtp</title>
<body>
<pre caption="安装msmtp">
$ <i>emerge -av msmtp</i>
</pre>

<p>
然后设置<c>msmtp</c>，修改~/.msmtprc并设定权限：
</p>

<pre caption="修改~/.msmtprc并设定权限">
$ <i>cat > ~/.msmtprc</i>
defaults
tls on
account gmail
host smtp.gmail.com
from yourname@gmail.com
auth on
user yourname@gmail.com
password yourpassword
port 587
account default:gmail
$ <i>chmod 600 ~/.msmtprc</i>
</pre>

<p>
请用你的email地址和密码代替上面的yourname@gmail.com和yourpassword。
</p>
</body>
</section>

<section>
<title>备选：安装和配置ssmtp</title>
<body>
<pre caption="安装ssmtp">
$ <i>emerge -av ssmtp</i>
</pre>

<p>
<c>ssmtp</c>的配置文件分别存储在<path>/etc/ssmtp/ssmtp.conf</path>和<path>/etc/ssmtp/revaliases</path>内。
</p>

<pre caption="修改/etc/ssmtp/ssmtp.conf">
root=yourname@gmail.com
mailhub=smtp.gmail.com:587
rewriteDomain=
hostname=yourname@gmail.com
UseSTARTTLS=YES
AuthUser=yourname
AuthPass=yourpassword
FromLineOverride=YES
</pre>

<pre caption="修改/etc/ssmtp/revaliases">
root:yourname@gmail.com:smtp.gmail.com:587
user:yourname@gmail.com:smtp.gmail.com:587
</pre>

<p>
请用你的email地址和密码代替上面的yourname@gmail.com和yourpassword，用你在的Gentoo Linux登录的用户名代替user。
</p>
</body>
</section>
<section>
<title>配置git</title>
<body>

<p>
安装好了smtp程序之后，我们来配置<c>git</c>本身。<c>git</c>的每个递交都会关联作者的email信息。在1.5.2.2版及以后的<c>git</c>中，可以使用<c>git-config</c>工具来设定<c>git</c>的一些全局变量。
</p>

<pre caption="设置自己的姓名、email地址及smtp服务器程序">
$ <i>git-config --global user.name 'Your Name'</i>
$ <i>git-config --global user.email 'yourname@gmail.com'</i>
$ <i>git-config --global sendemail.smtpserver "/path/to/your/smtpserver"</i>
</pre>

<p>
同样，用你自己的名字、email地址代替上面的Your Name和yourname@gmail.com。如果使用<c>msmtp</c>，smtpserver的值为<path>/usr/bin/msmtp</path>；如果使用<c>ssmtp</c>，值为<path>/usr/sbin/ssmtp</path>。
</p>

<p>
如此设置后，这些信息就会保存在<path>~/.gitconfig</path>文件中，作为用户个人的全局user相关设置。
</p>

</body>
</section>
<section>
<title>获取主拷贝</title>
<body>

<p>
开始工作前，首先在本地复制一个完整的主拷贝。
</p>

<pre caption="获取现有的主拷贝">
$ <i>cd /path/to/work</i>
$ <i>git clone http://www.gentoo-cn.org/git/gentoo-cn.git</i>
</pre>

<p>
命令成功以后，会创建一个<path>gentoo-cn</path>目录。里面的有个隐藏的<path>.git</path>目录，称为repository，包含了所有的历史数据。repository以外的其他文件称为工作拷贝（working copy），对其进行修改／删除不会影响repository的内容。Repository好比cvs/svn服务器中的内容，工作拷贝好比cvs/svn在客户端checkout出来的内容，可以随便修改。repository默认有一个分支（branch），叫master。当前分支的最新版本叫HEAD。和cvs/svn不同的是，基于git的开发是完全分布式的，没有一个集中的repository，任何开发者不但拥有工作拷贝，而且拥有所有的修改历史。这种开发方式给予开发者更多的信息和更大空间及自由度。
</p>

<p>
下一步请创建一个本地（local）分支并检出此分支。
</p>

<pre caption="创建并检出本地分支">
$ <i>cd gentoo-cn</i>
$ <i>git branch local</i>                        <comment># 创建分支</comment>
$ <i>git checkout local</i>                      <comment># 检出分支</comment>
$ <i>git branch</i>                              <comment># 显示分支</comment>
  master
* local                                          <comment># 带*的为当前活动分支</comment>
</pre>

<note>
以后所有的修改都请只在本地分支里进行。
</note>

<p>
这时可以先用<c>gitk</c>看看当前的修改历史。
</p>

<pre caption="使用gitk --all可以通过图形方式查看项目的所有分支结构和历史修改">
$ <i>gitk --all</i>
</pre>

</body>
</section>
</chapter>
<chapter>
<title>编辑修改</title>
<section>
<title>修改／添加／删除文件</title>
<body>

<p>
完成上述准备工作后，你就可以开始你的正式工作了。你可以修改现有的文件，也可以添加新文件或删除文件。我们以添加一个文件为例，来看看如何利用git进行管理。
</p>

<pre caption="在工作目录中添加一个文件">
$ <i>echo "this is a test" > new_file.xml</i>
</pre>

</body>
</section>
<section>
<title>检查所做的修改</title>
<body>

<p>
你可以随时用<c>git status</c>和<c>git diff</c>查看目前的工作拷贝和repository HEAD的差别。
</p>

<pre caption="建立新文件后git status输出的结果">
$ <i>git status</i>
<comment># On branch local
# Untracked files:
#   (use "git add &lt;file&gt;..." to include in what will be committed)
#
#       new_file.xml</comment>
nothing added to commit but untracked files present (use "git add" to track)
</pre>

</body>
</section>
<section>
<title>添加文件到repository</title>
<body>

<p>
上述<c>git status</c>输出表明新文件<path>new_file.xml</path>还没有添加到repository。你可以用<c>git add</c>完成这个任务。对修改和删除的已有的文件不需要额外步骤。另外由于此文件是新加入的，现在使用<c>git diff</c>将不会显示任何结果。
</p>

<pre caption="添加文件">
$ <i>git add new_file.xml</i>
$ <i>git status</i>
<comment># On branch local
# Changes to be committed:
#   (use "git reset HEAD &lt;file&gt;..." to unstage)
#
#       new file:   new_file.xml
#</comment>
</pre>

</body>
</section>
</chapter>
<chapter>
<title>提交修改</title>
<section>
<title>用git commit提交你的修改</title>
<body>

<p>
你可以随时用<c>git commit</c>提交你的修改。刚开始使用git时，可以尽量多提交。因为和cvs/svn不同，这个拷贝是你个人的，你应该经常保存你的工作。你日后还可以对你的这些工作进一步整理，例如，合并多个提交结果，修改提交信息等，来形成最终可以发布到<mail link="gentoo-china@googlegroups.com">Gentoo China邮件列表</mail>的工作。
</p>

<pre caption="提交你的修改">
$ <i>git commit -a -s -m "added a new file"</i>
Created commit 96ffadde5682bc9b3d96582822bc4e75e8dccdca
 1 files changed, 1 insertions(+), 0 deletions(-)
 create mode 100644 new_file.xml
</pre>

<p>
和cvs/svn一样，你需要填写一个描述此次修改的简短信息。对于自己使用的临时提交，信息可以比较随便。
</p>


</body>
</section>
<section>
<title>用gitk或者git diff查看新的历史</title>
<body>

<pre caption="使用git diff">
$ <i>git diff HEAD^..HEAD</i>
diff --git a/new_file.xml b/new_file.xml
new file mode 100644
index 0000000..0527e6b
--- /dev/null
+++ b/new_file.xml
@@ -0,0 +1 @@
+This is a test
</pre>

<p>
不加参数的<c>git diff</c>可以查看工作拷贝和HEAD的差别。<c>git diff HEAD^..HEAD</c>用于查看最后一次提交所作的修改。HEAD^表示最新版HEAD的上一个版本。类似的名称还有：HEAD^^，HEAD~2，local^^^，tag_name，提交对应SHA1哈希的前几位（用<c>gitk</c>或<c>git whatchanged</c>可以查看提交对应的哈希值）等等。请查看<c>man git-rev-parse</c>以获取更多有关信息。
</p>

</body>
</section>
</chapter>
<chapter>
<title>发布修改</title>
<section>
<title>整理你的个人提交</title>
<body>

<p>
往往你需要对你的个人提交进行整理。尤其是当你想发布你的工作时，一般希望把之前的很多次提交集中起来。假设你还进行了如下的改动。
</p>

<pre caption="更多的修改">
$ <i>echo "this is the second line" >> new_file.xml</i>
$ <i>git diff</i>
diff --git a/new_file.xml b/new_file.xml
index 90bfcb5..030e90b 100644
--- a/new_file.xml
+++ b/new_file.xml
@@ -1 +1,2 @@
 this is a test
+this is the second line
$ <i>git commit -a -s -m "some more log"</i>
Created commit 1958506a599d1bcecd38fb4879b3483545226ef4
 1 files changed, 1 insertions(+), 0 deletions(-)
$ <i>git whatchanged HEAD^^..HEAD</i>
commit 1958506a599d1bcecd38fb4879b3483545226ef4
Author: Xudong Guan &lt;xudong.guan@gmail.com&gt;
Date:   Fri Jul 13 16:44:07 2007 +0100

    some more log

:100644 100644 90bfcb5... 030e90b... M  new_file.xml

commit 96ffadde5682bc9b3d96582822bc4e75e8dccdca
Author: Xudong Guan &lt;xudong.guan@gmail.com&gt;
Date:   Fri Jul 13 16:28:08 2007 +0100

    some log

:000000 100644 0000000... 90bfcb5... A  new_file.xml
</pre>

<p>
此时你希望将上两次修改的commit合二为一，再发布，这时可以通过如下的步骤。
</p>

<pre caption="整理你的上两个提交为一个新的提交">
$ <i>git reset HEAD^^</i>                        <comment># 回退两个历史，但保留工作拷贝</comment>
$ <i>git status</i>
<comment># On branch local
# Untracked files:
#   (use "git add &lt;file&gt;..." to include in what will be committed)
#
#       new_file.xml</comment>
nothing added to commit but untracked files present (use "git add" to track)
$ <i>git add new_file.xml</i>
$ <i>git commit -a -m "Added new file new_file.xml</i>
> 
> 张兄，这是一个新添加的文件，他的用途主要是演示
> 如何使用git.
> 
> 欢迎兄弟们使用。
> "
</pre>

<p>
此时你现在的local分支保存了一个整理好的提交。同时写了一个更加详细的提交描述。现在建议用<c>gitk --all</c>看看两个分支的可视化效果。
</p>

<p>
由于本次提交需要发布，所以最好按照如下格式填写你的提交描述。
</p>
<pre caption="提交描述信息的格式">
Added new file new_file.xml

张兄，这是一个新添加的文件，他的用途主要是演示
如何使用git.

欢迎兄弟们使用。
</pre>

<p>
信息中的第一行简要描述此次修改的主题，它同时也会是将来发送到邮件列表上时的邮件主题。第一行后请空一行，然后象写邮件正文一行，详细描述你的修改。描述使用中文或英文都可以，但是标题使用中文的话，git将来生成提交的patch邮件文件名时，会把中文过滤掉。
</p>

</body>
</section>
<section>
<title>发布你的修改</title>
<body>

<p>
当你要发布你的工作时，你可以用<c>git format-patch</c>产生补丁并用<c>git send-email</c>将补丁发送到<mail link="gentoo-china@googlegroups.com">Gentoo China邮件列表</mail>（如果只是用于测试，可以发到一个个人的邮箱）。不过，与cvs/svn类似的是，补丁产生前之前应该先更新master分支，并且将本地分支rebase到master分支。rebase的概念类似于合并，但和<c>git merge</c>不完全一样。详情请查阅<c>man git-rebase</c>。
</p>

<pre caption="更新master分支且将本地分支rebase到master分支">
$ <i>git checkout master</i>                     <comment># 检出master</comment>
$ <i>git pull</i>                                <comment># 更新master</comment>
$ <i>git checkout local</i>                      <comment># 检出local</comment>
$ <i>git rebase master</i>                       <comment># rebase到master</comment>
</pre>

<p>
如果你在local分支的修改和master里的修改有冲突，这rebase就会中断，并且提示你哪个文件中发生了冲突以及你应该怎样做。此时你应该手工解决冲突，然后执行提示的命令。
</p>

<pre caption="解决冲突">
$ <i>vi new_file.xml</i>                         <comment># 解决文件中的冲突</comment>
$ <i>git add new_file.xml</i>                    <comment># 标记为冲突已解决</comment>
$ <i>git rebase --continue</i>                   <comment># 继续rebase</comment>
</pre>

<p>
所有冲突解决完后，请用<c>git format-patch</c>自动生成要发布的邮件。
</p>

<pre caption="用git format-patch自动生成要发布的邮件">
$ <i>git format-patch -s master</i>              <comment># 创建补丁</comment>
0001-Added-new-file-new_file.xml.patch
</pre>

<pre caption="用git send-email发送邮件">
$ <i>git send-email 0001-Added-file-new_file_xml.patch --to gentoo-china@googlegroups.com</i>
</pre>

</body>
</section>
</chapter>
<chapter>
<title>接收补丁</title>
<section>
<title>维护人员／开发者接收你的补丁</title>
<body>

<p>
你的邮件发到列表上后，会有一定的反馈意见。你在听取修改意见后可以再次发布。你的发布可以被维护人员接收到主拷贝。其他开发者也可以不通过主拷贝，而是通过邮件直接获得你的工作（me是用来加上接收人的Sign-off行的）。
</p>

<p>
首先你需要把补丁邮件接收到本地，并保存邮件全文到一个文件，比如tmp.txt。然后你可以使用<c>git am</c>。
</p>

<pre caption="接收他人工作">
$ <i>git am -s tmp.txt</i>
</pre>

</body>
</section>
</chapter>
</guide>
