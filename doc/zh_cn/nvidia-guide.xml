<?xml version="1.0" encoding="UTF-8"?>

<!-- $Header$ -->
<!-- English CVS version: 1.44 -->
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">
<guide link="/doc/zh_cn/nvidia-guide.xml" lang="zh_cn">
<title>Gentoo Linux nVidia指南</title>

<author title="作者">
  <mail link="swift@gentoo.org">Sven Vermeulen</mail>
</author>
<author title="作者">
  <mail link="nightmorph@gentoo.org">Joshua Saddler</mail>
</author>
<author title="编辑">
  <mail link="curtis119@gentoo.org">M Curtis Napier</mail>
</author>
<author title="编辑">
  <mail link="wolf31o2@gentoo.org">Chris Gianelloni</mail>
</author>
<author title="译者">
  <mail link="liuqing.com@gmail.com">刘清</mail>
</author>

<abstract>
许多Gentoo用户在自己的系统中使用了nVidia芯片组。nVidia提供了Linux下的专用驱动，它能使你的显卡性能得到充分发挥。这份指南指导您安装和配置这些驱动。
</abstract>

<!-- The content of this document is licensed under the CC-BY-SA license 
 See http://creativecommons.org/licenses/by-sa/2.5 -->
<license/>

<version>1.35</version>
<date>2007-11-15</date>

<chapter>
<title>简介</title>
<section>
<body>

<p>
portage树中的nVidia驱动由nVidia发布，构建于Linux内核之上。驱动中包括一个担负与卡对话的艰巨任务的二进制部分。驱动包括两部分，内核模块和X11驱动。两部分包括在一个单独的包中。因为nVidia给它们的驱动打包的方式，你需要在安装驱动前进行一些选择。
</p>

<p>
<c>nvidia-drivers</c> 
包包括来自nVidia的最新驱动，支持<e>所有</e>nVidia的显卡。根据卡的新旧不同，有几个版本。它使用eclass检测你正在使用的是哪种卡，然后安装适合的版本。
</p>

</body>
</section>
</chapter>

<chapter>
<title>驱动兼容性</title>
<section>
<title>哪个版本？</title>
<body>

<p>
<c>nvidia-drivers</c>包支持所有可用的nVidia卡。根据你使用的卡，有多个相应版本。
</p>

<p>
较新的卡（如GeForce 8, 7, 6和FX 5系列）应该使用100.x系列的较新的驱动。
</p>

<p>
较老的卡（如GeForce 3或GeForce 
4系列）需要96.x驱动。对于这些卡，你应该在<path>/etc/portage/package.mask</path>中屏蔽掉<c>&gt;=x11-drivers/nvidia-drivers-97.00</c>。这样将阻止安装你的显卡不兼容的新版驱动。
</p>

<p>
老的基于NV2x的显卡（如：TNT、TNT2、Geforce和GeForce 
2)需要更老的71.x驱动（例如<c>nvidia-drivers-71.86.01</c>）。对于这类卡，你应该在<path>/etc/portage/package.mask</path>中屏蔽掉<c>&gt;=x11-drivers/nvidia-drivers-87.00</c>
</p>

<p>
你可以在<uri 
link="http://www.nvidia.com/object/unix.html">发布说明</uri>通过读相应的x86或x86-64的README来检查你的显卡与哪个驱动兼容。
</p>

</body>
</section>
</chapter>

<chapter>
<title>配置显卡</title>
<section>
<title>内核配置</title>
<body>

<p>
正如刚才提到的，nVidia内核驱动在你当前内核上运行。它做成了一个模块，所以你的内核必须支持内核模块的加载才行。如果你是用<c>genkernel 
all</c>配置的内核，那就是可以的。如果不是，请再检查一下你的内核配置，保证这项支持被打开。
</p>

<pre caption="打开内核模块加载的支持">
Loadable module support ---&gt;
  [*] Enable loadable module support 
</pre>

<p>
你还要在内核中打开<e>Memory Type Range Register</e>
</p>

<pre caption="打开MTRR">
Processor and Features ---&gt;
  [*] MTRR (Memory Type Range Register) support
</pre>

<p> 另外，如果你装的是AGP显卡，你可以选择打开内核里的<c>agpgart</c>支持，直接编到内核里或者编成模块。如果你不使用内核中的agpgart支持，驱动将使用它们自己的<c>agpgart</c>实现，这个实现叫做<c>NvAGP</c>。在某些系统中，它的表现要强于内核中的agpgart。在另外一些系统中，它的表现要弱于内核中的agpgart。你需要自己评估在你自己的系统中哪个更好以得到最佳性能。如果你搞不清楚该怎么做，那就使用内核中的agpgart吧。
</p>

<pre caption="打开agpgart支持">
Device Drivers ---&gt;
Character devices ---&gt;
&lt;*&gt; /dev/agpgart (AGP Support)
</pre> 

<note>
在amd64平台，IOMMU控制着agpgart的设置。
</note>

</body>
</section>
<section>
<title>平台相关注释</title>
<body>

<impo>
对于x86和AMD64的处理器，内核中的驱动与nvidia提供的二进制驱动冲突。如果你为这些CPU编译内核，你必须按照下面的方法完全去掉内核中的驱动。
</impo>

<pre caption="去掉内核中的驱动">
Device Drivers ---&gt;
Graphics Support ---&gt;
&lt; &gt;   nVidia Framebuffer Support
&lt; &gt;   nVidia Riva support
</pre>

<p>
一个不错的framebuffer替代物── <c>VESA</c>：
</p>

<pre caption="打开VESA支持">
Device Drivers ---&gt; 
Graphics Support ---&gt;
&lt;*&gt;   VESA VGA graphics support
</pre>

<p>
然后，在"VESA driver 
type"中选中<c>vesafb</c>或<c>vesafb-tng</c>。如果你用的是AMD64的处理器，你应该选择<c>vesafb</c>而不是<c>vesafb-tng</c>：
</p>

<pre caption="选择framebuffer类型">
(X) vesafb
( ) vesafb-tng
</pre>

<p>
要了解更多的信息，如果在用<c>vesafb</c>可以读<path>/usr/src/linux/Documentation/fb/vesafb.txt</path>，否则就到<path>/usr/src/linux/Documentation/fb/</path>下找你使用的framebuffer的相应文档。
</p>

</body>
</section>
<section>
<title>继续进行内核配置</title>
<body>

<p>
<c>nvidia-drivers</c>的ebuild按<path>/usr/src/linux</path>符号链接自动检测你的内核版本。请确认你正确配置了你的内核而且这个符号链接指向了正确的内核源码。参阅<uri 
link="/doc/zh_cn/handbook/">安装手册</uri>中的“配置内核”一节。
</p>

<p>
首先，你需要emerge 
<c>eselect</c>(如果你没装它的话）。如果你在使用<c>gentoo-sources-2.6.18-r4</c>，你的内核列表看起来象下面一样：
</p>

<pre caption="检查你的/usr/src/linux符号链接">
# <i>eselect kernel list</i>
Available kernel symlink targets:
  [1]   linux-2.6.18-gentoo-r4 *
  [2]   linux-2.6.20-gentoo-r7
  [3]   linux-2.6.20-gentoo-r8

<comment>（确认正确的内核被标了星号</comment>
</pre>

<p>
在上面的输出中，你会注意到<c>linux-2.6.18-gentoo-r4</c>内核标记了星号(<b>*</b>)，这表示它是符号链接指向的内核。
</p>

<p>
如果符号链接没有指向正确的内核源码，你必须象前面的例子那样选择想要的内核源码。
</p>

<pre caption="建立或更新/usr/src/linux符号链接。">
<comment>（选择正确的内核）</comment>
# <i>eselect kernel set 1</i>
</pre>

</body>
</section>
<section>
<title>安装适宜的驱动</title>
<body>

<p>
然后就要安装驱动了。
</p>

<pre caption="安装nVidia驱动">
# <i>emerge nvidia-drivers</i>
</pre>

<note>
安装驱动时可以加上<c>gtk</c>用户标识。加上后将会安装<c>media-video/nvidia-settings</c>。这是一个方便的用来查看和配置nVidia显卡各个方面的图形化工具。
</note>

<impo>
每次你<uri link="/doc/en/kernel-upgrade.xml">编译新内核</uri>或重新编译当前内核，你需要运行<c>emerge nvidia-drivers</c>重新安装nVidia模块。一个更容易的保持由ebuild安装的模块可用的方式是安装<c>sys-kernel/module-rebuild</c>。一旦你已经安装了它，简单地运行<c>module-rebuild populate</c>以把一个需要重新编译的包列表populate到数据库中。仅仅运行<c>module-rebuild rebuild</c>来为你的新内核重建驱动就行了。
</impo>

<p>
安装完成后，运行<c>modprobe nvidia</c>把内核模块载入内存。如果是在升级的情况下，你应该把先前的模块移出内存。
</p>

<pre caption="载入内核模块">
# <i>lsmod | grep nvidia &amp;&amp; rmmod nvidia</i>
# <i>modprobe nvidia</i>
</pre>

<p>
为避免不得不每次启动都手动地加载模块，你可能想要在启动系统时自动地加载，那就编辑<path>/etc/modules.autoload.d/kernel-2.6</path>，把<c>nvidia</c>加进去。不要忘了过后儿运行<c>update-modules</c>。
</p>

<impo>
如果你把<c>agpgart</c>编成模块，你需要把它加入<path>/etc/modules.autoload.d/kernel-2.6</path>
</impo>

<pre caption="运行update-modules">
# <i>update-modules</i>
</pre>

</body>
</section>
<section>
<title>配置X服务</title>
<body>

<p>
一旦安装完合适的驱动，需要用<c>nvidia</c>驱动而不是默认的<c>nv</c>驱动来配置X服务。
</p>

<p>
用你喜欢的编辑器（如<c>nano</c>或<c>vim</c>）打开<path>/etc/X11/xorg.conf</path>，到<c>Device</c>一节，把<c>Driver</c>一行改成如下：
</p>

<pre caption="在X服务配置中把nv改成nvidia">
Section "Device"
  Identifier "nVidia Inc. GeForce2"
  <i>Driver     "nvidia"</i>"
  VideoRam   65536
EndSection
</pre>

<p>
然后到<c>Module</c>一节，确认<c>glx</c>模块加载，同时<c>dri</c>模块没加载：
</p>

<pre caption="更新Module一节">
Section "Module"
  <comment>（……）</comment>
  <i># Load  "dri"
  Load  "glx"</i>
  <comment>（……）</comment>
EndSection
</pre>

<p>
下一步，在<c>Screen</c>一节，确保<c>DefaultDepth</c>指令被设为16或24,或者你只有 
<c>Depth</c>设为16或24的<c>Display</c>小节。如果不这样做，nVidia的GLX扩展将无法启动。
</p>

<pre caption="更新Screen section">
Section "Screen"
  <comment>（……）</comment>
  <i>DefaultDepth 16</i>
  Subsection "Display"
  <comment>（……）</comment>
EndSection
</pre>

<p>
运行<c>eselect</c>，让X服务使用nVidia的GLX库:
</p>

<pre caption="运行eselect">
# <i>eselect opengl set nvidia</i>
</pre>

</body>
</section>
<section>
<title>把你的用户加入video组</title>
<body>

<p>
你必须把你的用户加入<c>video</c>组，他才会有访问nVidia设备文件的权限：
</p>

<pre caption="把你的用户加入video组">
# <i>gpasswd -a youruser video</i>
</pre>

<p>
如果你不使用<c>udev</c>，这个步骤不一定需要，但也不会有坏处，还能使你的系统适应将来的需要。
</p>

</body>
</section>
<section>
<title>测试显卡</title>
<body>

<p>
要测试你的nVidia显卡，就启动X，运行<c>glxinfo</c>，它是<c>mesa-progs</c>包的一部分。应该出现“direct 
rendering is activated”这类结果：
</p>

<pre caption="检查直接渲染状态">
$ <i>glxinfo | grep direct</i>
direct rendering: Yes
</pre>

<p>
如果要测试你的FPS，就运行<c>glxgears</c>命令。
</p>

</body>
</section>
<section>
<title>打开nvidia支持</title>
<body>

<p>
有些工具，如<c>mplayer</c>和<c>xine-lib</c>，使用一个叫做<c>xvmc</c>的本地USE标识来打开XvMCNVIDIA支持。这个支持在看高清电影时很有用。在<path>/etc/make.conf</path>中的USE变量中加入<c>xvmc</c>或者在<path>/etc/portage/package.use</path>中为<c>media-video/mplayer</c>和/或<c>media-libs/xine-lib</c>加入这个USE标识。
</p>

<p>
也有一些程序使用<c>nvidia</c>USE标识，所以你可能需要把它加入<path>/etc/make.conf</path>。
</p>

<p>
然后，运行<c>emerge -uD --newuse world</c>以重新编译这些获益于上述USE标识改变的应用程序。
</p>

</body>
</section>
<section>
<title>使用NVidia配置工具</title>
<body>

<p>
nVidia也为你提供了一个设置工具。这个工具使你能够查看并且不必重启X服务器就改变图形设置。这个工具在portage树的<c>media-video/nvidia-settings</c>包里。如前所述，如果你安装驱动时在<path>/etc/make.conf</path>或<path>/etc/portage/package.use</path>中加入了<c>gtk</c>USE标识，这个包将自动安装。
</p>

</body>
</section>
</chapter>

<chapter>
<title>故障排除</title>
<section>
<title>在拥有4Gb或以上的内存的机器上搞定2D</title>
<body>

<p>
如果你在nVidia的2D加速方面有什么问题。那可能是你不能用MTRR建立混合写入区。要确认这个，请检查<path>/proc/mtrr</path>的内容：
</p>

<pre caption="检查你是否打开了混合写入">
# <i>cat /proc/mtrr</i>
</pre>

<p>
每行都应有"write-back"或"write-combining"。如果你看到有一行有"uncachable"，你需要更改BIOS设置来修正它。
</p>

<p>
重启并进入BIOS，找到MTRR设置（可能会在"CPU 
Settings"下面）。把该项设置由"continuous"改为"discrete"，再引导回Linux。你将发现没有带"uncachable"的行了。2D加速没有任何毛病了。
</p>

</body>
</section>
<section>
<title>
  当我试图加载内核模块时，出现"no such device"。
</title>
<body>

<p>
这个错误通常出现在你没有匹配的显卡时。确认你有装了nVidia的显卡。你可以运行<c>lspci</c>再看一次。
</p>

<p>
如果你确信你有nVidia显卡，检查你的BIOS看一下<e>Assign IRQ to VGA</e>是否设置了。
</p>

</body>
</section>
</chapter>

<chapter>
<title>专家级配置</title>
<section>
<title>文档</title>
<body>

<p>
nVidia驱动包还包含了包罗万象的文档。这些文档安装在<c>/usr/share/doc</c>，能够用以下命令查看：
</p>

<pre caption="查看NVIDIA文档">
$ <i>less /usr/share/doc/nvidia-drivers-*/README.gz</i>
</pre>

</body>
</section>
<section>
<title>内核模块参数</title>
<body>

<p>
<c>nvidia</c>内核模块能接受一些参数。你可以用这些参数调整驱动的行为。这些参数中的大部分都在文档中提到了。你可以通过编辑<c>/etc/modules.d/nvidia</c>来增加或改变这些参数的值。在改变这个文件后记住要运行<c>update-modules</c>，一定要牢记你所做的新设置只有在nvidia模块重新加载后才会生效。
</p>

<pre caption="调整nvidia驱动参数">
<comment>（用你喜欢的编辑器编辑/etc/modules.d/nvidia）</comment>
# <i>nano -w /etc/modules.d/nvidia</i>
<comment>(更新模块信息）</comment>
# <i>update-modules</i>
<comment>（卸载nvidia模块……）</comment>
# <i>modprobe -r nvidia</i>
<comment>（……然后再次加载）</comment>
# <i>modprobe nvidia</i>
</pre>

</body>
</section>
<section>
<title>X的高级配置</title>
<body>

<p>
GLX这个层次也还有相当多的参数可以设置。这些参数控制电视输出、双显、显示器刷新率检测等等的配置。同样，所有这些可用的参数的细节可以在文档中找到。
</p>

<p>
如果你想要使用这些参数，你需要把它们填入X配置文件（通常是<c>/etc/X11/xorg.conf</c>）的相关设备节。举例如下，假如我想要不显示飞溅屏幕：
</p>

<pre caption="X配置中的nvidia高级配置">
Section "Device"
  Identifier "nVidia Inc. GeForce2"
  Driver     "nvidia"
  <i>Option     "NoLogo" "true"</i>
  VideoRam   65536
EndSection
</pre>

</body>
</section>
</chapter>
</guide>
