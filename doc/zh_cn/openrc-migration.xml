<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">
<!-- $Header$ -->
<!-- English CVS version: 1.10 -->

<guide link="/doc/zh_cn/openrc-migration.xml" lang="zh_cn">
<title>基础布局Baselayout和OpenRC迁移指南</title>

<author title="作者">
  <mail link="cardoe"/>
</author>
<author title="作者">
  <mail link="nightmorph"/>
</author>
<author title="贡献者">
  <mail link="uberlord"/>
</author>
<author title="译者">
  <mail link="goldenshore999@gmail.com">周骞</mail>
</author>
<author title="编辑">
  <mail link="r0bertz@gentoo.org">张乐</mail>
</author>

<abstract>
这个指南会指导你如何从baselayout-1迁移到baselayout-2和OpenRC。
</abstract>

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->
<license/>

<version>1.6</version>
<date>2008-04-21</date>

<chapter>
<title>背景知识</title>
<section>
<title>什么是baselayout？</title>
<body>

<p>
为了让所有系统能正常得工作，Baselayout提供了一个基础的文件集合，比如<path>/etc/hosts</path>。她也为Gentoo提供了基础的文件系统布局（如目录<path>/etc</path>，<path>/var</path>，<path>/usr</path>，<path>/home</path>）
</p>

</body>
</section>
<section>
<title>什么是OpenRC？</title>
<body>

<p>
OpenRC是一个基于依赖关系的rc系统，可以和系统所提供任何init程序配合运行，一般指的是<path>/sbin/init</path>。但是她<e>不</e>是用来取代<path>/sbin/init</path>的。Gentoo Linux默认使用的init是由<c>sys-apps/sysvinit</c>提供，而Gentoo/FreeBSD则使用由<c>sys-freebsd/freebsd-sbin</c>提供的FreeBSD init。
</p>
</body>
</section>
<section>
<title>那么干嘛要迁移？</title>
<body>

<p>
最初的Gentoo的rc系统是为baselayout-1建立并且完全是由bash写出来的。这里有几个缺陷。比如在启动的时候需要访问某些系统调用，而这样就需要增加基于C的调用。这些调用都是静态连接的，从而会让rc系统随时间的增长而不断膨大。
</p>

<p>
而且，在Gentoo扩展到其他平台如Gentoo/FreeBSD和Gentoo嵌入式之后，就更不可能要求有一个基于bash的rc系统了。所以完全用C写的baselayout-2应运而生，她只需要一个兼容POSIX的shell。在开发baselayout-2的过程中，我们发现把rc系统和仅仅提供基础文件和文件系统布局的baselayout分成不同的包会更好。于是OpenRC诞生了。
</p>

<p>
OpenRC主要由<uri link="http://roy.marples.name/openrc">Roy Marples</uri>开发，她支持Gentoo现在的所有变种（如Gentoo Linux，Gentoo/FreeBSD，Gentoo嵌入式和Gentoo Vserver）以及其他的平台如FreeBSD和NetBSD。
</p>

</body>
</section>
</chapter>

<chapter>
<title>迁移到OpenRC</title>
<section>
<body>

<p>
迁移到OpenRC的过程是比较直接的；你的包管理器在常规升级的时候就已经包括了。重要的是在你安装新的<c>>=sys-apps/baselayout-2</c>和<c>sys-apps/openrc</c>之后的步骤。<e>一定要</e>运行<c>dispatch-conf</c>以确保<path>/etc</path>目录里的文件都已经更新到了最新版本。<brite>不这么做的话系统会无法启动</brite>，那样的话你就需要使用Gentoo LiveCD并按照以下步骤并来修复你的系统。
</p>

<p>
更新完配置文件后，在重启前复查以下几点。
</p>
	
</body>
</section>

<section id="rc_conf">
<title>/etc/conf.d/rc</title>
<body>

<p>
<path>/etc/conf.d/rc</path>文件将不再使用，所有里边的设置需要被迁移到<path>/etc/rc.conf</path>中相应的设置。请通读<path>/etc/rc.conf</path>和<path>/etc/conf.d/rc</path>后再迁移设置。在完成修改后删除文件<path>/etc/conf.d/rc。
</path>
</p>

</body>
</section>

<section id="modules">
<title>内核模块</title>
<body>

<p>
一般情况下，当你想在启动的时候自动加载某些模块的话，就把模块名连同参数一起加入到<path>/etc/modules.autoload.d/kernel-2.6</path>里边。baselayout-2不再用这个文件了。在baselayout-2里，不管内核的版本是多少，自动加载模块和模块参数都被放到了<path>/etc/conf.d/modules</path>文件里边。
</p>

<p>
例子：老式的配置文件
</p>

<pre caption="/etc/modules.autoload.d/kernel-2.6">
ivtv
cx88_dvb video_br=2
</pre>

<p>
转换后应该是这样的：
</p>

<pre caption="/etc/conf.d/modules">
<comment># 启动时自动加载模块列表</comment>
modules_2_6="ivtv cx88_dvb"
<comment># 模块参数</comment>
module_cx88_dvb_args_2_6="video_br=2"
</pre>

<p>
以上例子中，模块以及其参数只会在使用2.6.x系列内核情况下生效。新版本配置文件允
许在针对不同内核版本的情况下对模块和参数进行细致微调。
</p>

<p>
一个更深入的例子：
</p>

<pre caption="一个关于/etc/conf.d/modules的详细例子">
<comment># 不管内核是什么版本，都加载模块ochi1394和ieee1394</comment>
modules="ohci1394 ieee1394"
<comment># 只有在2.6.X系列内核的时候加载tun和usbserial</comment>
modules_2_6="tun usbserial"
<comment># 只有在2.6.23内核时，才加载cx88_dvb</comment>
modules_2_6_23="cx88_dvb"
<comment># 内核版本2.6.23-gentoo-r5才加载ivtv</comment>
modules_2_6_23_gentoo_r5="ivtv"

<comment># 内核版本为2.6.23-gentoo-r5的时候，传递参数video_br=2给内核模块cx88_dvb</comment>
module_cx88_dvb_args_2_6_23_gentoo_r5="video_br=2"
<comment># 2.6.x系列内核的话，传递vendor和product参数给usbserial模块</comment>
module_usbserial_args_2_6="vendor=0x1410 product=0x2110"
<comment># 不管内核是什么版本，传递debug参数给模块ieee1394</comment>
module_ieee1394_args="debug" 
</pre>

<note>
请注意<b>module_</b>和<b>modules_</b>之间的区别。
</note>

</body>
</section>
<section id="boot">
<title>Boot运行级别</title>
<body>

<p>
此<c>boot</c>运行级别为每台机器完成了几个重要的启动步骤。比如，确保你的根文件系统以读写方式挂载，确保你的文件系统已经检查过错误，确保你的挂载点确实存在，还有确保<path>/proc</path>伪文件系统在启动过程中已经挂载。
</p>

<p>
在OpenRC里，默认情况下块储存设备的卷管理服务不再被自动启动。这些卷管理服务包括lvm、raid、swap、device-mapper（dm）、dm-crypt和evms等等。你必须确保这些服务对应的启动脚本确实在<c>boot</c>运行级别里，否则你的系统可能不能正常启动。
</p>

<p>
尽管OpenRC ebuild会尝试帮你完成迁移工作，你还是应该复查一下所有的卷管理服务看看她们是否被正确迁移：
</p>

<pre caption="显示boot运行级别的所有服务">
# <i>ls -l /etc/runlevels/boot/</i>
</pre>

<p>
如果在上面的结果里你没有看到root、procfs、mtab、swap和fsck，请运行下面的命令把她们加入<c>boot</c>运行级别：
</p>

<pre caption="把必需的服务加入boot运行级别">
# <i>rc-update add root boot</i>
# <i>rc-update add procfs boot</i>
# <i>rc-update add mtab boot</i>
# <i>rc-update add fsck boot</i>
# <i>rc-update add swap boot</i>
</pre>

<p>
如果你知道你使用了mdraid，lvm和swap，但是却没在上边结果中看到的话，那你要运行以
下命令把启动脚本增加到<c>boot</c> runlevel中。
</p>

<pre caption="把raid和lvm加入boot运行级别">
# <i>rc-update add raid boot</i>
# <i>rc-update add lvm boot</i>
</pre>

</body>
</section>
<section>
<title>网络</title>
<body>

<p>
因为baselayout和OpenRC被拆分成了两个不同的包，你的net.eth0启动脚本在升级过程中可能消失。请依照下面的步骤来替换这个脚本：
</p>

<pre caption="添加回缺失的net.eth0脚本">
# <i>cd /etc/init.d</i>
# <i>ln -s net.lo net.eth0</i>
</pre>

<p>
如果你还缺失了其他网络启动脚本，请使用上面的命令来把她们添加回来。只需要把<c>eth0</c>替换成你的网络界面的名字即可。
</p>

<p>
还有，<path>/etc/conf.d/net</path>里的配置不再使用bash风格的数组。请查看<path>/usr/share/doc/openrc/net.example</path>以获取配置指令。这个转化应该很简单，以一个静态IP的配置为例：
</p>

<pre caption="旧的/etc/conf.d/net风格">
config_eth0=( "192.168.1.37 netmask 255.255.255.0 brd 192.168.1.255" )
routes_eth0=( "default via 192.168.1.100" )
</pre>

<pre caption="新的/etc/conf.d/net风格">
config_eth0="192.168.1.37 netmask 255.255.255.0 brd 192.168.1.255"
routes_eth0="default via 192.168.1.100"
</pre>

</body>
</section>
<section>
<title>时钟</title>
<body>

<p>
设置时钟的文件不再叫<path>/etc/conf.d/clock</path>了，而是由系统原生的时钟调整工具的名字命名。这就是说Linux下这个文件叫<path>/etc/conf.d/hwclock</path>，而在FreeBSD中叫<path>/etc/conf.d/adjkerntz</path>。<path>/etc/init.d</path>里的启动脚本的名字也相应的改变了，所以请确保她已经在适当的运行级别里了。
</p>

<p>
还有，TIMEZONE变量也不再在这个文件里设置了。应该把这个变量的值写入文件<path>/etc/timezone</path>。如果这个文件不存在，你需要创建这个文件，并在里面写入你的时区。请复查这两个文件并确定她们的正确性。
</p>

<p>
这个文件的正确的值是你的时区相对于此目录<path>/usr/share/zoneinfo</path>的路径。比如，对于居住在中国的人来说，下面的是一个正确的设定。
</p>

<pre caption="/etc/timezone">
Asia/Shanghai
</pre>

</body>
</section>

<section>
<title>XSESSION</title>
<body>

<p>
XSESSION变量也不再在文件<path>/etc/rc.conf</path>中设置了。可以在由<c>x11-apps/xinit</c>提供的文件<path>/etc/env.d/90xsession</path>里设置XSESSION变量。
</p>

<p>
默认是<b>不</b>会迁移这个变量的，所以你需要编辑文件<path>/etc/env.d/90xsession
</path>。
</p>

<impo>
在<path>/etc/env.d</path>里创建文件后必须运行命令<c>env-update</c>然后登出再登录
才能让修改生效。
</impo>

</body>
</section>
<section>
<title>EDITOR／PAGER</title>
<body>

<p>
EDITOR变量也不在<path>/etc/rc.conf</path>里了。EDITOR和PAGER变量的默认值都在/etc/profile里设定。如果你想改变，请在你自己的<path>~/.bashrc</path>（或起同等作用的）文件中设置这两个变量，或者新建一个文件<path>/etc/env.d/99editor</path>并且在里边设置系统默认值。
</p>

<impo>
在<path>/etc/env.d</path>里创建文件后必须运行命令<c>env-update</c>然后登出再登录才能让修改生效。如果是在<path>~/.bashrc</path>里设置变量的话，你可以用命令<c> source ~/.bashrc</c>来使你的改动立即生效。
</impo>

</body>
</section>
<section>
<title>完成</title>
<body>

<p>
在你完成了配置文件和启动脚本的更新后，最后一件事就是<b>重启</b>。这一步是必须的，因为系统状态信息在升级中不会被保留下来，所以你需要重启来达到这个目的。
</p>

</body>
</section>
</chapter>
</guide>
