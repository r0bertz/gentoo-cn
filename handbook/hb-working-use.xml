<?xml version='1.0' encoding='UTF-8'?>
<?xml-stylesheet type="text/xsl" href="/xsl/guide.xsl" ?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/en/handbook/hb-working-use.xml,v 1.46 2006/10/28 09:17:55 neysx Exp $ -->

<sections>

<abstract>
USE标记是Gentoo非常重要的一部分。在本章里，你将学习设定USE标记以及了解USE标记如何影响你的系统构建。
</abstract>

<version>1.36</version>
<date>2007-02-20</date>

<section>
<title>USE标记是什么？</title>
<subsection>
<title>USE标记的指导思想</title>
<body>

<p>
你在安装gentoo（或者是其他发行版，甚至于其他特定操作系统）的时候，你要依据你工作的环境做出选择。
服务器跟工作站的组织结构不同，游戏机跟3D工作站也会不一样。
</p>

<p>
不单只是选择你想要安装的包时如此，选择某一个包需要的特性时同样如此。如果你不需要OpenGL，
为什么还要颇费周折的安装OpenGL并在其他包中加入对OpenGL的支持？如果你不想用KDE，
而且软件包没有KDE也能完美运行，为什么还要在编译这些包的时候加入KDE支持？
</p>

<p>
为了帮用户判断什么需要安装或激活，什么不需要；我们希望用户能用简单的方式设定他们自己的环境。
这能促使用户判断他真正需要的东西，并让Portage（我们的包管理系统）做出有用的决定的过程变得简单。
</p>

</body>
</subsection>
<subsection>
<title>USE标记的设定</title>
<body>

<p>
我们来具体看看USE标记。每一个标记都是代表对某特定概念的支持和依赖关系信息的关键字。
如果你设定了某个USE标记，Portage会明白你选择了支持这个关键字（所代表的概念）。
当然这同时也改变了这个包的依赖关系信息。
</p>

<p>
让我们看一个示例：关键字<c>kde</c>。如果你的<c>USE</c>变量里面没有这个关键字，
所有具有<e>可选</e>KDE支持的包在编译时都<e>不会</e>编译KDE支持。所有具有<e>可选
</e>KDE依赖关系的包在安装时都<e>不会</e>（做为一个依赖关系而）安装KDE库。如果你
设定了<c>kde</c>关键字，这些包在安装时都<e>会</e>编译KDE支持，而且KDE库也会（作
为一个依赖关系而）被安装。
</p>

<p>
通过正确设定关键字，你会得到一个根据你的需要而定制的系统。
</p>

</body>
</subsection>
<subsection>
<title>有哪些USE标记？</title>
<body>

<p>
USE标记分两类：<e>全局</e>和<e>局部</e>USE标记。
</p>

<ul>
  <li>
    <e>全局</e>USE标记适用范围是整个系统，可以被许多包使用。这就是大多数人眼里的USE标记。
  </li>
  <li>
    <e>局部</e>USE标记只被单个包用来做该包特有的决定。
  </li>
</ul>

<p>
当前可用的全局USE标记列表可以在<uri link="/dyn/use-index.xml">网上</uri>或者本机
的<path>/usr/portage/profiles/use.desc</path>文件里找到。
</p>

<p>
当前可用的局部USE标记列表可以在本机的<path>/usr/portage/profiles/use.local.desc
</path>文件里找到。
</p>

</body>
</subsection>
</section>
<section>
<title>使用USE标记</title>
<subsection>
<title>声明永久USE标记</title>
<body>

<p>
希望您已经意识到了USE标记的重要性，现在我们就让你了解怎样声明USE标记。
</p>

<p>
就像前面提到的，所有USE标记都声明在<c>USE</c>变量里面。为了让用户能方便地查找和选择USE标记，我们
提供了一份<e>默认</e>的USE设定。这些设定是我们觉得Gentoo用户通常都要用到的USE标记的集合。这个默认
设置在<path>make.defaults</path>文件──你的profile的一部分──里声明。
</p>

<p>
你的系统使用的profile是符号链接<path>/etc/make.profile</path>所指向的目录。
每个profile叠加于某个更大的profile之上，最终的结果是这些profile的并集。
初始profile是<path>base</path> profile（<path>/usr/portage/profiles/base</path>）。
</p>

<p>
让我们看看2004.3 profile的默认设定：
</p>

<pre caption="2004.3 profile的累积make.defaults USE标记">
<comment>(这个例子是base，default-linux，default-linux/x86和
default-linux/x86/2004.3的设定的并集)</comment>
USE="x86 oss apm arts avi berkdb bitmap-fonts crypt cups encode fortran f77
     foomaticdb gdbm gif gpm gtk imlib jpeg kde gnome libg++ libwww mad
     mikmod motif mpeg ncurses nls oggvorbis opengl pam pdflib png python qt
     quicktime readline sdl spell ssl svga tcpd truetype X xml2 xmms xv zlib"
</pre>

<p>
就像你看到的那样，这个变量已经包括了非常多的关键字。<b>不</b>要通过
修改<path>make.defaults</path>文件里的<c>USE</c>变量来满足你的需要：
在升级Portage的时候，这个文件将会被破坏（被覆盖）。
</p>

<p>
要改变这个默认设置，你需要在<c>USE</c>变量里添加或移去关键字。这是通过
在<path>/etc/make.conf</path>里定义<c>USE</c>全局变量来实现的。在这个变量里，
添加你需要的额外的USE标记，或者移去你不需要的USE标记。后者可通过在标记前面加个
负号（“-”）前缀来实现。
</p>

<p>
例如，要移除对KDE和QT的支持，并添加对ldap的支持，可以在<path>/etc/make.conf
</path>里声明<c>USE</c>如下：
</p>

<pre caption="/etc/make.conf里关于USE设置的一个例子">
USE="-kde -qt3 -qt4 ldap"
</pre>

</body>
</subsection>
<subsection>
<title>为单个包声明USE标记</title>
<body>

<p>
如果你想要为一个（或者几个）程序而不是系统范围内声明一个USE标记，你需要创
建<path>/etc/portage</path>目录（如果没有这个目录的话），然后编
辑<path>/etc/portage/package.use</path>文件。
</p>

<p>
比如说，如果你不想全局的启用<c>berkdb</c>支持，但是你想把它应用到<c>mysql</c>，
你可以这样：
</p>

<pre caption="/etc/portage/package.use示例">
dev-db/mysql berkdb
</pre>

<p>
你当然也可以直接为某一个程序<e>禁用</e>USE标记。比如说，如果你不想要PHP
的<c>java</c>支持：
</p>

<pre caption="/etc/portage/package.use第二个示例">
dev-php/php -java
</pre>

</body>
</subsection>
<subsection>
<title>声明临时USE标记</title>
<body>

<p>
有时，你只想暂时改变一个USE设置。你可以仅仅把USE变量声明成一个环境变量，而不必
两次修改<path>/etc/make.conf</path>。但是要记住，当你重新emerge或者升级这个程序
的时候（不管是单独地还是作为系统升级的一部分），你的修改都会丢失！
</p>

<p>
下面的例子我们将在安装seamonkey的时候暂时性地从USE设置中移去java标记。
</p>

<pre caption="将USE作为一个环境变量使用">
# <i>USE="-java" emerge seamonkey</i>
</pre>

</body>
</subsection>
<subsection>
<title>优先级</title>
<body>

<p>
当然，我们需要一个明确的先后次序来决定何处的USE设定优先级较高。你肯定不希望在定
义了<c>USE="-java"</c>之后，因为某个有更高优先级的设定而导致<c>java</c>仍然被使
用。USE设定的优先级顺序是（由低到高）：
</p>

<ol>
  <li>
    <path>make.defaults</path>里面的USE默认设定
  </li>
  <li>
    用户在<path>/etc/make.conf</path>里面的USE设定
  </li>
  <li>
    用户在<path>/etc/portage/package.use</path>里面的USE设定
  </li>
  <li>
    作为环境变量的USE设定
  </li>
</ol>

<p>
运行<c>emerge --info</c>可以看到Portage识别的最终的<c>USE</c>设定。
它会列出Portage使用的所有相关变量（包括<c>USE</c>变量）。
</p>

<pre caption="运行emerge --info">
# <i>emerge --info</i>
</pre>

</body>
</subsection>
<subsection>
<title>在你的整个系统上应用新的USE标记</title>
<body>

<p>
如果你已经修改了你的USE标记，而且你想用新USE标记更新你的系统，可以使用<c>emerge
</c>的<c>--newuse</c>选项：
</p>

<pre caption="重新构建你的系统">
# <i>emerge --update --deep --newuse world</i>
</pre>

<p>
然后运行Portage的depclean来移除已经安装到你的旧系统里但是在新USE标记中被废除的
条件依赖关系。
</p>

<warn>
运行<c>emerge --depclean</c>是一项危险的操作，必须小心。请反复检查要删除的包的
列表里确定没有你仍然需要的包。下面这个例子里，我们添加了<c>-p</c>选项来depclean
──只列出这些包而不删除他们。
</warn>

<pre caption="删除不需要的包">
# <i>emerge -p --depclean</i>
</pre>

<p>
depclean完成之后，运行<c>revdep-rebuild</c>来重新构建那些动态链接到由可能已经删除的包提供的公共对象的程序。
<c>revdep-rebuild</c>是<c>gentoolkit</c>包的一部分，不要忘了先emerge它。
</p>

<pre caption="运行revdep-rebuild">
# <i>revdep-rebuild</i>
</pre>

<p>
这些都完成之后，你的系统就已经应用上了新的USE标记设定。
</p>

</body>
</subsection>
</section>
<section>
<title>包特有的USE标记</title>
<subsection>
<title>查看可用USE标记</title>
<body>

<p>
让我们以<c>seamonkey</c>来作例子，看看它接收什么USE标记。我们可以以<c>--pretend</c>
和<c>--verbose</c>为选项执行<c>emerge</c>来查看：
</p>

<pre caption="查看使用的USE标记">
# <i>emerge --pretend --verbose seamonkey</i>
These are the packages that I would merge, in order:

Calculating dependencies ...done!
[ebuild   R   ] www-client/seamonkey-1.0.7  USE="crypt gnome java -debug -ipv6
-ldap -mozcalendar -mozdevelop -moznocompose -moznoirc -moznomail -moznopango
-moznoroaming -postgres -xinerama -xprint" 0 kB
</pre>

<p>
<c>emerge</c>并不是做这件事的唯一工具。事实上，我们有一个专门的包信息工具
叫<c>equery</c>，它属于<c>gentoolkit</c>包。所以首先请安装<c>gentoolkit</c>:
</p>

<pre caption="安装gentoolkit">
# <i>emerge gentoolkit</i>
</pre>

<p>
现在以<c>uses</c>为参数执行<c>equery</c>来查看指定包的USE标记。例
如：<c>gnumeric</c>包：
</p>

<pre caption="用equery来查看当前使用的USE标记">
# <i>equery uses =gnumeric-1.6.3 -a</i>
[ Searching for packages matching =gnumeric-1.6.3... ]
[ Colour Code : <comment>set</comment> <i>unset</i> ]
[ Legend        : Left column  (U) - USE flags from make.conf  ]
[               : Right column (I) - USE flags packages was installed with ]
[ Found these USE variables for app-office/gnumeric-1.6.3 ]
 U I
- - <i>debug</i>   : Tells configure and the makefiles to build for debugging.
                     Effects vary across packages, but generally it will at
                     least add -g to CFLAGS.  Remember to set FEATURES=nostrip too 
- - <i>gnome</i>   : Adds GNOME support
+ + <comment>python</comment>   : Adds support/bindings for the Python language
- - <i>static</i>   : !!do not set this during bootstrap!! Causes binaries to be
                     statically linked instead of dynamically
</pre>

</body>
</subsection>
</section>
</sections>
