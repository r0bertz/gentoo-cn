<?xml version='1.0' encoding='UTF-8'?>
<?xml-stylesheet type="text/xsl" href="/xsl/guide.xsl" ?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/en/handbook/hb-install-system.xml,v 1.104 2006/11/02 09:50:33 neysx Exp $ -->

<sections>

<abstract>
安装并配置完stage3以后，你就会有一个可用的Gentoo基本系统了。这一章将教你如何达
到这一状态。
</abstract>

<version>7.5</version>
<date>2006-11-01</date>

<section>
<title>Chroot</title>
<subsection>
<title>可选：选择境像站点</title>
<body>

<p>
为了快速下载源代码，建议你选择一个速度快的境像站点。Portage将
在<path>make.conf</path>中查找并使用GENTOO_MIRRORS变量定义的境像列表。你也可以浏
览我们的<uri link="/main/en/mirrors.xml">镜像列表</uri>来寻找一个或者多个离你最
近的镜像（通常它们是最快的），不过我们提供了一个不错的工具来帮助你选择境像，它
叫<c>mirrorselect</c>。
</p>
  
<pre caption="使用mirrorselect更新GENTOO_MIRRORS变量">
# <i>mirrorselect -i -o &gt;&gt; /mnt/gentoo/etc/make.conf</i>
</pre>

<warn>
不要选择任何IPv6的境像。我们的stage目前还不支持IPv6。
</warn>

<p>
另一个重要的设置就是<path>make.conf</path>里的SYNC设置。这个变量包含你更
新Portage树（Portage下载和安装软件时需要用到的ebuild和脚本等信息的集合）时用到的
rsync服务器信息。虽然你可以手动输入一个SYNC服务器地址，不过还是
让<c>mirrorselect</c>来帮你完成更加的方便：
</p>

<pre caption="使用mirrorselect选择rsync镜像站点">
# <i>mirrorselect -i -r -o &gt;&gt; /mnt/gentoo/etc/make.conf</i>
</pre>

<p>
运行完<c>mirrorselect</c>以后，最好自己再检查一
下<path>/mnt/gentoo/etc/make.conf</path>里的设置！
</p>

</body>
</subsection>
<subsection>
<title>拷贝DNS信息</title>
<body>

<p>
在我们进入新环境之前，还有一件事需要完成，那就是
从<path>/etc/resolv.conf</path>拷贝DNS信息。这一步可以保证你在进入新的系统环境后
还可以继续使用网络。<path>/etc/resolv.conf</path>包含了你网络里的域名服务器。
</p>

<pre caption="拷贝DNS信息">
<comment>（参数"-L"是必须的，用来确保我们拷贝的不是一个符号链接）</comment>
# <i>cp -L /etc/resolv.conf /mnt/gentoo/etc/resolv.conf</i>
</pre>

</body>
</subsection>
<subsection>
<title>挂载/proc和/dev文件系统</title>
<body>

<p>
将<path>/proc</path>文件系统挂载到<path>/mnt/gentoo/proc</path>，这样chroot后的
环境里安装时也可以获取内核提供的相关信息，然后以bind方式挂载<path>/dev</path>文
件系统。
</p>

<pre caption="挂载/proc和/dev">
# <i>mount -t proc none /mnt/gentoo/proc</i>
# <i>mount -o bind /dev /mnt/gentoo/dev</i>
</pre>

</body>
</subsection>
<subsection>
<title>进入新的系统环境</title>
<body>

<p>
现在所有的分区都已经被初始化，基本环境也已安装完毕，现在是到了该
用<e>chroot</e>进入新安装环境的时候了。这意味着我们从当前安装环境（安装光盘或者其
他安装介质）切换到你安装的系统里（也就是被初始化的分区）。
</p>

<p>
完成chroot有三步。首先我们用<c>chroot</c>把根文件系统从<path>/</path>（安装介质
里）切换到<path>/mnt/gentoo</path>（在你的分区里）。然后我们使
用<c>env-update</c>来建立新的环境，也就是创建新的环境变量。最后我们
用<c>source</c>加载这些变量。
</p>

<pre caption = "chroot到新环境里">
# <i>chroot /mnt/gentoo /bin/bash</i>
# <i>env-update</i>
>> Regenerating /etc/ld.so.cache...
# <i>source /etc/profile</i>
# <i>export PS1="(chroot) $PS1"</i>
</pre>

<p>
祝贺你！你现在已经在你自己的Gentoo Linux环境里了。当然这离安装完成还有段时间，因
为我们可以看到安装指南还剩下很多章节呢 :-)
</p>

</body>
</subsection>
</section>

<section>
<title>配置Portage</title>
<subsection>
<title>更新Portage树</title>
<body>

<p>
你现在应该更新你的Portage树到最新版本。执行<c>emerge --sync</c>。
</p>

<pre caption="更新Portage树">
# <i>emerge --sync</i>
<comment>(如果你在使用一个慢速终端比如一些帧缓冲或者是串口的控制台，你可以添加--quiet选项来加速这个过程:)
</comment>
# <i>emerge --sync --quiet</i>
</pre>

<p>
如果你网络前面的防火墙的配置使得rsync请求被阻挡的话，你可以使
用<c>emerge-webrsync</c>下载和安装一个最新的portage快照。
</p>

<p>
如果系统警告你有一个新版本的Portage可用，你可以
使用<c>emerge portage</c>来更新它。</p>

</body>
</subsection>
<subsection>
<title>选择正确的Profile</title>
<body>

<p>
首先，我们看一下一些小的定义。
</p>

<p>
profile是每个Gentoo系统的构造块。它不仅指定了CHOST、CFLAGS以及其他重要变量的默认
值，它还把系统可用的软件版本锁定在某个范围。而这些都是由Gentoo的开发者来维护的。
</p>

<p test="contains('Alpha x86', func:keyval('arch'))">
以前，这个profile很少被用户接触到。然而<keyval id="arch"/>用户可以在两个profile
中选择，一个是2.4版本的内核，一个是2.6版本的内核。这样做是为了加强对2.6内核的可整合性。
</p>

<p test="contains('AMD64 arm HPPA IA64 MIPS PPC PPC64 SPARC', func:keyval('arch'))">
以前，这个profile很少会有用户接触到。然而，有些情况下你可以决定需不需要修改profile。
</p>

<p>
你可以用下面的命令来查看当前使用的profile：
</p>

<pre caption="验证系统profile">
# <i>ls -FGg /etc/make.profile</i>
lrwxrwxrwx  1 48 Apr  8 18:51 /etc/make.profile -> ../usr/portage/profiles/default-linux/x86/2006.1/
</pre>

<p>
默认的profile会提供给你一个基于2.6版本内核的Linux系统。这是默认推荐的，但是你也
可以选择另外一个profile。
</p>

<p>
系统也为某些架构提供了可用的<c>desktop</c>和<c>server</c>的子profile。请查看一下
是否可以在<path>2006.1/</path>profile里面找到这两个子profile。你也许想看一
下<c>desktop</c> profile的<path>make.defaults</path>是否适合你的需要。
</p>

<p test="func:keyval('arch')='AMD64'">
如果你想要一个纯64位的环境，而不需要32位应用程序和库，你应该使用non-multilib profile：
</p>

<pre test="func:keyval('arch')='AMD64'" caption="切换到non-multilib profile">
# <i>ln -snf /usr/portage/profiles/default-linux/amd64/2006.1/no-multilib /etc/make.profile</i>
</pre>

<p>
有一些用户想要安装一个基于旧的2.4版本内核profile的系统。如果你确实想要这么做，请
先检查一下是否有额外的profile存在。在x86硬件架构上，我们可用用下面的命令来做：
</p>

<pre caption="找出是否还有额外的profile存在">
# <i>ls -d /usr/portage/profiles/default-linux/x86/no-nptl/2.4</i>
/usr/portage/profiles/default-linux/x86/no-nptl/2.4
</pre>

<p>
上面的例子显示出有额外的2.4 profile存在（比如:它没有抱怨说找不到文件或者目录）。
尽管我们推荐你使用默认的，但是如果你想要切换到另一个，你可以照下面的做：
</p>

<pre caption="切换到一个2.4的profile">
<comment>（确定你使用了正确的架构，下面的例子用的是x86）</comment>
# <i>ln -snf /usr/portage/profiles/default-linux/x86/no-nptl/2.4 /etc/make.profile</i>
<comment>（列出2.4 profile里的文件）</comment>
# <i>ls -FGg /etc/make.profile/</i>
total 12
-rw-r--r--  1 939 Dec 10 14:06 packages
-rw-r--r--  1 347 Dec  3  2004 parent
-rw-r--r--  1 573 Dec  3  2004 virtuals
</pre>

<p test="func:keyval('arch')='PPC'">
对于ppc，2006.1提供了几个新的profile：
</p>

<pre test="func:keyval('arch')='PPC'" caption="PPC Profiles PPC的Profile">
<comment>（通用的PPC profile，适用于所有的PPC机器，最精简的）</comment>
# <i>ln -snf /usr/portage/profiles/default-linux/ppc/ppc32/2006.1 /etc/make.profile</i>
<comment>（G3 profile）</comment>
# <i>ln -snf /usr/portage/profiles/default-linux/ppc/ppc32/2006.1/G3 /etc/make.profile</i>
<comment>（G3 Pegasos profile）</comment>
# <i>ln -snf /usr/portage/profiles/default-linux/ppc/ppc32/2006.1/G3/Pegasos/ /etc/make.profile</i>
<comment>（G4 (Altivec) profile）</comment>
# <i>ln -snf /usr/portage/profiles/default-linux/ppc/ppc32/2006.1/G4 /etc/make.profile</i>
<comment>（G4 (Altivec) Pegasos profile）</comment>
# <i>ln -snf /usr/portage/profiles/default-linux/ppc/ppc32/2006.1/G4/Pegasos/ /etc/make.profile</i>
</pre>

<p test="func:keyval('arch')='PPC64'">
对于ppc64,2006.1提供了几个新的profile：
</p>

<pre test="func:keyval('arch')='PPC64'" caption="PPC64 Profiles">
<comment>（一般的64位用户层的PPC64的profile，适用于所有PPC64的机器）</comment>
# <i>ln -snf /usr/portage/profiles/default-linux/ppc/ppc64/2006.1/64bit-userland /etc/make.profile</i>
<comment>（一般的32位用户层的PPC64的profile，适用于所有PPC64的机器）</comment>
# <i>ln -snf /usr/portage/profiles/default-linux/ppc/ppc64/2006.1/32bit-userland /etc/make.profile</i>
<comment>（每个类型的用户层都有相应的子profile，通过把(userland)替换成上面提到的用户层的名称来选择它们）
</comment>
<comment>（JS20对应的970 profile）</comment>
# <i>ln -snf /usr/portage/profiles/default-linux/ppc/ppc64/2006.1/(userland)/970 /etc/make.profile</i>
<comment>（G5 profile）</comment>
# <i>ln -snf /usr/portage/profiles/default-linux/ppc/ppc64/2006.1/(userland)/970/pmac /etc/make.profile</i>
<comment>（POWER3 profile）</comment>
# <i>ln -snf /usr/portage/profiles/default-linux/ppc/ppc64/2006.1/(userland)/power3 /etc/make.profile</i>
<comment>（POWER4 profile）</comment>
# <i>ln -snf /usr/portage/profiles/default-linux/ppc/ppc64/2006.1/(userland)/power4 /etc/make.profile</i>
<comment>（POWER5 profile）</comment>
# <i>ln -snf /usr/portage/profiles/default-linux/ppc/ppc64/2006.1/(userland)/power5 /etc/make.profile</i>
<comment>（这个发行版本里的multilib profile目前还不稳定。）</comment>
</pre>

</body>
</subsection>
<subsection id="configure_USE">
<title>配置USE变量</title>
<body>

<p>
<c>USE</c>是Gentoo为用户提供的最具威力的变量之一。很多程序通过它可以选择编译或者
不编译某些可选的支持。例如，一些程序可以在编译时加入对gtk或是对qt的支持。其它的
程序可以在编译时加入或不加入对于SLL的支持。有些程序甚至可以在编译时加入对帧缓冲
的支持（svgalib）以取代X11（X服务器）。
</p>

<p>
大多数的发行版会使用尽可能多的支持特性编译它们的软件包，这既增加了软件的大小也减
慢了启动时间，而这些还没有算上可能会涉及到的大量依赖性问题。Gentoo可以让你自己定
义软件编译的选项，而这正是<c>USE</c>要做的事。
</p>

<p>
在<c>USE</c>变量里你可以定义关键字，它被用来对应相应的编译选项。
比如，<e>ssl</e>会让程序在它编译时加入对它的支持。<e>-X</e>会移除其对于X服务器的
支持（注意前面的减号）。<e>gnome gtk -kde -qt3 -qt4</e>将会在你编译软件的时候添
加对gnome（和gtk）的支持，并且移除对kde（和qt）的支持，这可以让你的系统尽可能多
的为GNOME做优化。
</p>

<p>
默认的<c>USE</c>设置位于你profile的<path>make.defaults</path>文件里。你可以在符
号连接<path>/etc/make.profile</path>所指向的目录里找
到<path>make.defaults</path>文件。默认的<c>USE</c>设置是所
有<path>make.defaults</path>文件里<c>USE</c>的集合。所有你放
在<path>/etc/make.conf</path>里的<c>USE</c>都会根据默认设置重新计算。如果你添加
了一些<c>USE</c>的设置，它会被增加到默认的列表里。如果你删除了一些<c>USE</c>设置
（通过放一个减号到它前面），它将被从默认的列表里移除（如果它确实在默认列表里的话
）。<e>绝对不</e>要改变<path>/etc/make.profile</path>目录里的任何东西，它会在你
更新Portage的时候被覆盖掉！
</p>

<p>
关于<c>USE</c>的详解你可以在Gentoo手册的第二部
分，<uri link="?part=2&amp;chap=2">USE标记</uri>里找到。对于USE标记的详细介绍可
以查看你的系统里<path>/usr/portage/profiles/use.desc</path>。
</p>

<pre caption="查看可用的USE标记">
# <i>less /usr/portage/profiles/use.desc</i>
<comment>（你可用用方向键来滚动，按'q'键退出）</comment>
</pre>

<p>
作为一个例子，我们展示一个基于KDE的系统并带有DVD、ALSA以及光盘刻录支持
的<c>USE</c>设置：
</p>

<pre caption="打开/etc/make.conf">
# <i>nano -w /etc/make.conf</i>
</pre>

<pre caption="USE设置">
USE="-gtk -gnome qt3 qt4 kde dvd alsa cdr"
</pre>

</body>
</subsection>
<subsection>
<title>可选：GLIBC Locales</title>
<body>

<p>
在你的系统里可能只会用到一个或两个locale。你可用<path>/etc/locale.gen</path>来
指定locale。
</p>

<pre caption="打开/etc/locale.gen">
# <i>nano -w /etc/locale.gen</i>
</pre>

<p>
下面这个例子中的locale同时支持英语（美国）和德语（德国）并带有字符集格式（比如UTF-8）的支持。
</p>

<pre caption="指定你的locale">
en_US ISO-8859-1
en_US.UTF-8 UTF-8
de_DE ISO-8859-1
de_DE@euro ISO-8859-15
</pre>

<p>
下一步我们运行<c>locale-gen</c>。它会产生所有你指定的
位于<path>/etc/locale.gen</path>文件里的locale。
</p>

<note>
<c>locale-gen</c>在<c>glibc-2.3.6-r4</c>以及被它更新的版本里提供。如果你在使用一
个旧版本的glibc，你应该现在就升级它。
</note>

<p>
现在我们继续<uri link="?part=1&amp;chap=7">配置内核</uri>。
</p>

</body>
</subsection>
</section>
</sections>
