<?xml version='1.0' encoding='UTF-8'?>
<?xml-stylesheet type="text/xsl" href="/xsl/guide.xsl" ?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/en/handbook/hb-install-config.xml,v 1.94 2006/11/28 07:40:38 nightmorph Exp $ -->

<sections>

<abstract>
你需要编辑一些重要的配置文件。在这一章中将对这些重要的配置文件作概述，并且介绍如何配置它们。
</abstract>

<version>8.2</version>
<date>2007-06-02</date>

<section>
<title>文件系统信息</title>
<subsection>
<title>fstab是什么？</title>
<body>

<p>
在Linux系统下，系统所用到的所有分区都必须在<path>/etc/fstab</path>文件中指明。这个文件包含了这些分区的挂载点（在系统目录树中的位置）、挂载方法和特殊挂载选项（是否自动挂载，是否可以用户挂载等）。
</p>

</body>
</subsection>
<subsection>
<title>创建/etc/fstab</title>
<body>

<p>
<path>/etc/fstab</path>使用一种特殊语法格式。每行都包含六个字段。这些字段之间由空白键（空格键，tab键，或者两者混合使用）分隔。每个字段都有自己的含意：
</p>

<ul>
<li>
  第一个字段是对<b>分区</b>的描述，也就是设备文件的路径
</li>
<li>
  第二个字段是分区<b>挂载点</b>，也就是分区应该挂载到的地方
</li>
<li>
  第三个字段给出分区所用的<b>文件系统</b>
</li>
<li>
  第四个字段给出的是挂载分区时<c>mount</c>命令所用的<b>挂载选项</b>。由于每个
  文件系统都有自己的挂载选项，我们建议你阅读mount手册（<c>man mount</c>）以获得
  所有挂载选项的列表。多个挂载选项之间是用逗号分隔的。
</li>
<li>
  第五个字段是给<c>dump</c>使用的，用以决定这个分区是否需要<b>dump</b>。
  一般情况下，你可以把该字段设为<c>0</c>（零）。
</li>
<li>
  第六个字段是给<c>fsck</c>使用的，用以决定系统非正常关机之后文件系统的检查
  顺序。根文件系统应该为<c>1</c>，而其它的应该为<c>2</c>（如果不需要
  文件系统自检的话可以设为<c>0</c>）。
</li>
</ul>

<impo>
Gentoo系统默认的<path>/etc/fstab</path>文件<e>不是有效的fstab文件</e>。你必须创建自己的<path>/etc/fstab</path>。
</impo>

<pre caption="打开/etc/fstab">
# <i>nano -w /etc/fstab</i>
</pre>

</body>
<body test="func:keyval('/boot')">

<p>
让我们看看<path>/boot</path>分区的挂载选项是怎么写的。这仅仅是个例子，如果你没有或者不能创建<path>/boot</path>，请不要复制它。
</p>

<p test="contains(func:keyval('/boot'), '/dev/hd')">
在我们默认的<keyval id="arch"/>分区例子中，<path>/boot</path>通常是指
<path><keyval id="/boot"/></path>分区（如果使用的是SCSI或者SATA设备的话，设备文
件就会是<path>/dev/sda*</path>），文件系统类型通常采用<c>ext2</c>格式。由于这个
分区在系统引导的时候需要检测，所以我们可以这样写：
</p>

<p test="contains(func:keyval('/boot'), '/dev/sd')">
在我们默认的<keyval id="arch"/>分区例子中，<path>/boot</path>一般
为<path><keyval id="/boot"/></path>分区，且采用<e>ext2</e>文件系统。
这个分区在引导过程中需要自检，因此我们这样写：
</p>

<pre caption="/etc/fstab中/boot行的一个例子">
<keyval id="/boot"/>   /boot     ext2    defaults        1 2
</pre>

<p>
为了提高系统的安全性，一部分用户不希望<path>/boot</path>分区自动挂载。这些用户应该用<c>noauto</c>替换<c>defaults</c>。这就表示用户每次使用该分区时，需要手动挂载。
</p>

</body>
<body>

<p test="not(func:keyval('arch')='SPARC')">
增加符合你分区方案的规则，为<path>/proc</path>、<c>tmpfs</c>和你的光驱
（当然，如果你有其他分区或者驱动器，也为它们加上）添加挂载规则。
</p>

<p test="func:keyval('arch')='SPARC'">
增加符合你分区方案的规则，为<path>/proc/openprom</path>、<path>/proc</path>、
<c>tmpfs</c>和你的光驱（当然，如果你有其他分区或者驱动器，也为它们加上）
添加挂载规则。
</p>

<p>
现在就参考以下<e>例子</e>创建你的<path>/etc/fstab</path>：
</p>

<pre caption="/etc/fstab的一个完整例子" test="func:keyval('arch')='AMD64' or func:keyval('arch')='x86'">
<keyval id="/boot"/>   /boot        ext2    defaults,noatime     1 2
/dev/hda2   none         swap    sw                   0 0
/dev/hda3   /            ext3    noatime              0 1

proc        /proc        proc    nodev,nosuid,noexec  0 0
shm         /dev/shm     tmpfs   nodev,nosuid,noexec  0 0

/dev/cdrom  /mnt/cdrom   auto    noauto,user          0 0
</pre>

<pre caption="/etc/fstab的一个完整例子" test="func:keyval('arch')='HPPA'">
<keyval id="/boot"/>   /boot        ext2    defaults,noatime     1 2
/dev/sda3   none         swap    sw                   0 0
/dev/sda4   /            ext3    noatime              0 1

proc        /proc        proc    nodev,nosuid,noexec  0 0
shm         /dev/shm     tmpfs   nodev,nosuid,noexec  0 0

/dev/cdrom  /mnt/cdrom   auto    noauto,user          0 0
</pre>

<pre caption="/etc/fstab的一个完整例子" test="func:keyval('arch')='Alpha' or func:keyval('arch')='MIPS'">
<keyval id="/boot"/>   /boot        ext2    defaults,noatime     1 2
/dev/sda2   none         swap    sw                   0 0
/dev/sda3   /            ext3    noatime              0 1

proc        /proc        proc    nodev,nosuid,noexec  0 0
shm         /dev/shm     tmpfs   nodev,nosuid,noexec  0 0

/dev/cdrom  /mnt/cdrom   auto    noauto,user          0 0
</pre>

<pre caption="/etc/fstab的一个完整例子" test="func:keyval('arch')='SPARC'">
/dev/sda1   /               ext3        noatime              0 1
/dev/sda2   none            swap        sw                   0 0
/dev/sda4   /usr            ext3        noatime              0 2
/dev/sda5   /var            ext3        noatime              0 2
/dev/sda6   /home           ext3        noatime              0 2

openprom    /proc/openprom  openpromfs  defaults             0 0
proc        /proc           proc        nodev,nosuid,noexec  0 0
shm         /dev/shm        tmpfs       nodev,nosuid,noexec  0 0

/dev/cdrom  /mnt/cdrom      auto        noauto,user          0 0
</pre>

<note test="func:keyval('arch')='PPC'">
不同型号的PPC机器之间差别是很大的。请务必你根据自己的系统改写以下的例子。
</note>

<pre caption="/etc/fstab的一个完整例子" test="func:keyval('arch')='PPC'">
/dev/hda4   /            ext3    noatime              0 1
/dev/hda3   none         swap    sw                   0 0

proc        /proc        proc    nodev,nosuid,noexec  0 0
shm         /dev/shm     tmpfs   nodev,nosuid,noexec  0 0

/dev/cdrom  /mnt/cdrom   auto    noauto,user          0 0
</pre>

<pre caption="/etc/fstab的一个完整例子" test="func:keyval('arch')='PPC64'">
/dev/sda4   /            ext3    noatime              0 1
/dev/sda3   none         swap    sw                   0 0

proc        /proc        proc    nodev,nosuid,noexec  0 0
shm         /dev/shm     tmpfs   nodev,nosuid,noexec  0 0

/dev/cdrom  /mnt/cdrom   auto    noauto,user          0 0
</pre>

<p>
<c>auto</c>选项可以使<c>mount</c>猜测文件系统（推荐对于可移动设备采用这个选项，因为它们可能采用很多不同的文件系统），而<c>user</c>选项使得非root用户可以挂载光驱。
</p>

<p>
为了提高性能，大部分用户会添加<c>noatime</c>挂载选项。由于不记录该分区中文件的访问时间（一般来说你并不需要知道它），这个选项能够提高系统速度。
</p>

<p>
请再次确认你的<path>/etc/fstab</path>文件是正确的，保存并退出，继续下面的内容。
</p>

</body>
</subsection>
</section>
<section>
<title>网络信息</title>
<subsection>
<title>主机名、域名等</title>
<body>

<p>
用户必须要做的事情之一就是命名自己的机器。尽管这看上去很容易，但是<e>很多</e>用户觉得为他们的Linux机器起一个合适的名字是很难的。为了加快事情的进度，你应该知道你所命名的所有名字都是可以在今后重新修改的。因此，你可以简单命名你的系统为<c>tux</c>，域名为<c>homenetwork</c>。
</p>

<pre caption="设定主机名">
# <i>nano -w /etc/conf.d/hostname</i>

<comment>（将HOSTNAME的变量值设定为主机名）</comment>
HOSTNAME="<i>tux</i>"
</pre>

<p>
第二，<e>如果</e>你需要一个域名，在<path>/etc/conf.d/net</path>中设定。只有你的ISP或者网络管理员说你需要一个域名，或者你有一个DNS服务器但是没有DHCP服务器的时候，你才需要域名。如果你的网络是DHCP分配IP，那么你不需要理会DNS和域名的问题。
</p>

<pre caption="设定域名">
# <i>nano -w /etc/conf.d/net</i>

<comment>（设定dns_domain的变量值为你的域名）</comment>
dns_domain_lo="<i>homenetwork</i>"
</pre>

<note>
如果你选择不设定域名，你可以去掉登录界面上的这条信息“This is hostname.(none)”。你只需要修改<path>/etc/issue</path>，把字符串<c>.\O</c>从该文件里删掉即可。
</note>

<p>
如果你有一个NIS域（如果你不知道这是什么，就说明你没有），你也需要定义一个：
</p>

<pre caption="设定NIS域名">
# <i>nano -w /etc/conf.d/net</i>

<comment>（设定nis_domain的变量值为你的NIS域名）</comment>
nis_domain_lo="<i>my-nisdomain</i>"
</pre>

<note>
如果想知道更多关于DNS和NIS配置的信息，可以看<path>/etc/conf.d/net.example</path>当中的例子。当然，你也可以安装<c>resolvconf-gentoo</c>来帮助设置DNS、NIS。
</note>

</body>
</subsection>
<subsection>
<title>配置你的网络</title>
<body>

<p>
在准备说“嘿，我们已经配置过网络”之前，你应该记得在开始安装Gentoo之初所设置的网络配置是仅仅为了安装而设置的。现在你所要设置的是Gentoo系统的永久网络配置。
</p>

<note>
更多关于网络配置的详细信息，包括网卡绑定、网桥、802.1Q VLANs和无线网络在内的高级配置会在<uri link="?part=4">Gentoo网络配置</uri>这一部分介绍.
</note>

<p>
<path>/etc/conf.d/net</path>当中收集了所有的网络信息。尽管这个文件采用直接易懂的语法，如果你还是因为觉得不够直观而完全不知道如何手动进行网络配置的话，请不用担心，我们将一一解释。在<path>/etc/conf.d/net.example</path>中有一个详细注释过的例子，它涵盖了许多种类不同的配置。
</p>

<p>
系统默认为DHCP。如果要采用DHCP的话，你需要安装一个DHCP客户端。这个将在稍后的<uri link="?part=1&amp;chap=9#networking-tools">安装必要的系统工具</uri>部分介绍。但是不要忘记安装一个DHCP客户端。
</p>

<p>
如果你需要配置你的网络连接，不管是因为你是需要指定DHCP选项还是你根本不想采用DHCP，请使用你喜欢的编辑器（在这个例子中用的是<c>nano</c>）打开<path>/etc/conf.d/net</path>：
</p>

<pre caption="打开/etc/conf.d/net准备编辑">
# <i>nano -w /etc/conf.d/net</i>
</pre>

<p>
你会看到以下的文件:
</p>

<pre caption="默认的/etc/conf.d/net">
# This blank configuration will automatically use DHCP for any net.*
# scripts in /etc/init.d.  To create a more complete configuration,
# please review /etc/conf.d/net.example and save your configuration
# in /etc/conf.d/net (this file :]!).
</pre>

<p>
为了输入你自己的IP地址，子网掩码和网关，你需要设置<c>config_eth0</c>和<c>routes_eth0</c>：
</p>

<pre caption="手动为eth0设置IP信息">
config_eth0=( "192.168.0.2 netmask 255.255.255.0 brd 192.168.0.255" )
routes_eth0=( "default via 192.168.0.1" )
</pre>

<p>
如果你使用DHCP并且想设定DHCP选项，请定义一下<c>config_eth0</c>和<c>dhcp_eth0</c>:
</p>

<pre caption="让eth0自动获得IP地址">
config_eth0=( "dhcp" )
dhcp_eth0="nodns nontp nonis"
</pre>

<p>
请阅读<path>/etc/conf.d/net.example</path>以得到所有选项的列表。
</p>

<p>
如果你有多个网络接口，那么重复之前对于<c>config_eth1</c>、<c>config_eth2</c>等的操作步骤。
</p>

<p>
现在可以保存配置并且退出，继续下面的安装和配置。
</p>

</body>
</subsection>
<subsection>
<title>在启动时自动启用网络</title>
<body>

<p>
为了在启动时自动激活网络接口，你必须添加这些到default运行级别。
</p>

<pre caption="添加net.eth0到默认的运行级别">
# <i>rc-update add net.eth0 default</i>
</pre>

<p>
如果你有多个网络接口，你需要为他们创建合适的<path>net.eth1</path>、<path>net.eth2</path>等启动脚本。你可以用<c>ln</c>来做这个。
</p>

<pre caption="创建额外的启动脚本">
# <i>cd /etc/init.d</i>
# <i>ln -s net.lo net.eth1</i>
# <i>rc-update add net.eth1 default</i>
</pre>

</body>
</subsection>
<subsection>
<title>记下网络信息</title>
<body>

<p>
现在你需要告诉Linux有关你的网络的信息。这需要在<path>/etc/hosts</path>文件中定义，它将帮助你将那些无法被域名解析器解析的主机名解析成IP地址。你需要定义你自己的系统。如果你不想启用内部DNS系统的话，你也需要定义内部网络上的其它系统。
</p>

<pre caption="打开/etc/hosts">
# <i>nano -w /etc/hosts</i>
</pre>

<pre caption="填入网络信息">
<comment>（这里定义的是现在的系统）</comment>
127.0.0.1     tux.homenetwork tux localhost

<comment>（定义你网络上的其它系统。如果你要用这种方式进行定义的话,它们必须有静
态IP。）</comment>
192.168.0.5   jenny.homenetwork jenny
192.168.0.6   benny.homenetwork benny
</pre>

<p>
保存并且退出编辑器，继续下面的过程。
</p>

<p test="func:keyval('arch')='AMD64' or func:keyval('arch')='x86' or substring(func:keyval('arch'),1,3)='PPC'">
如果你没有PCMCIA，你可以跳过以下内容进入<uri link="#sysinfo">系统信息</uri>了。
PCMCIA用户应该读一下以下关于PCMCIA的内容。
</p>

</body>
</subsection>
<subsection test="func:keyval('arch')='AMD64' or func:keyval('arch')='x86' or substring(func:keyval('arch'),1,3)='PPC'">
<title>可选：启用PCMCIA</title>
<body>

<p>
PCMCIA用户首先应该安装<c>pcmciautils</c>软件包。
</p>

<pre caption="安装pcmciautils">
# <i>emerge pcmciautils</i>
</pre>

</body>
</subsection>
</section>

<section id="sysinfo">
<title>系统信息</title>
<subsection>
<title>Root密码</title>
<body>

<p>
首先我们键入以设置root密码：
</p>

<pre caption="设置root密码">
# <i>passwd</i>
</pre>

</body>
</subsection>
<subsection>
<title>系统信息</title>
<body>

<p>
Gentoo使用<path>/etc/rc.conf</path>来做通用的、系统级的配置。打开<path>/etc/rc.conf</path>并好好读读这个文件中的注解：）
</p>

<pre caption="打开/etc/rc.conf">
# <i>nano -w /etc/rc.conf</i>
</pre>

<p>
当你完成对<path>/etc/rc.conf</path>的配置后，保存并退出。
</p>

<p>
正如你所看到的，为了帮助你完成必要变量的配置，这个文件有丰富的注释信息。你可以让你的系统使用unicode并定义你的默认编辑器和你的显示管理器（比如gdm或者kdm）。
</p>

<p>
Gentoo用<path>/etc/conf.d/keymaps</path>来处理键盘设置。编辑它就可以设置你的键盘。
</p>

<pre caption="打开/etc/conf.d/keymaps">
# <i>nano -w /etc/conf.d/keymaps</i>
</pre>

<p>
<c>KEYMAP</c>这个变量要特别注意。如果你选择了错误的<c>KEYMAP</c>，在你敲击键盘的时候会有奇怪的结果。
</p>

<note test="substring(func:keyval('arch'),1,3)='PPC'">
PPC在大部分系统中都采用x86键映射。如果用户希望在启动的时候就能采用ADB键映射，
那么应该在内核中启用ADB keycode sending，
并且在<path>/etc/conf.d/keymaps</path>中设置一个mac/ppc键映射。
</note>

<p>
完成<path>/etc/conf.d/keymaps</path>的配置之后，保存并退出。
</p>

<p>
Gentoo使用<path>/etc/conf.d/clock</path>来设置时钟选项。根据你的需要来编辑它。
</p>

<pre caption="打开/etc/conf.d/clock">
# <i>nano -w /etc/conf.d/clock</i>
</pre>

<p>
如果你机器上的钟不用UTC，你需要在文件钟加上<c>CLOCK="local"</c>。否则，你的时钟就有可能出现偏差。
</p>

<p>
完成对<path>/etc/conf.d/clock</path>的配置后，保存并且退出。
</p>

<p test="not(func:keyval('arch')='PPC64')">
请继续阅读<uri link="?part=1&amp;chap=9">安装必要的系统工具</uri>。
</p>

</body>
</subsection>
<subsection test="func:keyval('arch')='PPC64'">
<title>配置控制台</title>
<body>

<p>
如果你使用虚拟控制台，就必须将<path>/etc/inittab</path>中的对应内容解除注释，以使得虚拟控制台生成登陆提示。
</p>

<pre caption="开通/etc/inittab中的hvc和hvsi支持">
hvc0:12345:respawn:/sbin/agetty -L 9600 hvc0
hvsi:12345:respawn:/sbin/agetty -L 19200 hvsi0
</pre>

<p>
你需要确认是否需要的控制台都已经列在<path>/etc/securetty</path>当中了。
</p>

<p>
你应该把timezone定义为你之前复制成<path>/etc/localtime</path>的时区，这样<c>sys-libs/timezone-data</c>的升级将会自动升级<path>/etc/localtime</path>。比如，如果你使用GMT时区，你应该加上<c>TIMEZONE="GMT"</c>。
</p>

<p>
你现在可以继续进行<uri link="?part=1&amp;chap=9">安装必要的系统工具</uri>这部分了。
</p>

</body>
</subsection>
</section>
</sections>
