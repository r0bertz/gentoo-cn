<?xml version='1.0' encoding='UTF-8'?>
<?xml-stylesheet type="text/xsl" href="/xsl/guide.xsl" ?>
<!DOCTYPE sections SYSTEM "/dtd/book.dtd">

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->

<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/en/handbook/hb-working-variables.xml,v 1.22 2006/10/28 09:17:55 neysx Exp $ -->

<sections>

<abstract>
使用Gentoo你可以很容易地管理系统的环境变量。本章将教你如何去做，并描述一些常用的变量。
</abstract>

<version>1.16</version>
<date>2007-05-18</date>

<section>
<title>环境变量？</title>
<subsection>
<title>什么是环境变量</title>
<body>

<p>
环境变量是一个具有特定名字的对象，它包含了一个或者多个应用程序所将使用到的信息。许多用户（特别是那些刚接触Linux的新手）发现这些变量有些怪异或者难以控制。其实，这是个误会：通过使用环境变量，你可以很容易的修改一个牵涉到一个或多个应用程序的配置信息。
</p>

</body>
</subsection>
<subsection>
<title>重要的例子</title>
<body>

<p>
下表罗列了一些Linux系统使用的变量并说明了它们的用处。在表格后面将列举一些变量例值。
</p>

<table>
<tr>
  <th>变量</th>
  <th>说明</th>
</tr>
<tr>
  <ti>PATH</ti>
  <ti>
    这个变量包含了一系列由冒号分隔开的目录，系统就从这些目录里寻找可执行文件。
    如果你输入的可执行文件（例如<c>ls</c>、<c>rc-update</c>或者<c>emerge</c>）
    不在这些目录中，系统就无法执行它（除非你输入这个命令的完整路径，
    如<c>/bin/ls</c>）。
  </ti>
</tr>
<tr>
  <ti>ROOTPATH</ti>
  <ti>
    这个变量的功能和<c>PATH</c>相同，但它只罗列出超级用户（root）键入命令时所
    需检查的目录。
  </ti>
</tr>
<tr>
  <ti>LDPATH</ti>
  <ti>
    这个变量包含了一系列用冒号隔开的目录，动态链接器将在这些目录里查找库文件。
  </ti>
</tr>
<tr>
  <ti>MANPATH</ti>
  <ti>
    这个变量包含了一系列用冒号隔开的目录，命令<c>man</c>会在这些目录里搜索man
    页面。
  </ti>
</tr>
<tr>
  <ti>INFODIR</ti>
  <ti>
    这个变量包含了一系列用冒号隔开的目录，命令<c>info</c>将在这些目录里搜索info
    页面。
  </ti>
</tr>
<tr>
  <ti>PAGER</ti>
  <ti>
    这个变量包含了浏览文件内容的程序的路径（例如<c>less</c>或者<c>more</c>）。
  </ti>
</tr>
<tr>
  <ti>EDITOR</ti>
  <ti>
    这个变量包含了修改文件内容的程序（文件编辑器）的路径
    （比如<c>nano</c>或者<c>vi</c>）。
  </ti>
</tr>
<tr>
  <ti>KDEDIRS</ti>
  <ti>
    这个变量包含了一系列用冒号隔开的目录，里面放的是KDE相关的资料。
  </ti>
</tr>
<tr>
  <ti>CONFIG_PROTECT</ti>
  <ti>
    这个变量包含了一系列用<e>空格</e>隔开的目录，它们在更新的时候会被Portage
    保护起来。
  </ti>
</tr>
<tr>
  <ti>CONFIG_PROTECT_MASK</ti>
  <ti>
    这个变量包含了一系列用<e>空格</e>隔开的目录，它们在更新的时候不会被Portage
    保护起来。
  </ti>
</tr>
</table>

<p>
下面你可以找到所有这些变量定义的范例：
</p>

<pre caption="定义范例">
PATH="/bin:/usr/bin:/usr/local/bin:/opt/bin:/usr/games/bin"
ROOTPATH="/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin"
LDPATH="/lib:/usr/lib:/usr/local/lib:/usr/lib/gcc-lib/i686-pc-linux-gnu/3.2.3"
MANPATH="/usr/share/man:/usr/local/share/man"
INFODIR="/usr/share/info:/usr/local/share/info"
PAGER="/usr/bin/less"
EDITOR="/usr/bin/vim"
KDEDIRS="/usr"
CONFIG_PROTECT="/usr/X11R6/lib/X11/xkb /opt/tomcat/conf \
                /usr/kde/3.1/share/config /usr/share/texmf/tex/generic/config/ \
                /usr/share/texmf/tex/platex/config/ /usr/share/config"
CONFIG_PROTECT_MASK="/etc/gconf"
</pre>

</body>
</subsection>
</section>
<section>
<title>全局变量的定义</title>
<subsection>
<title>/etc/env.d目录</title>
<body>

<p>
Gentoo采用了<path>/etc/env.d</path>目录来集中定义全局变量。在这个目录里，你会发现很多类似<path>00basic</path>、<path>05gcc</path>等等这样的文件，它们包含了文件名中提到的应用程序需要的变量。
</p>

<p>
举个例子，当你安装<c>gcc</c>时，一个名为<path>05gcc</path>的文件就会被ebuild所创建，里面包含了如下一些变量：
</p>

<pre caption="/etc/env.d/05gcc">
PATH="/usr/i686-pc-linux-gnu/gcc-bin/3.2"
ROOTPATH="/usr/i686-pc-linux-gnu/gcc-bin/3.2"
MANPATH="/usr/share/gcc-data/i686-pc-linux-gnu/3.2/man"
INFOPATH="/usr/share/gcc-data/i686-pc-linux-gnu/3.2/info"
CC="gcc"
CXX="g++"
LDPATH="/usr/lib/gcc-lib/i686-pc-linux-gnu/3.2.3"
</pre>

<p>
其他的发行版会让你到<path>/etc/profile</path>或者其他地方修改和添加这些变量的定义。而Gentoo为用户（还有为Portage）提供了更加便捷的方式来维护和管理环境变量，以后你不再需要把精力放在那些众多的包含环境变量的文件身上了。
</p>

<p>
比如，当你更新完<c>gcc</c>的时候，<path>/etc/env.d/05gcc</path>也会被同时更新，而不需要你手工来完成。
</p>

<p>
这不仅对Portage有益，作为用户，你也是受益者。有时候你需要设置某个系统范围的环境变量。我们拿<c>http_proxy</c>变量来做例子，为了避免把<path>/etc/profile</path>搞乱，你只要新建一个文件（<path>/etc/env.d/99local</path>）然后添加你的定义：
</p>

<pre caption="/etc/env.d/99local">
http_proxy="proxy.server.com:8080"
</pre>

<p>
通过使用同一个文件来定义你所有的变量，你对如何定义自己的变量有了个大概的了解。
</p>

</body>
</subsection>
<subsection>
<title>env-update脚本</title>
<body>

<p>
<path>/etc/env.d</path>中的好几个文件都定义了<c>PATH</c>变量。这并没有错：当你运行<c>env-update</c>的时候，它会在更新环境变量之前把这些定义都追加到PATH里，因此对于软件包（或者用户）来说将会很容易地设置他们自己的环境变量，而不影响到现有变量的值。
</p>

<p>
<c>env-update</c>脚本会根据<path>/etc/env.d</path>里文件的字母顺序来附加变量的值。这些文件名必须要以两位数字开头。
</p>

<pre caption="env-update所用的更新顺序">
         00basic        99kde-env       99local
     +-------------+----------------+-------------+
PATH="/bin:/usr/bin:/usr/kde/3.2/bin:/usr/local/bin"
</pre>

<p>
变量并不总是被串联起来，只有下列变量才会被串联：<c>KDEDIRS</c>、<c>PATH</c>、<c>LDPATH</c>、<c>MANPATH</c>、<c>INFODIR</c>、<c>INFOPATH</c>、<c>ROOTPATH</c>、<c>CONFIG_PROTECT</c>、<c>CONFIG_PROTECT_MASK</c>、<c>PRELINK_PATH</c>以及<c>PRELINK_PATH_MASK</c>。对于（<path>/etc/env.d</path>里的文件中按照字母顺序排列后）其他所有变量，最新定义的值才会被使用到。
</p>

<p>
当你运行<c>env-update</c>的时候，它会在文件<path>/etc/profile.env</path>里（会被<path>/etc/profile</path>使用）创建所有的环境变量。它也会从变量<c>LDPATH</c>中获取信息用来建立<path>/etc/ld.so.conf</path>。这些完成以后，它将运行<c>ldconfig</c>来重建动态链接器需要的文件<path>/etc/ld.so.cache</path>。
</p>

<p>
如果你想在运行<c>env-update</c>后立即看到效果，执行下面的命令来更新你的环境。自己安装过Gentoo的用户可能已经记住了这个安装指南中提到过的命令：
</p>

<pre caption="更新环境">
# <i>env-update &amp;&amp; source /etc/profile</i>
</pre>

<note>
上面的命令只会更新你当前终端里的环境变量、<e>新</e>控制台以及它们的子程序。因此，假如你正在X11里工作，你要么在每一个你打开的终端里输入<c>source /etc/profile</c>，要么重新启动X，这样所有新的终端才能引用到新的变量。如果你使用了登录管理器，登陆成root然后输入<c>/etc/init.d/xdm restart</c>。如果不是这样，你需要注销然后重新登录回X这样才能产生使用新变量值的子程序。
</note>

<impo>
你在定义其他变量时不能使用shell变量。这意味着这样的定义<c>FOO="$BAR"</c>（此处<c>$BAR</c>是另外一个变量）是不允许的。
</impo>

</body>
</subsection>
</section>
<section>
<title>本地变量的定义</title>
<subsection>
<title>特定用户</title>
<body>

<p>
你并不是一直都想定义全局变量。比如你想把<path>/home/my_user/bin</path>和当前目录（你当前所在的目录）添加到<c>PATH</c>变量中，但又不想让其他用户的<c>PATH</c>变量中也有这个。如果你想定义一个本地变量，可以使用<path>~/.bashrc</path>或者<path>~/.bash_profile</path>：
</p>

<pre caption="在~/.bashrc中扩展PATH做为本地使用">
<comment>（冒号后面不跟任何目录就代表了当前目录）</comment>
PATH="${PATH}:/home/my_user/bin:"
</pre>

<p>
当你重新登录的时候，你的<c>PATH</c>变量将被更新。
</p>

</body>
</subsection>
<subsection>
<title>特定会话</title>
<body>

<p>
有时候甚至需要更加严格的定义。你可能要使用一个你临时创建的目录里面的程序，而又不想输入它的路径或者为此短时间内内修改<path>~/.bashrc</path>。
</p>

<p>
在这种情况下，你只需要在当前会话中使用<c>export</c>来定义<c>PATH</c>变量。只要你不注销，<c>PATH</c>变量将保持这个临时的设置。
</p>

<pre caption="定义特定会话中的环境变量">
# <i>export PATH="${PATH}:/home/my_user/tmp/usr/bin"</i>
</pre>

</body>
</subsection>
</section>
</sections>
